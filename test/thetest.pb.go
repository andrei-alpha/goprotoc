// Code generated by protoc-gen-dgo.
// source: thetest.proto
// DO NOT EDIT!

/*
	Package test is a generated protocol buffer package.

	It is generated from these files:
		thetest.proto

	It has these top-level messages:
		NidOptNative
		NinOptNative
		NidRepNative
		NinRepNative
		NidRepPackedNative
		NinRepPackedNative
		NidOptStruct
		NinOptStruct
		NidRepStruct
		NinRepStruct
		NidEmbeddedStruct
		NinEmbeddedStruct
		NidNestedStruct
		NinNestedStruct
		NidOptCustom
		NinOptCustom
		NidRepCustom
		NinRepCustom
		NinOptNativeUnion
		NinOptStructUnion
		NinEmbeddedStructUnion
		NinNestedStructUnion
		Tree
		OrBranch
		AndBranch
		Leaf
		DeepTree
		ADeepBranch
		AndDeepBranch
		DeepLeaf
		Nil
		NidOptEnum
		NinOptEnum
		NidRepEnum
		NinRepEnum
		NinOptEnumDefault
		AnotherNinOptEnum
		AnotherNinOptEnumDefault
		Timer
		MyExtendable
		OtherExtenable
		NestedDefinition
		NestedScope
		NinOptNativeDefault
		CustomContainer
		CustomNameNidOptNative
		CustomNameNinOptNative
		CustomNameNinRepNative
		CustomNameNinStruct
		CustomNameCustomType
		CustomNameNinEmbeddedStructUnion
		CustomNameEnum
		NoExtensionsMap
*/
package test

import proto "github.com/dropbox/goprotoc/proto"
import fmt "fmt"
import io "io"
import math "math"
import errors "godropbox/errors"
import reflect "reflect"

// discarding unused import gogoproto "github.com/dropbox/goprotoc/gogoproto/gogo.pb"

import strings1 "strings"

import github_com_dropbox_goprotoc_proto "github.com/dropbox/goprotoc/proto"

import github_com_dropbox_goprotoc_proto1 "github.com/dropbox/goprotoc/proto"

import bytes "bytes"

import strconv "strconv"

import google_protobuf "github.com/dropbox/goprotoc/protoc-gen-dgo/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Print
var _ = io.Copy
var _ = math.Inf
var _ = errors.New
var _ = reflect.Copy

type TheTestEnum int32

const (
	A TheTestEnum = 0
	B TheTestEnum = 1
	C TheTestEnum = 2
)

var TheTestEnum_name = map[int32]string{
	0: "A",
	1: "B",
	2: "C",
}
var TheTestEnum_value = map[string]int32{
	"A": 0,
	"B": 1,
	"C": 2,
}

func (x TheTestEnum) Enum() *TheTestEnum {
	p := new(TheTestEnum)
	*p = x
	return p
}

type AnotherTestEnum int32

const (
	D AnotherTestEnum = 10
	E AnotherTestEnum = 11
)

var AnotherTestEnum_name = map[int32]string{
	10: "D",
	11: "E",
}
var AnotherTestEnum_value = map[string]int32{
	"D": 10,
	"E": 11,
}

func (x AnotherTestEnum) Enum() *AnotherTestEnum {
	p := new(AnotherTestEnum)
	*p = x
	return p
}

type NestedDefinition_NestedEnum int32

const (
	TYPE_NESTED NestedDefinition_NestedEnum = 1
)

var NestedDefinition_NestedEnum_name = map[int32]string{
	1: "TYPE_NESTED",
}
var NestedDefinition_NestedEnum_value = map[string]int32{
	"TYPE_NESTED": 1,
}

func (x NestedDefinition_NestedEnum) Enum() *NestedDefinition_NestedEnum {
	p := new(NestedDefinition_NestedEnum)
	*p = x
	return p
}

type NidOptNative struct {
	xxx_sizeCached   int
	field1           float64
	field2           float32
	field3           int32
	field4           int64
	field5           uint32
	field6           uint64
	field7           int32
	field8           int64
	field9           uint32
	field10          int32
	field11          uint64
	field12          int64
	field13          bool
	field14          string
	field15          []byte
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
	xxx_IsField2Set  bool
	xxx_IsField3Set  bool
	xxx_IsField4Set  bool
	xxx_IsField5Set  bool
	xxx_IsField6Set  bool
	xxx_IsField7Set  bool
	xxx_IsField8Set  bool
	xxx_IsField9Set  bool
	xxx_IsField10Set bool
	xxx_IsField11Set bool
	xxx_IsField12Set bool
	xxx_IsField13Set bool
	xxx_IsField14Set bool
	xxx_IsField15Set bool
}

func (m *NidOptNative) Reset()      { *m = NidOptNative{} }
func (*NidOptNative) ProtoMessage() {}

func (m *NidOptNative) GetField1() float64 {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return 0
}

func (m *NidOptNative) GetField2() float32 {
	if m != nil && m.xxx_IsField2Set {
		return m.field2
	}
	return 0
}

func (m *NidOptNative) GetField3() int32 {
	if m != nil && m.xxx_IsField3Set {
		return m.field3
	}
	return 0
}

func (m *NidOptNative) GetField4() int64 {
	if m != nil && m.xxx_IsField4Set {
		return m.field4
	}
	return 0
}

func (m *NidOptNative) GetField5() uint32 {
	if m != nil && m.xxx_IsField5Set {
		return m.field5
	}
	return 0
}

func (m *NidOptNative) GetField6() uint64 {
	if m != nil && m.xxx_IsField6Set {
		return m.field6
	}
	return 0
}

func (m *NidOptNative) GetField7() int32 {
	if m != nil && m.xxx_IsField7Set {
		return m.field7
	}
	return 0
}

func (m *NidOptNative) GetField8() int64 {
	if m != nil && m.xxx_IsField8Set {
		return m.field8
	}
	return 0
}

func (m *NidOptNative) GetField9() uint32 {
	if m != nil && m.xxx_IsField9Set {
		return m.field9
	}
	return 0
}

func (m *NidOptNative) GetField10() int32 {
	if m != nil && m.xxx_IsField10Set {
		return m.field10
	}
	return 0
}

func (m *NidOptNative) GetField11() uint64 {
	if m != nil && m.xxx_IsField11Set {
		return m.field11
	}
	return 0
}

func (m *NidOptNative) GetField12() int64 {
	if m != nil && m.xxx_IsField12Set {
		return m.field12
	}
	return 0
}

func (m *NidOptNative) GetField13() bool {
	if m != nil && m.xxx_IsField13Set {
		return m.field13
	}
	return false
}

func (m *NidOptNative) GetField14() string {
	if m != nil && m.xxx_IsField14Set {
		return m.field14
	}
	return ""
}

func (m *NidOptNative) GetField15() []byte {
	if m != nil && m.xxx_IsField15Set {
		return m.field15
	}
	return nil
}
func (m *NidOptNative) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidOptNative) SetField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NidOptNative) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NidOptNative) SetField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField2Set = true
	m.field2 = value
	return nil
}

func (m *NidOptNative) HasField2() (isSet bool) {
	if m != nil && m.xxx_IsField2Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField2() {
	if m != nil {
		m.xxx_IsField2Set = false
	}
}

func (m *NidOptNative) SetField3(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField3Set = true
	m.field3 = value
	return nil
}

func (m *NidOptNative) HasField3() (isSet bool) {
	if m != nil && m.xxx_IsField3Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField3() {
	if m != nil {
		m.xxx_IsField3Set = false
	}
}

func (m *NidOptNative) SetField4(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField4Set = true
	m.field4 = value
	return nil
}

func (m *NidOptNative) HasField4() (isSet bool) {
	if m != nil && m.xxx_IsField4Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField4() {
	if m != nil {
		m.xxx_IsField4Set = false
	}
}

func (m *NidOptNative) SetField5(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField5Set = true
	m.field5 = value
	return nil
}

func (m *NidOptNative) HasField5() (isSet bool) {
	if m != nil && m.xxx_IsField5Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField5() {
	if m != nil {
		m.xxx_IsField5Set = false
	}
}

func (m *NidOptNative) SetField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField6Set = true
	m.field6 = value
	return nil
}

func (m *NidOptNative) HasField6() (isSet bool) {
	if m != nil && m.xxx_IsField6Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField6() {
	if m != nil {
		m.xxx_IsField6Set = false
	}
}

func (m *NidOptNative) SetField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField7Set = true
	m.field7 = value
	return nil
}

func (m *NidOptNative) HasField7() (isSet bool) {
	if m != nil && m.xxx_IsField7Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField7() {
	if m != nil {
		m.xxx_IsField7Set = false
	}
}

func (m *NidOptNative) SetField8(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField8Set = true
	m.field8 = value
	return nil
}

func (m *NidOptNative) HasField8() (isSet bool) {
	if m != nil && m.xxx_IsField8Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField8() {
	if m != nil {
		m.xxx_IsField8Set = false
	}
}

func (m *NidOptNative) SetField9(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField9Set = true
	m.field9 = value
	return nil
}

func (m *NidOptNative) HasField9() (isSet bool) {
	if m != nil && m.xxx_IsField9Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField9() {
	if m != nil {
		m.xxx_IsField9Set = false
	}
}

func (m *NidOptNative) SetField10(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField10Set = true
	m.field10 = value
	return nil
}

func (m *NidOptNative) HasField10() (isSet bool) {
	if m != nil && m.xxx_IsField10Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField10() {
	if m != nil {
		m.xxx_IsField10Set = false
	}
}

func (m *NidOptNative) SetField11(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField11Set = true
	m.field11 = value
	return nil
}

func (m *NidOptNative) HasField11() (isSet bool) {
	if m != nil && m.xxx_IsField11Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField11() {
	if m != nil {
		m.xxx_IsField11Set = false
	}
}

func (m *NidOptNative) SetField12(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField12Set = true
	m.field12 = value
	return nil
}

func (m *NidOptNative) HasField12() (isSet bool) {
	if m != nil && m.xxx_IsField12Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField12() {
	if m != nil {
		m.xxx_IsField12Set = false
	}
}

func (m *NidOptNative) SetField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField13Set = true
	m.field13 = value
	return nil
}

func (m *NidOptNative) HasField13() (isSet bool) {
	if m != nil && m.xxx_IsField13Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField13() {
	if m != nil {
		m.xxx_IsField13Set = false
	}
}

func (m *NidOptNative) SetField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField14Set = true
	m.field14 = value
	return nil
}

func (m *NidOptNative) HasField14() (isSet bool) {
	if m != nil && m.xxx_IsField14Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField14() {
	if m != nil {
		m.xxx_IsField14Set = false
		m.field14 = ""
	}
}

func (m *NidOptNative) SetField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsField15Set = true
	m.field15 = value
	return nil
}

func (m *NidOptNative) HasField15() (isSet bool) {
	if m != nil && m.xxx_IsField15Set {
		return true
	}
	return false
}

func (m *NidOptNative) ClearField15() {
	if m != nil {
		m.xxx_IsField15Set = false
		m.field15 = nil
	}
}

func (m *NidOptNative) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.ClearField3()
		m.ClearField4()
		m.ClearField5()
		m.ClearField6()
		m.ClearField7()
		m.ClearField8()
		m.ClearField9()
		m.ClearField10()
		m.ClearField11()
		m.ClearField12()
		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type NinOptNative struct {
	xxx_sizeCached   int
	field1           float64
	field2           float32
	field3           int32
	field4           int64
	field5           uint32
	field6           uint64
	field7           int32
	field8           int64
	field9           uint32
	field10          int32
	field11          uint64
	field12          int64
	field13          bool
	field14          string
	field15          []byte
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
	xxx_IsField2Set  bool
	xxx_IsField3Set  bool
	xxx_IsField4Set  bool
	xxx_IsField5Set  bool
	xxx_IsField6Set  bool
	xxx_IsField7Set  bool
	xxx_IsField8Set  bool
	xxx_IsField9Set  bool
	xxx_IsField10Set bool
	xxx_IsField11Set bool
	xxx_IsField12Set bool
	xxx_IsField13Set bool
	xxx_IsField14Set bool
	xxx_IsField15Set bool
}

func (m *NinOptNative) Reset()      { *m = NinOptNative{} }
func (*NinOptNative) ProtoMessage() {}

func (m *NinOptNative) GetField1() float64 {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return 0
}

func (m *NinOptNative) GetField2() float32 {
	if m != nil && m.xxx_IsField2Set {
		return m.field2
	}
	return 0
}

func (m *NinOptNative) GetField3() int32 {
	if m != nil && m.xxx_IsField3Set {
		return m.field3
	}
	return 0
}

func (m *NinOptNative) GetField4() int64 {
	if m != nil && m.xxx_IsField4Set {
		return m.field4
	}
	return 0
}

func (m *NinOptNative) GetField5() uint32 {
	if m != nil && m.xxx_IsField5Set {
		return m.field5
	}
	return 0
}

func (m *NinOptNative) GetField6() uint64 {
	if m != nil && m.xxx_IsField6Set {
		return m.field6
	}
	return 0
}

func (m *NinOptNative) GetField7() int32 {
	if m != nil && m.xxx_IsField7Set {
		return m.field7
	}
	return 0
}

func (m *NinOptNative) GetField8() int64 {
	if m != nil && m.xxx_IsField8Set {
		return m.field8
	}
	return 0
}

func (m *NinOptNative) GetField9() uint32 {
	if m != nil && m.xxx_IsField9Set {
		return m.field9
	}
	return 0
}

func (m *NinOptNative) GetField10() int32 {
	if m != nil && m.xxx_IsField10Set {
		return m.field10
	}
	return 0
}

func (m *NinOptNative) GetField11() uint64 {
	if m != nil && m.xxx_IsField11Set {
		return m.field11
	}
	return 0
}

func (m *NinOptNative) GetField12() int64 {
	if m != nil && m.xxx_IsField12Set {
		return m.field12
	}
	return 0
}

func (m *NinOptNative) GetField13() bool {
	if m != nil && m.xxx_IsField13Set {
		return m.field13
	}
	return false
}

func (m *NinOptNative) GetField14() string {
	if m != nil && m.xxx_IsField14Set {
		return m.field14
	}
	return ""
}

func (m *NinOptNative) GetField15() []byte {
	if m != nil && m.xxx_IsField15Set {
		return m.field15
	}
	return nil
}
func (m *NinOptNative) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinOptNative) SetField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NinOptNative) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NinOptNative) SetField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField2Set = true
	m.field2 = value
	return nil
}

func (m *NinOptNative) HasField2() (isSet bool) {
	if m != nil && m.xxx_IsField2Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField2() {
	if m != nil {
		m.xxx_IsField2Set = false
	}
}

func (m *NinOptNative) SetField3(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField3Set = true
	m.field3 = value
	return nil
}

func (m *NinOptNative) HasField3() (isSet bool) {
	if m != nil && m.xxx_IsField3Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField3() {
	if m != nil {
		m.xxx_IsField3Set = false
	}
}

func (m *NinOptNative) SetField4(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField4Set = true
	m.field4 = value
	return nil
}

func (m *NinOptNative) HasField4() (isSet bool) {
	if m != nil && m.xxx_IsField4Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField4() {
	if m != nil {
		m.xxx_IsField4Set = false
	}
}

func (m *NinOptNative) SetField5(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField5Set = true
	m.field5 = value
	return nil
}

func (m *NinOptNative) HasField5() (isSet bool) {
	if m != nil && m.xxx_IsField5Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField5() {
	if m != nil {
		m.xxx_IsField5Set = false
	}
}

func (m *NinOptNative) SetField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField6Set = true
	m.field6 = value
	return nil
}

func (m *NinOptNative) HasField6() (isSet bool) {
	if m != nil && m.xxx_IsField6Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField6() {
	if m != nil {
		m.xxx_IsField6Set = false
	}
}

func (m *NinOptNative) SetField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField7Set = true
	m.field7 = value
	return nil
}

func (m *NinOptNative) HasField7() (isSet bool) {
	if m != nil && m.xxx_IsField7Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField7() {
	if m != nil {
		m.xxx_IsField7Set = false
	}
}

func (m *NinOptNative) SetField8(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField8Set = true
	m.field8 = value
	return nil
}

func (m *NinOptNative) HasField8() (isSet bool) {
	if m != nil && m.xxx_IsField8Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField8() {
	if m != nil {
		m.xxx_IsField8Set = false
	}
}

func (m *NinOptNative) SetField9(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField9Set = true
	m.field9 = value
	return nil
}

func (m *NinOptNative) HasField9() (isSet bool) {
	if m != nil && m.xxx_IsField9Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField9() {
	if m != nil {
		m.xxx_IsField9Set = false
	}
}

func (m *NinOptNative) SetField10(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField10Set = true
	m.field10 = value
	return nil
}

func (m *NinOptNative) HasField10() (isSet bool) {
	if m != nil && m.xxx_IsField10Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField10() {
	if m != nil {
		m.xxx_IsField10Set = false
	}
}

func (m *NinOptNative) SetField11(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField11Set = true
	m.field11 = value
	return nil
}

func (m *NinOptNative) HasField11() (isSet bool) {
	if m != nil && m.xxx_IsField11Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField11() {
	if m != nil {
		m.xxx_IsField11Set = false
	}
}

func (m *NinOptNative) SetField12(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField12Set = true
	m.field12 = value
	return nil
}

func (m *NinOptNative) HasField12() (isSet bool) {
	if m != nil && m.xxx_IsField12Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField12() {
	if m != nil {
		m.xxx_IsField12Set = false
	}
}

func (m *NinOptNative) SetField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField13Set = true
	m.field13 = value
	return nil
}

func (m *NinOptNative) HasField13() (isSet bool) {
	if m != nil && m.xxx_IsField13Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField13() {
	if m != nil {
		m.xxx_IsField13Set = false
	}
}

func (m *NinOptNative) SetField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField14Set = true
	m.field14 = value
	return nil
}

func (m *NinOptNative) HasField14() (isSet bool) {
	if m != nil && m.xxx_IsField14Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField14() {
	if m != nil {
		m.xxx_IsField14Set = false
		m.field14 = ""
	}
}

func (m *NinOptNative) SetField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsField15Set = true
	m.field15 = value
	return nil
}

func (m *NinOptNative) HasField15() (isSet bool) {
	if m != nil && m.xxx_IsField15Set {
		return true
	}
	return false
}

func (m *NinOptNative) ClearField15() {
	if m != nil {
		m.xxx_IsField15Set = false
		m.field15 = nil
	}
}

func (m *NinOptNative) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.ClearField3()
		m.ClearField4()
		m.ClearField5()
		m.ClearField6()
		m.ClearField7()
		m.ClearField8()
		m.ClearField9()
		m.ClearField10()
		m.ClearField11()
		m.ClearField12()
		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type NidRepNative struct {
	xxx_sizeCached   int
	field1           []float64
	field2           []float32
	field3           []int32
	field4           []int64
	field5           []uint32
	field6           []uint64
	field7           []int32
	field8           []int64
	field9           []uint32
	field10          []int32
	field11          []uint64
	field12          []int64
	field13          []bool
	field14          []string
	field15          [][]byte
	XXX_unrecognized []byte
	xxx_LenField1    int
	xxx_LenField2    int
	xxx_LenField3    int
	xxx_LenField4    int
	xxx_LenField5    int
	xxx_LenField6    int
	xxx_LenField7    int
	xxx_LenField8    int
	xxx_LenField9    int
	xxx_LenField10   int
	xxx_LenField11   int
	xxx_LenField12   int
	xxx_LenField13   int
	xxx_LenField14   int
	xxx_LenField15   int
}

func (m *NidRepNative) Reset()      { *m = NidRepNative{} }
func (*NidRepNative) ProtoMessage() {}

func (m *NidRepNative) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidRepNative) AddField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field1) <= m.xxx_LenField1 {
		newCapacity := 0
		if len(m.field1) == 0 {
			newCapacity = 8
		} else if len(m.field1) < 1000000 {
			newCapacity = m.xxx_LenField1 * 2
		} else {
			newCapacity = m.xxx_LenField1 + 1000000
		}
		t := make([]float64, newCapacity, newCapacity)
		copy(t, m.field1)
		m.field1 = t
	}
	m.field1[m.xxx_LenField1] = value
	m.xxx_LenField1 += 1
	return nil
}

func (m *NidRepNative) SetField1(value float64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return errors.New("Index is out of bounds")
	}
	m.field1[index] = value
	return nil
}

func (m *NidRepNative) Field1Size() (size int) {
	if m != nil {
		return m.xxx_LenField1
	}
	return 0
}

func (m *NidRepNative) ClearField1() {
	if m != nil {
		m.xxx_LenField1 = 0
	}
}

func (m *NidRepNative) GetField1(index int) (field float64, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field1[index], nil
}

func (m *NidRepNative) AddField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field2) <= m.xxx_LenField2 {
		newCapacity := 0
		if len(m.field2) == 0 {
			newCapacity = 8
		} else if len(m.field2) < 1000000 {
			newCapacity = m.xxx_LenField2 * 2
		} else {
			newCapacity = m.xxx_LenField2 + 1000000
		}
		t := make([]float32, newCapacity, newCapacity)
		copy(t, m.field2)
		m.field2 = t
	}
	m.field2[m.xxx_LenField2] = value
	m.xxx_LenField2 += 1
	return nil
}

func (m *NidRepNative) SetField2(value float32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return errors.New("Index is out of bounds")
	}
	m.field2[index] = value
	return nil
}

func (m *NidRepNative) Field2Size() (size int) {
	if m != nil {
		return m.xxx_LenField2
	}
	return 0
}

func (m *NidRepNative) ClearField2() {
	if m != nil {
		m.xxx_LenField2 = 0
	}
}

func (m *NidRepNative) GetField2(index int) (field float32, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field2[index], nil
}

func (m *NidRepNative) AddField3(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field3) <= m.xxx_LenField3 {
		newCapacity := 0
		if len(m.field3) == 0 {
			newCapacity = 8
		} else if len(m.field3) < 1000000 {
			newCapacity = m.xxx_LenField3 * 2
		} else {
			newCapacity = m.xxx_LenField3 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field3)
		m.field3 = t
	}
	m.field3[m.xxx_LenField3] = value
	m.xxx_LenField3 += 1
	return nil
}

func (m *NidRepNative) SetField3(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return errors.New("Index is out of bounds")
	}
	m.field3[index] = value
	return nil
}

func (m *NidRepNative) Field3Size() (size int) {
	if m != nil {
		return m.xxx_LenField3
	}
	return 0
}

func (m *NidRepNative) ClearField3() {
	if m != nil {
		m.xxx_LenField3 = 0
	}
}

func (m *NidRepNative) GetField3(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field3[index], nil
}

func (m *NidRepNative) AddField4(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field4) <= m.xxx_LenField4 {
		newCapacity := 0
		if len(m.field4) == 0 {
			newCapacity = 8
		} else if len(m.field4) < 1000000 {
			newCapacity = m.xxx_LenField4 * 2
		} else {
			newCapacity = m.xxx_LenField4 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field4)
		m.field4 = t
	}
	m.field4[m.xxx_LenField4] = value
	m.xxx_LenField4 += 1
	return nil
}

func (m *NidRepNative) SetField4(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return errors.New("Index is out of bounds")
	}
	m.field4[index] = value
	return nil
}

func (m *NidRepNative) Field4Size() (size int) {
	if m != nil {
		return m.xxx_LenField4
	}
	return 0
}

func (m *NidRepNative) ClearField4() {
	if m != nil {
		m.xxx_LenField4 = 0
	}
}

func (m *NidRepNative) GetField4(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field4[index], nil
}

func (m *NidRepNative) AddField5(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field5) <= m.xxx_LenField5 {
		newCapacity := 0
		if len(m.field5) == 0 {
			newCapacity = 8
		} else if len(m.field5) < 1000000 {
			newCapacity = m.xxx_LenField5 * 2
		} else {
			newCapacity = m.xxx_LenField5 + 1000000
		}
		t := make([]uint32, newCapacity, newCapacity)
		copy(t, m.field5)
		m.field5 = t
	}
	m.field5[m.xxx_LenField5] = value
	m.xxx_LenField5 += 1
	return nil
}

func (m *NidRepNative) SetField5(value uint32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField5 {
		return errors.New("Index is out of bounds")
	}
	m.field5[index] = value
	return nil
}

func (m *NidRepNative) Field5Size() (size int) {
	if m != nil {
		return m.xxx_LenField5
	}
	return 0
}

func (m *NidRepNative) ClearField5() {
	if m != nil {
		m.xxx_LenField5 = 0
	}
}

func (m *NidRepNative) GetField5(index int) (field uint32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField5 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field5[index], nil
}

func (m *NidRepNative) AddField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field6) <= m.xxx_LenField6 {
		newCapacity := 0
		if len(m.field6) == 0 {
			newCapacity = 8
		} else if len(m.field6) < 1000000 {
			newCapacity = m.xxx_LenField6 * 2
		} else {
			newCapacity = m.xxx_LenField6 + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.field6)
		m.field6 = t
	}
	m.field6[m.xxx_LenField6] = value
	m.xxx_LenField6 += 1
	return nil
}

func (m *NidRepNative) SetField6(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return errors.New("Index is out of bounds")
	}
	m.field6[index] = value
	return nil
}

func (m *NidRepNative) Field6Size() (size int) {
	if m != nil {
		return m.xxx_LenField6
	}
	return 0
}

func (m *NidRepNative) ClearField6() {
	if m != nil {
		m.xxx_LenField6 = 0
	}
}

func (m *NidRepNative) GetField6(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field6[index], nil
}

func (m *NidRepNative) AddField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field7) <= m.xxx_LenField7 {
		newCapacity := 0
		if len(m.field7) == 0 {
			newCapacity = 8
		} else if len(m.field7) < 1000000 {
			newCapacity = m.xxx_LenField7 * 2
		} else {
			newCapacity = m.xxx_LenField7 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field7)
		m.field7 = t
	}
	m.field7[m.xxx_LenField7] = value
	m.xxx_LenField7 += 1
	return nil
}

func (m *NidRepNative) SetField7(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return errors.New("Index is out of bounds")
	}
	m.field7[index] = value
	return nil
}

func (m *NidRepNative) Field7Size() (size int) {
	if m != nil {
		return m.xxx_LenField7
	}
	return 0
}

func (m *NidRepNative) ClearField7() {
	if m != nil {
		m.xxx_LenField7 = 0
	}
}

func (m *NidRepNative) GetField7(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field7[index], nil
}

func (m *NidRepNative) AddField8(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field8) <= m.xxx_LenField8 {
		newCapacity := 0
		if len(m.field8) == 0 {
			newCapacity = 8
		} else if len(m.field8) < 1000000 {
			newCapacity = m.xxx_LenField8 * 2
		} else {
			newCapacity = m.xxx_LenField8 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field8)
		m.field8 = t
	}
	m.field8[m.xxx_LenField8] = value
	m.xxx_LenField8 += 1
	return nil
}

func (m *NidRepNative) SetField8(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return errors.New("Index is out of bounds")
	}
	m.field8[index] = value
	return nil
}

func (m *NidRepNative) Field8Size() (size int) {
	if m != nil {
		return m.xxx_LenField8
	}
	return 0
}

func (m *NidRepNative) ClearField8() {
	if m != nil {
		m.xxx_LenField8 = 0
	}
}

func (m *NidRepNative) GetField8(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field8[index], nil
}

func (m *NidRepNative) AddField9(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field9) <= m.xxx_LenField9 {
		newCapacity := 0
		if len(m.field9) == 0 {
			newCapacity = 8
		} else if len(m.field9) < 1000000 {
			newCapacity = m.xxx_LenField9 * 2
		} else {
			newCapacity = m.xxx_LenField9 + 1000000
		}
		t := make([]uint32, newCapacity, newCapacity)
		copy(t, m.field9)
		m.field9 = t
	}
	m.field9[m.xxx_LenField9] = value
	m.xxx_LenField9 += 1
	return nil
}

func (m *NidRepNative) SetField9(value uint32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField9 {
		return errors.New("Index is out of bounds")
	}
	m.field9[index] = value
	return nil
}

func (m *NidRepNative) Field9Size() (size int) {
	if m != nil {
		return m.xxx_LenField9
	}
	return 0
}

func (m *NidRepNative) ClearField9() {
	if m != nil {
		m.xxx_LenField9 = 0
	}
}

func (m *NidRepNative) GetField9(index int) (field uint32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField9 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field9[index], nil
}

func (m *NidRepNative) AddField10(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field10) <= m.xxx_LenField10 {
		newCapacity := 0
		if len(m.field10) == 0 {
			newCapacity = 8
		} else if len(m.field10) < 1000000 {
			newCapacity = m.xxx_LenField10 * 2
		} else {
			newCapacity = m.xxx_LenField10 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field10)
		m.field10 = t
	}
	m.field10[m.xxx_LenField10] = value
	m.xxx_LenField10 += 1
	return nil
}

func (m *NidRepNative) SetField10(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField10 {
		return errors.New("Index is out of bounds")
	}
	m.field10[index] = value
	return nil
}

func (m *NidRepNative) Field10Size() (size int) {
	if m != nil {
		return m.xxx_LenField10
	}
	return 0
}

func (m *NidRepNative) ClearField10() {
	if m != nil {
		m.xxx_LenField10 = 0
	}
}

func (m *NidRepNative) GetField10(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField10 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field10[index], nil
}

func (m *NidRepNative) AddField11(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field11) <= m.xxx_LenField11 {
		newCapacity := 0
		if len(m.field11) == 0 {
			newCapacity = 8
		} else if len(m.field11) < 1000000 {
			newCapacity = m.xxx_LenField11 * 2
		} else {
			newCapacity = m.xxx_LenField11 + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.field11)
		m.field11 = t
	}
	m.field11[m.xxx_LenField11] = value
	m.xxx_LenField11 += 1
	return nil
}

func (m *NidRepNative) SetField11(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField11 {
		return errors.New("Index is out of bounds")
	}
	m.field11[index] = value
	return nil
}

func (m *NidRepNative) Field11Size() (size int) {
	if m != nil {
		return m.xxx_LenField11
	}
	return 0
}

func (m *NidRepNative) ClearField11() {
	if m != nil {
		m.xxx_LenField11 = 0
	}
}

func (m *NidRepNative) GetField11(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField11 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field11[index], nil
}

func (m *NidRepNative) AddField12(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field12) <= m.xxx_LenField12 {
		newCapacity := 0
		if len(m.field12) == 0 {
			newCapacity = 8
		} else if len(m.field12) < 1000000 {
			newCapacity = m.xxx_LenField12 * 2
		} else {
			newCapacity = m.xxx_LenField12 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field12)
		m.field12 = t
	}
	m.field12[m.xxx_LenField12] = value
	m.xxx_LenField12 += 1
	return nil
}

func (m *NidRepNative) SetField12(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField12 {
		return errors.New("Index is out of bounds")
	}
	m.field12[index] = value
	return nil
}

func (m *NidRepNative) Field12Size() (size int) {
	if m != nil {
		return m.xxx_LenField12
	}
	return 0
}

func (m *NidRepNative) ClearField12() {
	if m != nil {
		m.xxx_LenField12 = 0
	}
}

func (m *NidRepNative) GetField12(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField12 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field12[index], nil
}

func (m *NidRepNative) AddField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field13) <= m.xxx_LenField13 {
		newCapacity := 0
		if len(m.field13) == 0 {
			newCapacity = 8
		} else if len(m.field13) < 1000000 {
			newCapacity = m.xxx_LenField13 * 2
		} else {
			newCapacity = m.xxx_LenField13 + 1000000
		}
		t := make([]bool, newCapacity, newCapacity)
		copy(t, m.field13)
		m.field13 = t
	}
	m.field13[m.xxx_LenField13] = value
	m.xxx_LenField13 += 1
	return nil
}

func (m *NidRepNative) SetField13(value bool, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return errors.New("Index is out of bounds")
	}
	m.field13[index] = value
	return nil
}

func (m *NidRepNative) Field13Size() (size int) {
	if m != nil {
		return m.xxx_LenField13
	}
	return 0
}

func (m *NidRepNative) ClearField13() {
	if m != nil {
		m.xxx_LenField13 = 0
	}
}

func (m *NidRepNative) GetField13(index int) (field bool, err error) {
	if m == nil {
		return false, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return false, errors.New("Index is out of bounds")
	}
	return m.field13[index], nil
}

func (m *NidRepNative) AddField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field14) <= m.xxx_LenField14 {
		newCapacity := 0
		if len(m.field14) == 0 {
			newCapacity = 8
		} else if len(m.field14) < 1000000 {
			newCapacity = m.xxx_LenField14 * 2
		} else {
			newCapacity = m.xxx_LenField14 + 1000000
		}
		t := make([]string, newCapacity, newCapacity)
		copy(t, m.field14)
		m.field14 = t
	}
	m.field14[m.xxx_LenField14] = value
	m.xxx_LenField14 += 1
	return nil
}

func (m *NidRepNative) SetField14(value string, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField14 {
		return errors.New("Index is out of bounds")
	}
	m.field14[index] = value
	return nil
}

func (m *NidRepNative) Field14Size() (size int) {
	if m != nil {
		return m.xxx_LenField14
	}
	return 0
}

func (m *NidRepNative) ClearField14() {
	if m != nil {
		m.xxx_LenField14 = 0
	}
}

func (m *NidRepNative) GetField14(index int) (field string, err error) {
	if m == nil {
		return "", errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField14 {
		return "", errors.New("Index is out of bounds")
	}
	return m.field14[index], nil
}

func (m *NidRepNative) AddField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	if len(m.field15) <= m.xxx_LenField15 {
		newCapacity := 0
		if len(m.field15) == 0 {
			newCapacity = 8
		} else if len(m.field15) < 1000000 {
			newCapacity = m.xxx_LenField15 * 2
		} else {
			newCapacity = m.xxx_LenField15 + 1000000
		}
		t := make([][]byte, newCapacity, newCapacity)
		copy(t, m.field15)
		m.field15 = t
	}
	m.field15[m.xxx_LenField15] = value
	m.xxx_LenField15 += 1
	return nil
}

func (m *NidRepNative) SetField15(value []byte, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField15 {
		return errors.New("Index is out of bounds")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.field15[index] = value
	return nil
}

func (m *NidRepNative) Field15Size() (size int) {
	if m != nil {
		return m.xxx_LenField15
	}
	return 0
}

func (m *NidRepNative) ClearField15() {
	if m != nil {
		m.xxx_LenField15 = 0
	}
}

func (m *NidRepNative) GetField15(index int) (field []byte, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField15 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field15[index], nil
}

func (m *NidRepNative) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.ClearField3()
		m.ClearField4()
		m.ClearField5()
		m.ClearField6()
		m.ClearField7()
		m.ClearField8()
		m.ClearField9()
		m.ClearField10()
		m.ClearField11()
		m.ClearField12()
		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type NinRepNative struct {
	xxx_sizeCached   int
	field1           []float64
	field2           []float32
	field3           []int32
	field4           []int64
	field5           []uint32
	field6           []uint64
	field7           []int32
	field8           []int64
	field9           []uint32
	field10          []int32
	field11          []uint64
	field12          []int64
	field13          []bool
	field14          []string
	field15          [][]byte
	XXX_unrecognized []byte
	xxx_LenField1    int
	xxx_LenField2    int
	xxx_LenField3    int
	xxx_LenField4    int
	xxx_LenField5    int
	xxx_LenField6    int
	xxx_LenField7    int
	xxx_LenField8    int
	xxx_LenField9    int
	xxx_LenField10   int
	xxx_LenField11   int
	xxx_LenField12   int
	xxx_LenField13   int
	xxx_LenField14   int
	xxx_LenField15   int
}

func (m *NinRepNative) Reset()      { *m = NinRepNative{} }
func (*NinRepNative) ProtoMessage() {}

func (m *NinRepNative) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinRepNative) AddField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field1) <= m.xxx_LenField1 {
		newCapacity := 0
		if len(m.field1) == 0 {
			newCapacity = 8
		} else if len(m.field1) < 1000000 {
			newCapacity = m.xxx_LenField1 * 2
		} else {
			newCapacity = m.xxx_LenField1 + 1000000
		}
		t := make([]float64, newCapacity, newCapacity)
		copy(t, m.field1)
		m.field1 = t
	}
	m.field1[m.xxx_LenField1] = value
	m.xxx_LenField1 += 1
	return nil
}

func (m *NinRepNative) SetField1(value float64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return errors.New("Index is out of bounds")
	}
	m.field1[index] = value
	return nil
}

func (m *NinRepNative) Field1Size() (size int) {
	if m != nil {
		return m.xxx_LenField1
	}
	return 0
}

func (m *NinRepNative) ClearField1() {
	if m != nil {
		m.xxx_LenField1 = 0
	}
}

func (m *NinRepNative) GetField1(index int) (field float64, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field1[index], nil
}

func (m *NinRepNative) AddField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field2) <= m.xxx_LenField2 {
		newCapacity := 0
		if len(m.field2) == 0 {
			newCapacity = 8
		} else if len(m.field2) < 1000000 {
			newCapacity = m.xxx_LenField2 * 2
		} else {
			newCapacity = m.xxx_LenField2 + 1000000
		}
		t := make([]float32, newCapacity, newCapacity)
		copy(t, m.field2)
		m.field2 = t
	}
	m.field2[m.xxx_LenField2] = value
	m.xxx_LenField2 += 1
	return nil
}

func (m *NinRepNative) SetField2(value float32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return errors.New("Index is out of bounds")
	}
	m.field2[index] = value
	return nil
}

func (m *NinRepNative) Field2Size() (size int) {
	if m != nil {
		return m.xxx_LenField2
	}
	return 0
}

func (m *NinRepNative) ClearField2() {
	if m != nil {
		m.xxx_LenField2 = 0
	}
}

func (m *NinRepNative) GetField2(index int) (field float32, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field2[index], nil
}

func (m *NinRepNative) AddField3(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field3) <= m.xxx_LenField3 {
		newCapacity := 0
		if len(m.field3) == 0 {
			newCapacity = 8
		} else if len(m.field3) < 1000000 {
			newCapacity = m.xxx_LenField3 * 2
		} else {
			newCapacity = m.xxx_LenField3 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field3)
		m.field3 = t
	}
	m.field3[m.xxx_LenField3] = value
	m.xxx_LenField3 += 1
	return nil
}

func (m *NinRepNative) SetField3(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return errors.New("Index is out of bounds")
	}
	m.field3[index] = value
	return nil
}

func (m *NinRepNative) Field3Size() (size int) {
	if m != nil {
		return m.xxx_LenField3
	}
	return 0
}

func (m *NinRepNative) ClearField3() {
	if m != nil {
		m.xxx_LenField3 = 0
	}
}

func (m *NinRepNative) GetField3(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field3[index], nil
}

func (m *NinRepNative) AddField4(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field4) <= m.xxx_LenField4 {
		newCapacity := 0
		if len(m.field4) == 0 {
			newCapacity = 8
		} else if len(m.field4) < 1000000 {
			newCapacity = m.xxx_LenField4 * 2
		} else {
			newCapacity = m.xxx_LenField4 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field4)
		m.field4 = t
	}
	m.field4[m.xxx_LenField4] = value
	m.xxx_LenField4 += 1
	return nil
}

func (m *NinRepNative) SetField4(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return errors.New("Index is out of bounds")
	}
	m.field4[index] = value
	return nil
}

func (m *NinRepNative) Field4Size() (size int) {
	if m != nil {
		return m.xxx_LenField4
	}
	return 0
}

func (m *NinRepNative) ClearField4() {
	if m != nil {
		m.xxx_LenField4 = 0
	}
}

func (m *NinRepNative) GetField4(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field4[index], nil
}

func (m *NinRepNative) AddField5(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field5) <= m.xxx_LenField5 {
		newCapacity := 0
		if len(m.field5) == 0 {
			newCapacity = 8
		} else if len(m.field5) < 1000000 {
			newCapacity = m.xxx_LenField5 * 2
		} else {
			newCapacity = m.xxx_LenField5 + 1000000
		}
		t := make([]uint32, newCapacity, newCapacity)
		copy(t, m.field5)
		m.field5 = t
	}
	m.field5[m.xxx_LenField5] = value
	m.xxx_LenField5 += 1
	return nil
}

func (m *NinRepNative) SetField5(value uint32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField5 {
		return errors.New("Index is out of bounds")
	}
	m.field5[index] = value
	return nil
}

func (m *NinRepNative) Field5Size() (size int) {
	if m != nil {
		return m.xxx_LenField5
	}
	return 0
}

func (m *NinRepNative) ClearField5() {
	if m != nil {
		m.xxx_LenField5 = 0
	}
}

func (m *NinRepNative) GetField5(index int) (field uint32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField5 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field5[index], nil
}

func (m *NinRepNative) AddField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field6) <= m.xxx_LenField6 {
		newCapacity := 0
		if len(m.field6) == 0 {
			newCapacity = 8
		} else if len(m.field6) < 1000000 {
			newCapacity = m.xxx_LenField6 * 2
		} else {
			newCapacity = m.xxx_LenField6 + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.field6)
		m.field6 = t
	}
	m.field6[m.xxx_LenField6] = value
	m.xxx_LenField6 += 1
	return nil
}

func (m *NinRepNative) SetField6(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return errors.New("Index is out of bounds")
	}
	m.field6[index] = value
	return nil
}

func (m *NinRepNative) Field6Size() (size int) {
	if m != nil {
		return m.xxx_LenField6
	}
	return 0
}

func (m *NinRepNative) ClearField6() {
	if m != nil {
		m.xxx_LenField6 = 0
	}
}

func (m *NinRepNative) GetField6(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field6[index], nil
}

func (m *NinRepNative) AddField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field7) <= m.xxx_LenField7 {
		newCapacity := 0
		if len(m.field7) == 0 {
			newCapacity = 8
		} else if len(m.field7) < 1000000 {
			newCapacity = m.xxx_LenField7 * 2
		} else {
			newCapacity = m.xxx_LenField7 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field7)
		m.field7 = t
	}
	m.field7[m.xxx_LenField7] = value
	m.xxx_LenField7 += 1
	return nil
}

func (m *NinRepNative) SetField7(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return errors.New("Index is out of bounds")
	}
	m.field7[index] = value
	return nil
}

func (m *NinRepNative) Field7Size() (size int) {
	if m != nil {
		return m.xxx_LenField7
	}
	return 0
}

func (m *NinRepNative) ClearField7() {
	if m != nil {
		m.xxx_LenField7 = 0
	}
}

func (m *NinRepNative) GetField7(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field7[index], nil
}

func (m *NinRepNative) AddField8(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field8) <= m.xxx_LenField8 {
		newCapacity := 0
		if len(m.field8) == 0 {
			newCapacity = 8
		} else if len(m.field8) < 1000000 {
			newCapacity = m.xxx_LenField8 * 2
		} else {
			newCapacity = m.xxx_LenField8 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field8)
		m.field8 = t
	}
	m.field8[m.xxx_LenField8] = value
	m.xxx_LenField8 += 1
	return nil
}

func (m *NinRepNative) SetField8(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return errors.New("Index is out of bounds")
	}
	m.field8[index] = value
	return nil
}

func (m *NinRepNative) Field8Size() (size int) {
	if m != nil {
		return m.xxx_LenField8
	}
	return 0
}

func (m *NinRepNative) ClearField8() {
	if m != nil {
		m.xxx_LenField8 = 0
	}
}

func (m *NinRepNative) GetField8(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field8[index], nil
}

func (m *NinRepNative) AddField9(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field9) <= m.xxx_LenField9 {
		newCapacity := 0
		if len(m.field9) == 0 {
			newCapacity = 8
		} else if len(m.field9) < 1000000 {
			newCapacity = m.xxx_LenField9 * 2
		} else {
			newCapacity = m.xxx_LenField9 + 1000000
		}
		t := make([]uint32, newCapacity, newCapacity)
		copy(t, m.field9)
		m.field9 = t
	}
	m.field9[m.xxx_LenField9] = value
	m.xxx_LenField9 += 1
	return nil
}

func (m *NinRepNative) SetField9(value uint32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField9 {
		return errors.New("Index is out of bounds")
	}
	m.field9[index] = value
	return nil
}

func (m *NinRepNative) Field9Size() (size int) {
	if m != nil {
		return m.xxx_LenField9
	}
	return 0
}

func (m *NinRepNative) ClearField9() {
	if m != nil {
		m.xxx_LenField9 = 0
	}
}

func (m *NinRepNative) GetField9(index int) (field uint32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField9 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field9[index], nil
}

func (m *NinRepNative) AddField10(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field10) <= m.xxx_LenField10 {
		newCapacity := 0
		if len(m.field10) == 0 {
			newCapacity = 8
		} else if len(m.field10) < 1000000 {
			newCapacity = m.xxx_LenField10 * 2
		} else {
			newCapacity = m.xxx_LenField10 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field10)
		m.field10 = t
	}
	m.field10[m.xxx_LenField10] = value
	m.xxx_LenField10 += 1
	return nil
}

func (m *NinRepNative) SetField10(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField10 {
		return errors.New("Index is out of bounds")
	}
	m.field10[index] = value
	return nil
}

func (m *NinRepNative) Field10Size() (size int) {
	if m != nil {
		return m.xxx_LenField10
	}
	return 0
}

func (m *NinRepNative) ClearField10() {
	if m != nil {
		m.xxx_LenField10 = 0
	}
}

func (m *NinRepNative) GetField10(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField10 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field10[index], nil
}

func (m *NinRepNative) AddField11(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field11) <= m.xxx_LenField11 {
		newCapacity := 0
		if len(m.field11) == 0 {
			newCapacity = 8
		} else if len(m.field11) < 1000000 {
			newCapacity = m.xxx_LenField11 * 2
		} else {
			newCapacity = m.xxx_LenField11 + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.field11)
		m.field11 = t
	}
	m.field11[m.xxx_LenField11] = value
	m.xxx_LenField11 += 1
	return nil
}

func (m *NinRepNative) SetField11(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField11 {
		return errors.New("Index is out of bounds")
	}
	m.field11[index] = value
	return nil
}

func (m *NinRepNative) Field11Size() (size int) {
	if m != nil {
		return m.xxx_LenField11
	}
	return 0
}

func (m *NinRepNative) ClearField11() {
	if m != nil {
		m.xxx_LenField11 = 0
	}
}

func (m *NinRepNative) GetField11(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField11 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field11[index], nil
}

func (m *NinRepNative) AddField12(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field12) <= m.xxx_LenField12 {
		newCapacity := 0
		if len(m.field12) == 0 {
			newCapacity = 8
		} else if len(m.field12) < 1000000 {
			newCapacity = m.xxx_LenField12 * 2
		} else {
			newCapacity = m.xxx_LenField12 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field12)
		m.field12 = t
	}
	m.field12[m.xxx_LenField12] = value
	m.xxx_LenField12 += 1
	return nil
}

func (m *NinRepNative) SetField12(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField12 {
		return errors.New("Index is out of bounds")
	}
	m.field12[index] = value
	return nil
}

func (m *NinRepNative) Field12Size() (size int) {
	if m != nil {
		return m.xxx_LenField12
	}
	return 0
}

func (m *NinRepNative) ClearField12() {
	if m != nil {
		m.xxx_LenField12 = 0
	}
}

func (m *NinRepNative) GetField12(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField12 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field12[index], nil
}

func (m *NinRepNative) AddField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field13) <= m.xxx_LenField13 {
		newCapacity := 0
		if len(m.field13) == 0 {
			newCapacity = 8
		} else if len(m.field13) < 1000000 {
			newCapacity = m.xxx_LenField13 * 2
		} else {
			newCapacity = m.xxx_LenField13 + 1000000
		}
		t := make([]bool, newCapacity, newCapacity)
		copy(t, m.field13)
		m.field13 = t
	}
	m.field13[m.xxx_LenField13] = value
	m.xxx_LenField13 += 1
	return nil
}

func (m *NinRepNative) SetField13(value bool, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return errors.New("Index is out of bounds")
	}
	m.field13[index] = value
	return nil
}

func (m *NinRepNative) Field13Size() (size int) {
	if m != nil {
		return m.xxx_LenField13
	}
	return 0
}

func (m *NinRepNative) ClearField13() {
	if m != nil {
		m.xxx_LenField13 = 0
	}
}

func (m *NinRepNative) GetField13(index int) (field bool, err error) {
	if m == nil {
		return false, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return false, errors.New("Index is out of bounds")
	}
	return m.field13[index], nil
}

func (m *NinRepNative) AddField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field14) <= m.xxx_LenField14 {
		newCapacity := 0
		if len(m.field14) == 0 {
			newCapacity = 8
		} else if len(m.field14) < 1000000 {
			newCapacity = m.xxx_LenField14 * 2
		} else {
			newCapacity = m.xxx_LenField14 + 1000000
		}
		t := make([]string, newCapacity, newCapacity)
		copy(t, m.field14)
		m.field14 = t
	}
	m.field14[m.xxx_LenField14] = value
	m.xxx_LenField14 += 1
	return nil
}

func (m *NinRepNative) SetField14(value string, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField14 {
		return errors.New("Index is out of bounds")
	}
	m.field14[index] = value
	return nil
}

func (m *NinRepNative) Field14Size() (size int) {
	if m != nil {
		return m.xxx_LenField14
	}
	return 0
}

func (m *NinRepNative) ClearField14() {
	if m != nil {
		m.xxx_LenField14 = 0
	}
}

func (m *NinRepNative) GetField14(index int) (field string, err error) {
	if m == nil {
		return "", errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField14 {
		return "", errors.New("Index is out of bounds")
	}
	return m.field14[index], nil
}

func (m *NinRepNative) AddField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	if len(m.field15) <= m.xxx_LenField15 {
		newCapacity := 0
		if len(m.field15) == 0 {
			newCapacity = 8
		} else if len(m.field15) < 1000000 {
			newCapacity = m.xxx_LenField15 * 2
		} else {
			newCapacity = m.xxx_LenField15 + 1000000
		}
		t := make([][]byte, newCapacity, newCapacity)
		copy(t, m.field15)
		m.field15 = t
	}
	m.field15[m.xxx_LenField15] = value
	m.xxx_LenField15 += 1
	return nil
}

func (m *NinRepNative) SetField15(value []byte, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField15 {
		return errors.New("Index is out of bounds")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.field15[index] = value
	return nil
}

func (m *NinRepNative) Field15Size() (size int) {
	if m != nil {
		return m.xxx_LenField15
	}
	return 0
}

func (m *NinRepNative) ClearField15() {
	if m != nil {
		m.xxx_LenField15 = 0
	}
}

func (m *NinRepNative) GetField15(index int) (field []byte, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField15 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field15[index], nil
}

func (m *NinRepNative) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.ClearField3()
		m.ClearField4()
		m.ClearField5()
		m.ClearField6()
		m.ClearField7()
		m.ClearField8()
		m.ClearField9()
		m.ClearField10()
		m.ClearField11()
		m.ClearField12()
		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type NidRepPackedNative struct {
	xxx_sizeCached   int
	field1           []float64
	field2           []float32
	field3           []int32
	field4           []int64
	field5           []uint32
	field6           []uint64
	field7           []int32
	field8           []int64
	field9           []uint32
	field10          []int32
	field11          []uint64
	field12          []int64
	field13          []bool
	XXX_unrecognized []byte
	xxx_LenField1    int
	xxx_LenField2    int
	xxx_LenField3    int
	xxx_LenField4    int
	xxx_LenField5    int
	xxx_LenField6    int
	xxx_LenField7    int
	xxx_LenField8    int
	xxx_LenField9    int
	xxx_LenField10   int
	xxx_LenField11   int
	xxx_LenField12   int
	xxx_LenField13   int
}

func (m *NidRepPackedNative) Reset()      { *m = NidRepPackedNative{} }
func (*NidRepPackedNative) ProtoMessage() {}

func (m *NidRepPackedNative) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidRepPackedNative) AddField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field1) <= m.xxx_LenField1 {
		newCapacity := 0
		if len(m.field1) == 0 {
			newCapacity = 8
		} else if len(m.field1) < 1000000 {
			newCapacity = m.xxx_LenField1 * 2
		} else {
			newCapacity = m.xxx_LenField1 + 1000000
		}
		t := make([]float64, newCapacity, newCapacity)
		copy(t, m.field1)
		m.field1 = t
	}
	m.field1[m.xxx_LenField1] = value
	m.xxx_LenField1 += 1
	return nil
}

func (m *NidRepPackedNative) SetField1(value float64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return errors.New("Index is out of bounds")
	}
	m.field1[index] = value
	return nil
}

func (m *NidRepPackedNative) Field1Size() (size int) {
	if m != nil {
		return m.xxx_LenField1
	}
	return 0
}

func (m *NidRepPackedNative) ClearField1() {
	if m != nil {
		m.xxx_LenField1 = 0
	}
}

func (m *NidRepPackedNative) GetField1(index int) (field float64, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field1[index], nil
}

func (m *NidRepPackedNative) AddField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field2) <= m.xxx_LenField2 {
		newCapacity := 0
		if len(m.field2) == 0 {
			newCapacity = 8
		} else if len(m.field2) < 1000000 {
			newCapacity = m.xxx_LenField2 * 2
		} else {
			newCapacity = m.xxx_LenField2 + 1000000
		}
		t := make([]float32, newCapacity, newCapacity)
		copy(t, m.field2)
		m.field2 = t
	}
	m.field2[m.xxx_LenField2] = value
	m.xxx_LenField2 += 1
	return nil
}

func (m *NidRepPackedNative) SetField2(value float32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return errors.New("Index is out of bounds")
	}
	m.field2[index] = value
	return nil
}

func (m *NidRepPackedNative) Field2Size() (size int) {
	if m != nil {
		return m.xxx_LenField2
	}
	return 0
}

func (m *NidRepPackedNative) ClearField2() {
	if m != nil {
		m.xxx_LenField2 = 0
	}
}

func (m *NidRepPackedNative) GetField2(index int) (field float32, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field2[index], nil
}

func (m *NidRepPackedNative) AddField3(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field3) <= m.xxx_LenField3 {
		newCapacity := 0
		if len(m.field3) == 0 {
			newCapacity = 8
		} else if len(m.field3) < 1000000 {
			newCapacity = m.xxx_LenField3 * 2
		} else {
			newCapacity = m.xxx_LenField3 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field3)
		m.field3 = t
	}
	m.field3[m.xxx_LenField3] = value
	m.xxx_LenField3 += 1
	return nil
}

func (m *NidRepPackedNative) SetField3(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return errors.New("Index is out of bounds")
	}
	m.field3[index] = value
	return nil
}

func (m *NidRepPackedNative) Field3Size() (size int) {
	if m != nil {
		return m.xxx_LenField3
	}
	return 0
}

func (m *NidRepPackedNative) ClearField3() {
	if m != nil {
		m.xxx_LenField3 = 0
	}
}

func (m *NidRepPackedNative) GetField3(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field3[index], nil
}

func (m *NidRepPackedNative) AddField4(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field4) <= m.xxx_LenField4 {
		newCapacity := 0
		if len(m.field4) == 0 {
			newCapacity = 8
		} else if len(m.field4) < 1000000 {
			newCapacity = m.xxx_LenField4 * 2
		} else {
			newCapacity = m.xxx_LenField4 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field4)
		m.field4 = t
	}
	m.field4[m.xxx_LenField4] = value
	m.xxx_LenField4 += 1
	return nil
}

func (m *NidRepPackedNative) SetField4(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return errors.New("Index is out of bounds")
	}
	m.field4[index] = value
	return nil
}

func (m *NidRepPackedNative) Field4Size() (size int) {
	if m != nil {
		return m.xxx_LenField4
	}
	return 0
}

func (m *NidRepPackedNative) ClearField4() {
	if m != nil {
		m.xxx_LenField4 = 0
	}
}

func (m *NidRepPackedNative) GetField4(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field4[index], nil
}

func (m *NidRepPackedNative) AddField5(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field5) <= m.xxx_LenField5 {
		newCapacity := 0
		if len(m.field5) == 0 {
			newCapacity = 8
		} else if len(m.field5) < 1000000 {
			newCapacity = m.xxx_LenField5 * 2
		} else {
			newCapacity = m.xxx_LenField5 + 1000000
		}
		t := make([]uint32, newCapacity, newCapacity)
		copy(t, m.field5)
		m.field5 = t
	}
	m.field5[m.xxx_LenField5] = value
	m.xxx_LenField5 += 1
	return nil
}

func (m *NidRepPackedNative) SetField5(value uint32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField5 {
		return errors.New("Index is out of bounds")
	}
	m.field5[index] = value
	return nil
}

func (m *NidRepPackedNative) Field5Size() (size int) {
	if m != nil {
		return m.xxx_LenField5
	}
	return 0
}

func (m *NidRepPackedNative) ClearField5() {
	if m != nil {
		m.xxx_LenField5 = 0
	}
}

func (m *NidRepPackedNative) GetField5(index int) (field uint32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField5 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field5[index], nil
}

func (m *NidRepPackedNative) AddField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field6) <= m.xxx_LenField6 {
		newCapacity := 0
		if len(m.field6) == 0 {
			newCapacity = 8
		} else if len(m.field6) < 1000000 {
			newCapacity = m.xxx_LenField6 * 2
		} else {
			newCapacity = m.xxx_LenField6 + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.field6)
		m.field6 = t
	}
	m.field6[m.xxx_LenField6] = value
	m.xxx_LenField6 += 1
	return nil
}

func (m *NidRepPackedNative) SetField6(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return errors.New("Index is out of bounds")
	}
	m.field6[index] = value
	return nil
}

func (m *NidRepPackedNative) Field6Size() (size int) {
	if m != nil {
		return m.xxx_LenField6
	}
	return 0
}

func (m *NidRepPackedNative) ClearField6() {
	if m != nil {
		m.xxx_LenField6 = 0
	}
}

func (m *NidRepPackedNative) GetField6(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field6[index], nil
}

func (m *NidRepPackedNative) AddField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field7) <= m.xxx_LenField7 {
		newCapacity := 0
		if len(m.field7) == 0 {
			newCapacity = 8
		} else if len(m.field7) < 1000000 {
			newCapacity = m.xxx_LenField7 * 2
		} else {
			newCapacity = m.xxx_LenField7 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field7)
		m.field7 = t
	}
	m.field7[m.xxx_LenField7] = value
	m.xxx_LenField7 += 1
	return nil
}

func (m *NidRepPackedNative) SetField7(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return errors.New("Index is out of bounds")
	}
	m.field7[index] = value
	return nil
}

func (m *NidRepPackedNative) Field7Size() (size int) {
	if m != nil {
		return m.xxx_LenField7
	}
	return 0
}

func (m *NidRepPackedNative) ClearField7() {
	if m != nil {
		m.xxx_LenField7 = 0
	}
}

func (m *NidRepPackedNative) GetField7(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field7[index], nil
}

func (m *NidRepPackedNative) AddField8(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field8) <= m.xxx_LenField8 {
		newCapacity := 0
		if len(m.field8) == 0 {
			newCapacity = 8
		} else if len(m.field8) < 1000000 {
			newCapacity = m.xxx_LenField8 * 2
		} else {
			newCapacity = m.xxx_LenField8 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field8)
		m.field8 = t
	}
	m.field8[m.xxx_LenField8] = value
	m.xxx_LenField8 += 1
	return nil
}

func (m *NidRepPackedNative) SetField8(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return errors.New("Index is out of bounds")
	}
	m.field8[index] = value
	return nil
}

func (m *NidRepPackedNative) Field8Size() (size int) {
	if m != nil {
		return m.xxx_LenField8
	}
	return 0
}

func (m *NidRepPackedNative) ClearField8() {
	if m != nil {
		m.xxx_LenField8 = 0
	}
}

func (m *NidRepPackedNative) GetField8(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field8[index], nil
}

func (m *NidRepPackedNative) AddField9(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field9) <= m.xxx_LenField9 {
		newCapacity := 0
		if len(m.field9) == 0 {
			newCapacity = 8
		} else if len(m.field9) < 1000000 {
			newCapacity = m.xxx_LenField9 * 2
		} else {
			newCapacity = m.xxx_LenField9 + 1000000
		}
		t := make([]uint32, newCapacity, newCapacity)
		copy(t, m.field9)
		m.field9 = t
	}
	m.field9[m.xxx_LenField9] = value
	m.xxx_LenField9 += 1
	return nil
}

func (m *NidRepPackedNative) SetField9(value uint32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField9 {
		return errors.New("Index is out of bounds")
	}
	m.field9[index] = value
	return nil
}

func (m *NidRepPackedNative) Field9Size() (size int) {
	if m != nil {
		return m.xxx_LenField9
	}
	return 0
}

func (m *NidRepPackedNative) ClearField9() {
	if m != nil {
		m.xxx_LenField9 = 0
	}
}

func (m *NidRepPackedNative) GetField9(index int) (field uint32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField9 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field9[index], nil
}

func (m *NidRepPackedNative) AddField10(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field10) <= m.xxx_LenField10 {
		newCapacity := 0
		if len(m.field10) == 0 {
			newCapacity = 8
		} else if len(m.field10) < 1000000 {
			newCapacity = m.xxx_LenField10 * 2
		} else {
			newCapacity = m.xxx_LenField10 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field10)
		m.field10 = t
	}
	m.field10[m.xxx_LenField10] = value
	m.xxx_LenField10 += 1
	return nil
}

func (m *NidRepPackedNative) SetField10(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField10 {
		return errors.New("Index is out of bounds")
	}
	m.field10[index] = value
	return nil
}

func (m *NidRepPackedNative) Field10Size() (size int) {
	if m != nil {
		return m.xxx_LenField10
	}
	return 0
}

func (m *NidRepPackedNative) ClearField10() {
	if m != nil {
		m.xxx_LenField10 = 0
	}
}

func (m *NidRepPackedNative) GetField10(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField10 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field10[index], nil
}

func (m *NidRepPackedNative) AddField11(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field11) <= m.xxx_LenField11 {
		newCapacity := 0
		if len(m.field11) == 0 {
			newCapacity = 8
		} else if len(m.field11) < 1000000 {
			newCapacity = m.xxx_LenField11 * 2
		} else {
			newCapacity = m.xxx_LenField11 + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.field11)
		m.field11 = t
	}
	m.field11[m.xxx_LenField11] = value
	m.xxx_LenField11 += 1
	return nil
}

func (m *NidRepPackedNative) SetField11(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField11 {
		return errors.New("Index is out of bounds")
	}
	m.field11[index] = value
	return nil
}

func (m *NidRepPackedNative) Field11Size() (size int) {
	if m != nil {
		return m.xxx_LenField11
	}
	return 0
}

func (m *NidRepPackedNative) ClearField11() {
	if m != nil {
		m.xxx_LenField11 = 0
	}
}

func (m *NidRepPackedNative) GetField11(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField11 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field11[index], nil
}

func (m *NidRepPackedNative) AddField12(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field12) <= m.xxx_LenField12 {
		newCapacity := 0
		if len(m.field12) == 0 {
			newCapacity = 8
		} else if len(m.field12) < 1000000 {
			newCapacity = m.xxx_LenField12 * 2
		} else {
			newCapacity = m.xxx_LenField12 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field12)
		m.field12 = t
	}
	m.field12[m.xxx_LenField12] = value
	m.xxx_LenField12 += 1
	return nil
}

func (m *NidRepPackedNative) SetField12(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField12 {
		return errors.New("Index is out of bounds")
	}
	m.field12[index] = value
	return nil
}

func (m *NidRepPackedNative) Field12Size() (size int) {
	if m != nil {
		return m.xxx_LenField12
	}
	return 0
}

func (m *NidRepPackedNative) ClearField12() {
	if m != nil {
		m.xxx_LenField12 = 0
	}
}

func (m *NidRepPackedNative) GetField12(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField12 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field12[index], nil
}

func (m *NidRepPackedNative) AddField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field13) <= m.xxx_LenField13 {
		newCapacity := 0
		if len(m.field13) == 0 {
			newCapacity = 8
		} else if len(m.field13) < 1000000 {
			newCapacity = m.xxx_LenField13 * 2
		} else {
			newCapacity = m.xxx_LenField13 + 1000000
		}
		t := make([]bool, newCapacity, newCapacity)
		copy(t, m.field13)
		m.field13 = t
	}
	m.field13[m.xxx_LenField13] = value
	m.xxx_LenField13 += 1
	return nil
}

func (m *NidRepPackedNative) SetField13(value bool, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return errors.New("Index is out of bounds")
	}
	m.field13[index] = value
	return nil
}

func (m *NidRepPackedNative) Field13Size() (size int) {
	if m != nil {
		return m.xxx_LenField13
	}
	return 0
}

func (m *NidRepPackedNative) ClearField13() {
	if m != nil {
		m.xxx_LenField13 = 0
	}
}

func (m *NidRepPackedNative) GetField13(index int) (field bool, err error) {
	if m == nil {
		return false, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return false, errors.New("Index is out of bounds")
	}
	return m.field13[index], nil
}

func (m *NidRepPackedNative) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.ClearField3()
		m.ClearField4()
		m.ClearField5()
		m.ClearField6()
		m.ClearField7()
		m.ClearField8()
		m.ClearField9()
		m.ClearField10()
		m.ClearField11()
		m.ClearField12()
		m.ClearField13()
	}
}

type NinRepPackedNative struct {
	xxx_sizeCached   int
	field1           []float64
	field2           []float32
	field3           []int32
	field4           []int64
	field5           []uint32
	field6           []uint64
	field7           []int32
	field8           []int64
	field9           []uint32
	field10          []int32
	field11          []uint64
	field12          []int64
	field13          []bool
	XXX_unrecognized []byte
	xxx_LenField1    int
	xxx_LenField2    int
	xxx_LenField3    int
	xxx_LenField4    int
	xxx_LenField5    int
	xxx_LenField6    int
	xxx_LenField7    int
	xxx_LenField8    int
	xxx_LenField9    int
	xxx_LenField10   int
	xxx_LenField11   int
	xxx_LenField12   int
	xxx_LenField13   int
}

func (m *NinRepPackedNative) Reset()      { *m = NinRepPackedNative{} }
func (*NinRepPackedNative) ProtoMessage() {}

func (m *NinRepPackedNative) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinRepPackedNative) AddField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field1) <= m.xxx_LenField1 {
		newCapacity := 0
		if len(m.field1) == 0 {
			newCapacity = 8
		} else if len(m.field1) < 1000000 {
			newCapacity = m.xxx_LenField1 * 2
		} else {
			newCapacity = m.xxx_LenField1 + 1000000
		}
		t := make([]float64, newCapacity, newCapacity)
		copy(t, m.field1)
		m.field1 = t
	}
	m.field1[m.xxx_LenField1] = value
	m.xxx_LenField1 += 1
	return nil
}

func (m *NinRepPackedNative) SetField1(value float64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return errors.New("Index is out of bounds")
	}
	m.field1[index] = value
	return nil
}

func (m *NinRepPackedNative) Field1Size() (size int) {
	if m != nil {
		return m.xxx_LenField1
	}
	return 0
}

func (m *NinRepPackedNative) ClearField1() {
	if m != nil {
		m.xxx_LenField1 = 0
	}
}

func (m *NinRepPackedNative) GetField1(index int) (field float64, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field1[index], nil
}

func (m *NinRepPackedNative) AddField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field2) <= m.xxx_LenField2 {
		newCapacity := 0
		if len(m.field2) == 0 {
			newCapacity = 8
		} else if len(m.field2) < 1000000 {
			newCapacity = m.xxx_LenField2 * 2
		} else {
			newCapacity = m.xxx_LenField2 + 1000000
		}
		t := make([]float32, newCapacity, newCapacity)
		copy(t, m.field2)
		m.field2 = t
	}
	m.field2[m.xxx_LenField2] = value
	m.xxx_LenField2 += 1
	return nil
}

func (m *NinRepPackedNative) SetField2(value float32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return errors.New("Index is out of bounds")
	}
	m.field2[index] = value
	return nil
}

func (m *NinRepPackedNative) Field2Size() (size int) {
	if m != nil {
		return m.xxx_LenField2
	}
	return 0
}

func (m *NinRepPackedNative) ClearField2() {
	if m != nil {
		m.xxx_LenField2 = 0
	}
}

func (m *NinRepPackedNative) GetField2(index int) (field float32, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field2[index], nil
}

func (m *NinRepPackedNative) AddField3(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field3) <= m.xxx_LenField3 {
		newCapacity := 0
		if len(m.field3) == 0 {
			newCapacity = 8
		} else if len(m.field3) < 1000000 {
			newCapacity = m.xxx_LenField3 * 2
		} else {
			newCapacity = m.xxx_LenField3 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field3)
		m.field3 = t
	}
	m.field3[m.xxx_LenField3] = value
	m.xxx_LenField3 += 1
	return nil
}

func (m *NinRepPackedNative) SetField3(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return errors.New("Index is out of bounds")
	}
	m.field3[index] = value
	return nil
}

func (m *NinRepPackedNative) Field3Size() (size int) {
	if m != nil {
		return m.xxx_LenField3
	}
	return 0
}

func (m *NinRepPackedNative) ClearField3() {
	if m != nil {
		m.xxx_LenField3 = 0
	}
}

func (m *NinRepPackedNative) GetField3(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field3[index], nil
}

func (m *NinRepPackedNative) AddField4(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field4) <= m.xxx_LenField4 {
		newCapacity := 0
		if len(m.field4) == 0 {
			newCapacity = 8
		} else if len(m.field4) < 1000000 {
			newCapacity = m.xxx_LenField4 * 2
		} else {
			newCapacity = m.xxx_LenField4 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field4)
		m.field4 = t
	}
	m.field4[m.xxx_LenField4] = value
	m.xxx_LenField4 += 1
	return nil
}

func (m *NinRepPackedNative) SetField4(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return errors.New("Index is out of bounds")
	}
	m.field4[index] = value
	return nil
}

func (m *NinRepPackedNative) Field4Size() (size int) {
	if m != nil {
		return m.xxx_LenField4
	}
	return 0
}

func (m *NinRepPackedNative) ClearField4() {
	if m != nil {
		m.xxx_LenField4 = 0
	}
}

func (m *NinRepPackedNative) GetField4(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field4[index], nil
}

func (m *NinRepPackedNative) AddField5(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field5) <= m.xxx_LenField5 {
		newCapacity := 0
		if len(m.field5) == 0 {
			newCapacity = 8
		} else if len(m.field5) < 1000000 {
			newCapacity = m.xxx_LenField5 * 2
		} else {
			newCapacity = m.xxx_LenField5 + 1000000
		}
		t := make([]uint32, newCapacity, newCapacity)
		copy(t, m.field5)
		m.field5 = t
	}
	m.field5[m.xxx_LenField5] = value
	m.xxx_LenField5 += 1
	return nil
}

func (m *NinRepPackedNative) SetField5(value uint32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField5 {
		return errors.New("Index is out of bounds")
	}
	m.field5[index] = value
	return nil
}

func (m *NinRepPackedNative) Field5Size() (size int) {
	if m != nil {
		return m.xxx_LenField5
	}
	return 0
}

func (m *NinRepPackedNative) ClearField5() {
	if m != nil {
		m.xxx_LenField5 = 0
	}
}

func (m *NinRepPackedNative) GetField5(index int) (field uint32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField5 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field5[index], nil
}

func (m *NinRepPackedNative) AddField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field6) <= m.xxx_LenField6 {
		newCapacity := 0
		if len(m.field6) == 0 {
			newCapacity = 8
		} else if len(m.field6) < 1000000 {
			newCapacity = m.xxx_LenField6 * 2
		} else {
			newCapacity = m.xxx_LenField6 + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.field6)
		m.field6 = t
	}
	m.field6[m.xxx_LenField6] = value
	m.xxx_LenField6 += 1
	return nil
}

func (m *NinRepPackedNative) SetField6(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return errors.New("Index is out of bounds")
	}
	m.field6[index] = value
	return nil
}

func (m *NinRepPackedNative) Field6Size() (size int) {
	if m != nil {
		return m.xxx_LenField6
	}
	return 0
}

func (m *NinRepPackedNative) ClearField6() {
	if m != nil {
		m.xxx_LenField6 = 0
	}
}

func (m *NinRepPackedNative) GetField6(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field6[index], nil
}

func (m *NinRepPackedNative) AddField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field7) <= m.xxx_LenField7 {
		newCapacity := 0
		if len(m.field7) == 0 {
			newCapacity = 8
		} else if len(m.field7) < 1000000 {
			newCapacity = m.xxx_LenField7 * 2
		} else {
			newCapacity = m.xxx_LenField7 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field7)
		m.field7 = t
	}
	m.field7[m.xxx_LenField7] = value
	m.xxx_LenField7 += 1
	return nil
}

func (m *NinRepPackedNative) SetField7(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return errors.New("Index is out of bounds")
	}
	m.field7[index] = value
	return nil
}

func (m *NinRepPackedNative) Field7Size() (size int) {
	if m != nil {
		return m.xxx_LenField7
	}
	return 0
}

func (m *NinRepPackedNative) ClearField7() {
	if m != nil {
		m.xxx_LenField7 = 0
	}
}

func (m *NinRepPackedNative) GetField7(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field7[index], nil
}

func (m *NinRepPackedNative) AddField8(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field8) <= m.xxx_LenField8 {
		newCapacity := 0
		if len(m.field8) == 0 {
			newCapacity = 8
		} else if len(m.field8) < 1000000 {
			newCapacity = m.xxx_LenField8 * 2
		} else {
			newCapacity = m.xxx_LenField8 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field8)
		m.field8 = t
	}
	m.field8[m.xxx_LenField8] = value
	m.xxx_LenField8 += 1
	return nil
}

func (m *NinRepPackedNative) SetField8(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return errors.New("Index is out of bounds")
	}
	m.field8[index] = value
	return nil
}

func (m *NinRepPackedNative) Field8Size() (size int) {
	if m != nil {
		return m.xxx_LenField8
	}
	return 0
}

func (m *NinRepPackedNative) ClearField8() {
	if m != nil {
		m.xxx_LenField8 = 0
	}
}

func (m *NinRepPackedNative) GetField8(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field8[index], nil
}

func (m *NinRepPackedNative) AddField9(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field9) <= m.xxx_LenField9 {
		newCapacity := 0
		if len(m.field9) == 0 {
			newCapacity = 8
		} else if len(m.field9) < 1000000 {
			newCapacity = m.xxx_LenField9 * 2
		} else {
			newCapacity = m.xxx_LenField9 + 1000000
		}
		t := make([]uint32, newCapacity, newCapacity)
		copy(t, m.field9)
		m.field9 = t
	}
	m.field9[m.xxx_LenField9] = value
	m.xxx_LenField9 += 1
	return nil
}

func (m *NinRepPackedNative) SetField9(value uint32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField9 {
		return errors.New("Index is out of bounds")
	}
	m.field9[index] = value
	return nil
}

func (m *NinRepPackedNative) Field9Size() (size int) {
	if m != nil {
		return m.xxx_LenField9
	}
	return 0
}

func (m *NinRepPackedNative) ClearField9() {
	if m != nil {
		m.xxx_LenField9 = 0
	}
}

func (m *NinRepPackedNative) GetField9(index int) (field uint32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField9 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field9[index], nil
}

func (m *NinRepPackedNative) AddField10(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field10) <= m.xxx_LenField10 {
		newCapacity := 0
		if len(m.field10) == 0 {
			newCapacity = 8
		} else if len(m.field10) < 1000000 {
			newCapacity = m.xxx_LenField10 * 2
		} else {
			newCapacity = m.xxx_LenField10 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field10)
		m.field10 = t
	}
	m.field10[m.xxx_LenField10] = value
	m.xxx_LenField10 += 1
	return nil
}

func (m *NinRepPackedNative) SetField10(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField10 {
		return errors.New("Index is out of bounds")
	}
	m.field10[index] = value
	return nil
}

func (m *NinRepPackedNative) Field10Size() (size int) {
	if m != nil {
		return m.xxx_LenField10
	}
	return 0
}

func (m *NinRepPackedNative) ClearField10() {
	if m != nil {
		m.xxx_LenField10 = 0
	}
}

func (m *NinRepPackedNative) GetField10(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField10 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field10[index], nil
}

func (m *NinRepPackedNative) AddField11(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field11) <= m.xxx_LenField11 {
		newCapacity := 0
		if len(m.field11) == 0 {
			newCapacity = 8
		} else if len(m.field11) < 1000000 {
			newCapacity = m.xxx_LenField11 * 2
		} else {
			newCapacity = m.xxx_LenField11 + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.field11)
		m.field11 = t
	}
	m.field11[m.xxx_LenField11] = value
	m.xxx_LenField11 += 1
	return nil
}

func (m *NinRepPackedNative) SetField11(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField11 {
		return errors.New("Index is out of bounds")
	}
	m.field11[index] = value
	return nil
}

func (m *NinRepPackedNative) Field11Size() (size int) {
	if m != nil {
		return m.xxx_LenField11
	}
	return 0
}

func (m *NinRepPackedNative) ClearField11() {
	if m != nil {
		m.xxx_LenField11 = 0
	}
}

func (m *NinRepPackedNative) GetField11(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField11 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field11[index], nil
}

func (m *NinRepPackedNative) AddField12(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field12) <= m.xxx_LenField12 {
		newCapacity := 0
		if len(m.field12) == 0 {
			newCapacity = 8
		} else if len(m.field12) < 1000000 {
			newCapacity = m.xxx_LenField12 * 2
		} else {
			newCapacity = m.xxx_LenField12 + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.field12)
		m.field12 = t
	}
	m.field12[m.xxx_LenField12] = value
	m.xxx_LenField12 += 1
	return nil
}

func (m *NinRepPackedNative) SetField12(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField12 {
		return errors.New("Index is out of bounds")
	}
	m.field12[index] = value
	return nil
}

func (m *NinRepPackedNative) Field12Size() (size int) {
	if m != nil {
		return m.xxx_LenField12
	}
	return 0
}

func (m *NinRepPackedNative) ClearField12() {
	if m != nil {
		m.xxx_LenField12 = 0
	}
}

func (m *NinRepPackedNative) GetField12(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField12 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field12[index], nil
}

func (m *NinRepPackedNative) AddField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field13) <= m.xxx_LenField13 {
		newCapacity := 0
		if len(m.field13) == 0 {
			newCapacity = 8
		} else if len(m.field13) < 1000000 {
			newCapacity = m.xxx_LenField13 * 2
		} else {
			newCapacity = m.xxx_LenField13 + 1000000
		}
		t := make([]bool, newCapacity, newCapacity)
		copy(t, m.field13)
		m.field13 = t
	}
	m.field13[m.xxx_LenField13] = value
	m.xxx_LenField13 += 1
	return nil
}

func (m *NinRepPackedNative) SetField13(value bool, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return errors.New("Index is out of bounds")
	}
	m.field13[index] = value
	return nil
}

func (m *NinRepPackedNative) Field13Size() (size int) {
	if m != nil {
		return m.xxx_LenField13
	}
	return 0
}

func (m *NinRepPackedNative) ClearField13() {
	if m != nil {
		m.xxx_LenField13 = 0
	}
}

func (m *NinRepPackedNative) GetField13(index int) (field bool, err error) {
	if m == nil {
		return false, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return false, errors.New("Index is out of bounds")
	}
	return m.field13[index], nil
}

func (m *NinRepPackedNative) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.ClearField3()
		m.ClearField4()
		m.ClearField5()
		m.ClearField6()
		m.ClearField7()
		m.ClearField8()
		m.ClearField9()
		m.ClearField10()
		m.ClearField11()
		m.ClearField12()
		m.ClearField13()
	}
}

type NidOptStruct struct {
	xxx_sizeCached   int
	field1           float64
	field2           float32
	field3           *NidOptNative
	field4           *NinOptNative
	field6           uint64
	field7           int32
	field8           *NidOptNative
	field13          bool
	field14          string
	field15          []byte
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
	xxx_IsField2Set  bool
	xxx_IsField3Set  bool
	xxx_IsField4Set  bool
	xxx_IsField6Set  bool
	xxx_IsField7Set  bool
	xxx_IsField8Set  bool
	xxx_IsField13Set bool
	xxx_IsField14Set bool
	xxx_IsField15Set bool
}

func (m *NidOptStruct) Reset()      { *m = NidOptStruct{} }
func (*NidOptStruct) ProtoMessage() {}

func (m *NidOptStruct) GetField1() float64 {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return 0
}

func (m *NidOptStruct) GetField2() float32 {
	if m != nil && m.xxx_IsField2Set {
		return m.field2
	}
	return 0
}

func (m *NidOptStruct) GetField3() *NidOptNative {
	if m != nil && m.xxx_IsField3Set {
		return m.field3
	}
	return nil
}
func (m *NidOptStruct) GetField4() *NinOptNative {
	if m != nil && m.xxx_IsField4Set {
		return m.field4
	}
	return nil
}
func (m *NidOptStruct) GetField6() uint64 {
	if m != nil && m.xxx_IsField6Set {
		return m.field6
	}
	return 0
}

func (m *NidOptStruct) GetField7() int32 {
	if m != nil && m.xxx_IsField7Set {
		return m.field7
	}
	return 0
}

func (m *NidOptStruct) GetField8() *NidOptNative {
	if m != nil && m.xxx_IsField8Set {
		return m.field8
	}
	return nil
}
func (m *NidOptStruct) GetField13() bool {
	if m != nil && m.xxx_IsField13Set {
		return m.field13
	}
	return false
}

func (m *NidOptStruct) GetField14() string {
	if m != nil && m.xxx_IsField14Set {
		return m.field14
	}
	return ""
}

func (m *NidOptStruct) GetField15() []byte {
	if m != nil && m.xxx_IsField15Set {
		return m.field15
	}
	return nil
}
func (m *NidOptStruct) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidOptStruct) SetField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NidOptStruct) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NidOptStruct) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NidOptStruct) SetField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField2Set = true
	m.field2 = value
	return nil
}

func (m *NidOptStruct) HasField2() (isSet bool) {
	if m != nil && m.xxx_IsField2Set {
		return true
	}
	return false
}

func (m *NidOptStruct) ClearField2() {
	if m != nil {
		m.xxx_IsField2Set = false
	}
}

func (m *NidOptStruct) MutateField3() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField3Set {
		m.xxx_IsField3Set = true
		m.field3 = new(NidOptNative)
	}
	return m.field3, nil
}

func (m *NidOptStruct) HasField3() (isSet bool) {
	if m != nil && m.xxx_IsField3Set {
		return true
	}
	return false
}

func (m *NidOptStruct) ClearField3() {
	if m != nil {
		m.field3.Clear()
		m.xxx_IsField3Set = false

	}
}

func (m *NidOptStruct) MutateField4() (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField4Set {
		m.xxx_IsField4Set = true
		m.field4 = new(NinOptNative)
	}
	return m.field4, nil
}

func (m *NidOptStruct) HasField4() (isSet bool) {
	if m != nil && m.xxx_IsField4Set {
		return true
	}
	return false
}

func (m *NidOptStruct) ClearField4() {
	if m != nil {
		m.field4.Clear()
		m.xxx_IsField4Set = false

	}
}

func (m *NidOptStruct) SetField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField6Set = true
	m.field6 = value
	return nil
}

func (m *NidOptStruct) HasField6() (isSet bool) {
	if m != nil && m.xxx_IsField6Set {
		return true
	}
	return false
}

func (m *NidOptStruct) ClearField6() {
	if m != nil {
		m.xxx_IsField6Set = false
	}
}

func (m *NidOptStruct) SetField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField7Set = true
	m.field7 = value
	return nil
}

func (m *NidOptStruct) HasField7() (isSet bool) {
	if m != nil && m.xxx_IsField7Set {
		return true
	}
	return false
}

func (m *NidOptStruct) ClearField7() {
	if m != nil {
		m.xxx_IsField7Set = false
	}
}

func (m *NidOptStruct) MutateField8() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField8Set {
		m.xxx_IsField8Set = true
		m.field8 = new(NidOptNative)
	}
	return m.field8, nil
}

func (m *NidOptStruct) HasField8() (isSet bool) {
	if m != nil && m.xxx_IsField8Set {
		return true
	}
	return false
}

func (m *NidOptStruct) ClearField8() {
	if m != nil {
		m.field8.Clear()
		m.xxx_IsField8Set = false

	}
}

func (m *NidOptStruct) SetField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField13Set = true
	m.field13 = value
	return nil
}

func (m *NidOptStruct) HasField13() (isSet bool) {
	if m != nil && m.xxx_IsField13Set {
		return true
	}
	return false
}

func (m *NidOptStruct) ClearField13() {
	if m != nil {
		m.xxx_IsField13Set = false
	}
}

func (m *NidOptStruct) SetField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField14Set = true
	m.field14 = value
	return nil
}

func (m *NidOptStruct) HasField14() (isSet bool) {
	if m != nil && m.xxx_IsField14Set {
		return true
	}
	return false
}

func (m *NidOptStruct) ClearField14() {
	if m != nil {
		m.xxx_IsField14Set = false
		m.field14 = ""
	}
}

func (m *NidOptStruct) SetField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsField15Set = true
	m.field15 = value
	return nil
}

func (m *NidOptStruct) HasField15() (isSet bool) {
	if m != nil && m.xxx_IsField15Set {
		return true
	}
	return false
}

func (m *NidOptStruct) ClearField15() {
	if m != nil {
		m.xxx_IsField15Set = false
		m.field15 = nil
	}
}

func (m *NidOptStruct) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.field3.Clear()
		m.xxx_IsField3Set = false

		m.field4.Clear()
		m.xxx_IsField4Set = false

		m.ClearField6()
		m.ClearField7()
		m.field8.Clear()
		m.xxx_IsField8Set = false

		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type NinOptStruct struct {
	xxx_sizeCached   int
	field1           float64
	field2           float32
	field3           *NidOptNative
	field4           *NinOptNative
	field6           uint64
	field7           int32
	field8           *NidOptNative
	field13          bool
	field14          string
	field15          []byte
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
	xxx_IsField2Set  bool
	xxx_IsField3Set  bool
	xxx_IsField4Set  bool
	xxx_IsField6Set  bool
	xxx_IsField7Set  bool
	xxx_IsField8Set  bool
	xxx_IsField13Set bool
	xxx_IsField14Set bool
	xxx_IsField15Set bool
}

func (m *NinOptStruct) Reset()      { *m = NinOptStruct{} }
func (*NinOptStruct) ProtoMessage() {}

func (m *NinOptStruct) GetField1() float64 {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return 0
}

func (m *NinOptStruct) GetField2() float32 {
	if m != nil && m.xxx_IsField2Set {
		return m.field2
	}
	return 0
}

func (m *NinOptStruct) GetField3() *NidOptNative {
	if m != nil && m.xxx_IsField3Set {
		return m.field3
	}
	return nil
}
func (m *NinOptStruct) GetField4() *NinOptNative {
	if m != nil && m.xxx_IsField4Set {
		return m.field4
	}
	return nil
}
func (m *NinOptStruct) GetField6() uint64 {
	if m != nil && m.xxx_IsField6Set {
		return m.field6
	}
	return 0
}

func (m *NinOptStruct) GetField7() int32 {
	if m != nil && m.xxx_IsField7Set {
		return m.field7
	}
	return 0
}

func (m *NinOptStruct) GetField8() *NidOptNative {
	if m != nil && m.xxx_IsField8Set {
		return m.field8
	}
	return nil
}
func (m *NinOptStruct) GetField13() bool {
	if m != nil && m.xxx_IsField13Set {
		return m.field13
	}
	return false
}

func (m *NinOptStruct) GetField14() string {
	if m != nil && m.xxx_IsField14Set {
		return m.field14
	}
	return ""
}

func (m *NinOptStruct) GetField15() []byte {
	if m != nil && m.xxx_IsField15Set {
		return m.field15
	}
	return nil
}
func (m *NinOptStruct) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinOptStruct) SetField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NinOptStruct) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NinOptStruct) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NinOptStruct) SetField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField2Set = true
	m.field2 = value
	return nil
}

func (m *NinOptStruct) HasField2() (isSet bool) {
	if m != nil && m.xxx_IsField2Set {
		return true
	}
	return false
}

func (m *NinOptStruct) ClearField2() {
	if m != nil {
		m.xxx_IsField2Set = false
	}
}

func (m *NinOptStruct) MutateField3() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField3Set {
		m.xxx_IsField3Set = true
		m.field3 = new(NidOptNative)
	}
	return m.field3, nil
}

func (m *NinOptStruct) HasField3() (isSet bool) {
	if m != nil && m.xxx_IsField3Set {
		return true
	}
	return false
}

func (m *NinOptStruct) ClearField3() {
	if m != nil {
		m.field3.Clear()
		m.xxx_IsField3Set = false

	}
}

func (m *NinOptStruct) MutateField4() (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField4Set {
		m.xxx_IsField4Set = true
		m.field4 = new(NinOptNative)
	}
	return m.field4, nil
}

func (m *NinOptStruct) HasField4() (isSet bool) {
	if m != nil && m.xxx_IsField4Set {
		return true
	}
	return false
}

func (m *NinOptStruct) ClearField4() {
	if m != nil {
		m.field4.Clear()
		m.xxx_IsField4Set = false

	}
}

func (m *NinOptStruct) SetField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField6Set = true
	m.field6 = value
	return nil
}

func (m *NinOptStruct) HasField6() (isSet bool) {
	if m != nil && m.xxx_IsField6Set {
		return true
	}
	return false
}

func (m *NinOptStruct) ClearField6() {
	if m != nil {
		m.xxx_IsField6Set = false
	}
}

func (m *NinOptStruct) SetField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField7Set = true
	m.field7 = value
	return nil
}

func (m *NinOptStruct) HasField7() (isSet bool) {
	if m != nil && m.xxx_IsField7Set {
		return true
	}
	return false
}

func (m *NinOptStruct) ClearField7() {
	if m != nil {
		m.xxx_IsField7Set = false
	}
}

func (m *NinOptStruct) MutateField8() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField8Set {
		m.xxx_IsField8Set = true
		m.field8 = new(NidOptNative)
	}
	return m.field8, nil
}

func (m *NinOptStruct) HasField8() (isSet bool) {
	if m != nil && m.xxx_IsField8Set {
		return true
	}
	return false
}

func (m *NinOptStruct) ClearField8() {
	if m != nil {
		m.field8.Clear()
		m.xxx_IsField8Set = false

	}
}

func (m *NinOptStruct) SetField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField13Set = true
	m.field13 = value
	return nil
}

func (m *NinOptStruct) HasField13() (isSet bool) {
	if m != nil && m.xxx_IsField13Set {
		return true
	}
	return false
}

func (m *NinOptStruct) ClearField13() {
	if m != nil {
		m.xxx_IsField13Set = false
	}
}

func (m *NinOptStruct) SetField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField14Set = true
	m.field14 = value
	return nil
}

func (m *NinOptStruct) HasField14() (isSet bool) {
	if m != nil && m.xxx_IsField14Set {
		return true
	}
	return false
}

func (m *NinOptStruct) ClearField14() {
	if m != nil {
		m.xxx_IsField14Set = false
		m.field14 = ""
	}
}

func (m *NinOptStruct) SetField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsField15Set = true
	m.field15 = value
	return nil
}

func (m *NinOptStruct) HasField15() (isSet bool) {
	if m != nil && m.xxx_IsField15Set {
		return true
	}
	return false
}

func (m *NinOptStruct) ClearField15() {
	if m != nil {
		m.xxx_IsField15Set = false
		m.field15 = nil
	}
}

func (m *NinOptStruct) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.field3.Clear()
		m.xxx_IsField3Set = false

		m.field4.Clear()
		m.xxx_IsField4Set = false

		m.ClearField6()
		m.ClearField7()
		m.field8.Clear()
		m.xxx_IsField8Set = false

		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type NidRepStruct struct {
	xxx_sizeCached   int
	field1           []float64
	field2           []float32
	field3           []*NidOptNative
	field4           []*NinOptNative
	field6           []uint64
	field7           []int32
	field8           []*NidOptNative
	field13          []bool
	field14          []string
	field15          [][]byte
	XXX_unrecognized []byte
	xxx_LenField1    int
	xxx_LenField2    int
	xxx_LenField3    int
	xxx_LenField4    int
	xxx_LenField6    int
	xxx_LenField7    int
	xxx_LenField8    int
	xxx_LenField13   int
	xxx_LenField14   int
	xxx_LenField15   int
}

func (m *NidRepStruct) Reset()      { *m = NidRepStruct{} }
func (*NidRepStruct) ProtoMessage() {}

func (m *NidRepStruct) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidRepStruct) AddField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field1) <= m.xxx_LenField1 {
		newCapacity := 0
		if len(m.field1) == 0 {
			newCapacity = 8
		} else if len(m.field1) < 1000000 {
			newCapacity = m.xxx_LenField1 * 2
		} else {
			newCapacity = m.xxx_LenField1 + 1000000
		}
		t := make([]float64, newCapacity, newCapacity)
		copy(t, m.field1)
		m.field1 = t
	}
	m.field1[m.xxx_LenField1] = value
	m.xxx_LenField1 += 1
	return nil
}

func (m *NidRepStruct) SetField1(value float64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return errors.New("Index is out of bounds")
	}
	m.field1[index] = value
	return nil
}

func (m *NidRepStruct) Field1Size() (size int) {
	if m != nil {
		return m.xxx_LenField1
	}
	return 0
}

func (m *NidRepStruct) ClearField1() {
	if m != nil {
		m.xxx_LenField1 = 0
	}
}

func (m *NidRepStruct) GetField1(index int) (field float64, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field1[index], nil
}

func (m *NidRepStruct) AddField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field2) <= m.xxx_LenField2 {
		newCapacity := 0
		if len(m.field2) == 0 {
			newCapacity = 8
		} else if len(m.field2) < 1000000 {
			newCapacity = m.xxx_LenField2 * 2
		} else {
			newCapacity = m.xxx_LenField2 + 1000000
		}
		t := make([]float32, newCapacity, newCapacity)
		copy(t, m.field2)
		m.field2 = t
	}
	m.field2[m.xxx_LenField2] = value
	m.xxx_LenField2 += 1
	return nil
}

func (m *NidRepStruct) SetField2(value float32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return errors.New("Index is out of bounds")
	}
	m.field2[index] = value
	return nil
}

func (m *NidRepStruct) Field2Size() (size int) {
	if m != nil {
		return m.xxx_LenField2
	}
	return 0
}

func (m *NidRepStruct) ClearField2() {
	if m != nil {
		m.xxx_LenField2 = 0
	}
}

func (m *NidRepStruct) GetField2(index int) (field float32, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field2[index], nil
}

func (m *NidRepStruct) AddField3() (field *NidOptNative, err error) {
	if m != nil {
		field = new(NidOptNative)
		if len(m.field3) <= m.xxx_LenField3 {
			newCapacity := 0
			if len(m.field3) == 0 {
				newCapacity = 8
			} else if len(m.field3) < 1000000 {
				newCapacity = m.xxx_LenField3 * 2
			} else {
				newCapacity = m.xxx_LenField3 + 1000000
			}
			t := make([]*NidOptNative, newCapacity, newCapacity)
			copy(t, m.field3)
			m.field3 = t
		}
		m.field3[m.xxx_LenField3] = field
		m.xxx_LenField3 += 1
		return field, nil
	}
	return nil, errors.New("Cannot append to nil message")
}

func (m *NidRepStruct) MutateField3(index int) (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return nil, errors.New("Index is out of bounds")
	}
	if m.field3[index] == nil {
		m.field3[index] = new(NidOptNative)
	}
	return m.field3[index], nil
}

func (m *NidRepStruct) Field3Size() (size int) {
	if m != nil {
		return m.xxx_LenField3
	}
	return 0
}

func (m *NidRepStruct) ClearField3() {
	if m != nil {
		for i := 0; i < m.Field3Size(); i++ {
			m.field3[i].Clear()
		}
		m.xxx_LenField3 = 0

	}
}

func (m *NidRepStruct) GetField3(index int) (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field3[index], nil
}

func (m *NidRepStruct) AddField4() (field *NinOptNative, err error) {
	if m != nil {
		field = new(NinOptNative)
		if len(m.field4) <= m.xxx_LenField4 {
			newCapacity := 0
			if len(m.field4) == 0 {
				newCapacity = 8
			} else if len(m.field4) < 1000000 {
				newCapacity = m.xxx_LenField4 * 2
			} else {
				newCapacity = m.xxx_LenField4 + 1000000
			}
			t := make([]*NinOptNative, newCapacity, newCapacity)
			copy(t, m.field4)
			m.field4 = t
		}
		m.field4[m.xxx_LenField4] = field
		m.xxx_LenField4 += 1
		return field, nil
	}
	return nil, errors.New("Cannot append to nil message")
}

func (m *NidRepStruct) MutateField4(index int) (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return nil, errors.New("Index is out of bounds")
	}
	if m.field4[index] == nil {
		m.field4[index] = new(NinOptNative)
	}
	return m.field4[index], nil
}

func (m *NidRepStruct) Field4Size() (size int) {
	if m != nil {
		return m.xxx_LenField4
	}
	return 0
}

func (m *NidRepStruct) ClearField4() {
	if m != nil {
		for i := 0; i < m.Field4Size(); i++ {
			m.field4[i].Clear()
		}
		m.xxx_LenField4 = 0

	}
}

func (m *NidRepStruct) GetField4(index int) (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field4[index], nil
}

func (m *NidRepStruct) AddField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field6) <= m.xxx_LenField6 {
		newCapacity := 0
		if len(m.field6) == 0 {
			newCapacity = 8
		} else if len(m.field6) < 1000000 {
			newCapacity = m.xxx_LenField6 * 2
		} else {
			newCapacity = m.xxx_LenField6 + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.field6)
		m.field6 = t
	}
	m.field6[m.xxx_LenField6] = value
	m.xxx_LenField6 += 1
	return nil
}

func (m *NidRepStruct) SetField6(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return errors.New("Index is out of bounds")
	}
	m.field6[index] = value
	return nil
}

func (m *NidRepStruct) Field6Size() (size int) {
	if m != nil {
		return m.xxx_LenField6
	}
	return 0
}

func (m *NidRepStruct) ClearField6() {
	if m != nil {
		m.xxx_LenField6 = 0
	}
}

func (m *NidRepStruct) GetField6(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field6[index], nil
}

func (m *NidRepStruct) AddField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field7) <= m.xxx_LenField7 {
		newCapacity := 0
		if len(m.field7) == 0 {
			newCapacity = 8
		} else if len(m.field7) < 1000000 {
			newCapacity = m.xxx_LenField7 * 2
		} else {
			newCapacity = m.xxx_LenField7 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field7)
		m.field7 = t
	}
	m.field7[m.xxx_LenField7] = value
	m.xxx_LenField7 += 1
	return nil
}

func (m *NidRepStruct) SetField7(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return errors.New("Index is out of bounds")
	}
	m.field7[index] = value
	return nil
}

func (m *NidRepStruct) Field7Size() (size int) {
	if m != nil {
		return m.xxx_LenField7
	}
	return 0
}

func (m *NidRepStruct) ClearField7() {
	if m != nil {
		m.xxx_LenField7 = 0
	}
}

func (m *NidRepStruct) GetField7(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field7[index], nil
}

func (m *NidRepStruct) AddField8() (field *NidOptNative, err error) {
	if m != nil {
		field = new(NidOptNative)
		if len(m.field8) <= m.xxx_LenField8 {
			newCapacity := 0
			if len(m.field8) == 0 {
				newCapacity = 8
			} else if len(m.field8) < 1000000 {
				newCapacity = m.xxx_LenField8 * 2
			} else {
				newCapacity = m.xxx_LenField8 + 1000000
			}
			t := make([]*NidOptNative, newCapacity, newCapacity)
			copy(t, m.field8)
			m.field8 = t
		}
		m.field8[m.xxx_LenField8] = field
		m.xxx_LenField8 += 1
		return field, nil
	}
	return nil, errors.New("Cannot append to nil message")
}

func (m *NidRepStruct) MutateField8(index int) (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return nil, errors.New("Index is out of bounds")
	}
	if m.field8[index] == nil {
		m.field8[index] = new(NidOptNative)
	}
	return m.field8[index], nil
}

func (m *NidRepStruct) Field8Size() (size int) {
	if m != nil {
		return m.xxx_LenField8
	}
	return 0
}

func (m *NidRepStruct) ClearField8() {
	if m != nil {
		for i := 0; i < m.Field8Size(); i++ {
			m.field8[i].Clear()
		}
		m.xxx_LenField8 = 0

	}
}

func (m *NidRepStruct) GetField8(index int) (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field8[index], nil
}

func (m *NidRepStruct) AddField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field13) <= m.xxx_LenField13 {
		newCapacity := 0
		if len(m.field13) == 0 {
			newCapacity = 8
		} else if len(m.field13) < 1000000 {
			newCapacity = m.xxx_LenField13 * 2
		} else {
			newCapacity = m.xxx_LenField13 + 1000000
		}
		t := make([]bool, newCapacity, newCapacity)
		copy(t, m.field13)
		m.field13 = t
	}
	m.field13[m.xxx_LenField13] = value
	m.xxx_LenField13 += 1
	return nil
}

func (m *NidRepStruct) SetField13(value bool, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return errors.New("Index is out of bounds")
	}
	m.field13[index] = value
	return nil
}

func (m *NidRepStruct) Field13Size() (size int) {
	if m != nil {
		return m.xxx_LenField13
	}
	return 0
}

func (m *NidRepStruct) ClearField13() {
	if m != nil {
		m.xxx_LenField13 = 0
	}
}

func (m *NidRepStruct) GetField13(index int) (field bool, err error) {
	if m == nil {
		return false, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return false, errors.New("Index is out of bounds")
	}
	return m.field13[index], nil
}

func (m *NidRepStruct) AddField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field14) <= m.xxx_LenField14 {
		newCapacity := 0
		if len(m.field14) == 0 {
			newCapacity = 8
		} else if len(m.field14) < 1000000 {
			newCapacity = m.xxx_LenField14 * 2
		} else {
			newCapacity = m.xxx_LenField14 + 1000000
		}
		t := make([]string, newCapacity, newCapacity)
		copy(t, m.field14)
		m.field14 = t
	}
	m.field14[m.xxx_LenField14] = value
	m.xxx_LenField14 += 1
	return nil
}

func (m *NidRepStruct) SetField14(value string, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField14 {
		return errors.New("Index is out of bounds")
	}
	m.field14[index] = value
	return nil
}

func (m *NidRepStruct) Field14Size() (size int) {
	if m != nil {
		return m.xxx_LenField14
	}
	return 0
}

func (m *NidRepStruct) ClearField14() {
	if m != nil {
		m.xxx_LenField14 = 0
	}
}

func (m *NidRepStruct) GetField14(index int) (field string, err error) {
	if m == nil {
		return "", errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField14 {
		return "", errors.New("Index is out of bounds")
	}
	return m.field14[index], nil
}

func (m *NidRepStruct) AddField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	if len(m.field15) <= m.xxx_LenField15 {
		newCapacity := 0
		if len(m.field15) == 0 {
			newCapacity = 8
		} else if len(m.field15) < 1000000 {
			newCapacity = m.xxx_LenField15 * 2
		} else {
			newCapacity = m.xxx_LenField15 + 1000000
		}
		t := make([][]byte, newCapacity, newCapacity)
		copy(t, m.field15)
		m.field15 = t
	}
	m.field15[m.xxx_LenField15] = value
	m.xxx_LenField15 += 1
	return nil
}

func (m *NidRepStruct) SetField15(value []byte, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField15 {
		return errors.New("Index is out of bounds")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.field15[index] = value
	return nil
}

func (m *NidRepStruct) Field15Size() (size int) {
	if m != nil {
		return m.xxx_LenField15
	}
	return 0
}

func (m *NidRepStruct) ClearField15() {
	if m != nil {
		m.xxx_LenField15 = 0
	}
}

func (m *NidRepStruct) GetField15(index int) (field []byte, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField15 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field15[index], nil
}

func (m *NidRepStruct) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		for i := 0; i < m.Field3Size(); i++ {
			m.field3[i].Clear()
		}
		m.xxx_LenField3 = 0

		for i := 0; i < m.Field4Size(); i++ {
			m.field4[i].Clear()
		}
		m.xxx_LenField4 = 0

		m.ClearField6()
		m.ClearField7()
		for i := 0; i < m.Field8Size(); i++ {
			m.field8[i].Clear()
		}
		m.xxx_LenField8 = 0

		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type NinRepStruct struct {
	xxx_sizeCached   int
	field1           []float64
	field2           []float32
	field3           []*NidOptNative
	field4           []*NinOptNative
	field6           []uint64
	field7           []int32
	field8           []*NidOptNative
	field13          []bool
	field14          []string
	field15          [][]byte
	XXX_unrecognized []byte
	xxx_LenField1    int
	xxx_LenField2    int
	xxx_LenField3    int
	xxx_LenField4    int
	xxx_LenField6    int
	xxx_LenField7    int
	xxx_LenField8    int
	xxx_LenField13   int
	xxx_LenField14   int
	xxx_LenField15   int
}

func (m *NinRepStruct) Reset()      { *m = NinRepStruct{} }
func (*NinRepStruct) ProtoMessage() {}

func (m *NinRepStruct) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinRepStruct) AddField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field1) <= m.xxx_LenField1 {
		newCapacity := 0
		if len(m.field1) == 0 {
			newCapacity = 8
		} else if len(m.field1) < 1000000 {
			newCapacity = m.xxx_LenField1 * 2
		} else {
			newCapacity = m.xxx_LenField1 + 1000000
		}
		t := make([]float64, newCapacity, newCapacity)
		copy(t, m.field1)
		m.field1 = t
	}
	m.field1[m.xxx_LenField1] = value
	m.xxx_LenField1 += 1
	return nil
}

func (m *NinRepStruct) SetField1(value float64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return errors.New("Index is out of bounds")
	}
	m.field1[index] = value
	return nil
}

func (m *NinRepStruct) Field1Size() (size int) {
	if m != nil {
		return m.xxx_LenField1
	}
	return 0
}

func (m *NinRepStruct) ClearField1() {
	if m != nil {
		m.xxx_LenField1 = 0
	}
}

func (m *NinRepStruct) GetField1(index int) (field float64, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field1[index], nil
}

func (m *NinRepStruct) AddField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field2) <= m.xxx_LenField2 {
		newCapacity := 0
		if len(m.field2) == 0 {
			newCapacity = 8
		} else if len(m.field2) < 1000000 {
			newCapacity = m.xxx_LenField2 * 2
		} else {
			newCapacity = m.xxx_LenField2 + 1000000
		}
		t := make([]float32, newCapacity, newCapacity)
		copy(t, m.field2)
		m.field2 = t
	}
	m.field2[m.xxx_LenField2] = value
	m.xxx_LenField2 += 1
	return nil
}

func (m *NinRepStruct) SetField2(value float32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return errors.New("Index is out of bounds")
	}
	m.field2[index] = value
	return nil
}

func (m *NinRepStruct) Field2Size() (size int) {
	if m != nil {
		return m.xxx_LenField2
	}
	return 0
}

func (m *NinRepStruct) ClearField2() {
	if m != nil {
		m.xxx_LenField2 = 0
	}
}

func (m *NinRepStruct) GetField2(index int) (field float32, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.field2[index], nil
}

func (m *NinRepStruct) AddField3() (field *NidOptNative, err error) {
	if m != nil {
		field = new(NidOptNative)
		if len(m.field3) <= m.xxx_LenField3 {
			newCapacity := 0
			if len(m.field3) == 0 {
				newCapacity = 8
			} else if len(m.field3) < 1000000 {
				newCapacity = m.xxx_LenField3 * 2
			} else {
				newCapacity = m.xxx_LenField3 + 1000000
			}
			t := make([]*NidOptNative, newCapacity, newCapacity)
			copy(t, m.field3)
			m.field3 = t
		}
		m.field3[m.xxx_LenField3] = field
		m.xxx_LenField3 += 1
		return field, nil
	}
	return nil, errors.New("Cannot append to nil message")
}

func (m *NinRepStruct) MutateField3(index int) (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return nil, errors.New("Index is out of bounds")
	}
	if m.field3[index] == nil {
		m.field3[index] = new(NidOptNative)
	}
	return m.field3[index], nil
}

func (m *NinRepStruct) Field3Size() (size int) {
	if m != nil {
		return m.xxx_LenField3
	}
	return 0
}

func (m *NinRepStruct) ClearField3() {
	if m != nil {
		for i := 0; i < m.Field3Size(); i++ {
			m.field3[i].Clear()
		}
		m.xxx_LenField3 = 0

	}
}

func (m *NinRepStruct) GetField3(index int) (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField3 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field3[index], nil
}

func (m *NinRepStruct) AddField4() (field *NinOptNative, err error) {
	if m != nil {
		field = new(NinOptNative)
		if len(m.field4) <= m.xxx_LenField4 {
			newCapacity := 0
			if len(m.field4) == 0 {
				newCapacity = 8
			} else if len(m.field4) < 1000000 {
				newCapacity = m.xxx_LenField4 * 2
			} else {
				newCapacity = m.xxx_LenField4 + 1000000
			}
			t := make([]*NinOptNative, newCapacity, newCapacity)
			copy(t, m.field4)
			m.field4 = t
		}
		m.field4[m.xxx_LenField4] = field
		m.xxx_LenField4 += 1
		return field, nil
	}
	return nil, errors.New("Cannot append to nil message")
}

func (m *NinRepStruct) MutateField4(index int) (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return nil, errors.New("Index is out of bounds")
	}
	if m.field4[index] == nil {
		m.field4[index] = new(NinOptNative)
	}
	return m.field4[index], nil
}

func (m *NinRepStruct) Field4Size() (size int) {
	if m != nil {
		return m.xxx_LenField4
	}
	return 0
}

func (m *NinRepStruct) ClearField4() {
	if m != nil {
		for i := 0; i < m.Field4Size(); i++ {
			m.field4[i].Clear()
		}
		m.xxx_LenField4 = 0

	}
}

func (m *NinRepStruct) GetField4(index int) (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField4 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field4[index], nil
}

func (m *NinRepStruct) AddField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field6) <= m.xxx_LenField6 {
		newCapacity := 0
		if len(m.field6) == 0 {
			newCapacity = 8
		} else if len(m.field6) < 1000000 {
			newCapacity = m.xxx_LenField6 * 2
		} else {
			newCapacity = m.xxx_LenField6 + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.field6)
		m.field6 = t
	}
	m.field6[m.xxx_LenField6] = value
	m.xxx_LenField6 += 1
	return nil
}

func (m *NinRepStruct) SetField6(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return errors.New("Index is out of bounds")
	}
	m.field6[index] = value
	return nil
}

func (m *NinRepStruct) Field6Size() (size int) {
	if m != nil {
		return m.xxx_LenField6
	}
	return 0
}

func (m *NinRepStruct) ClearField6() {
	if m != nil {
		m.xxx_LenField6 = 0
	}
}

func (m *NinRepStruct) GetField6(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField6 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field6[index], nil
}

func (m *NinRepStruct) AddField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field7) <= m.xxx_LenField7 {
		newCapacity := 0
		if len(m.field7) == 0 {
			newCapacity = 8
		} else if len(m.field7) < 1000000 {
			newCapacity = m.xxx_LenField7 * 2
		} else {
			newCapacity = m.xxx_LenField7 + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.field7)
		m.field7 = t
	}
	m.field7[m.xxx_LenField7] = value
	m.xxx_LenField7 += 1
	return nil
}

func (m *NinRepStruct) SetField7(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return errors.New("Index is out of bounds")
	}
	m.field7[index] = value
	return nil
}

func (m *NinRepStruct) Field7Size() (size int) {
	if m != nil {
		return m.xxx_LenField7
	}
	return 0
}

func (m *NinRepStruct) ClearField7() {
	if m != nil {
		m.xxx_LenField7 = 0
	}
}

func (m *NinRepStruct) GetField7(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField7 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field7[index], nil
}

func (m *NinRepStruct) AddField8() (field *NidOptNative, err error) {
	if m != nil {
		field = new(NidOptNative)
		if len(m.field8) <= m.xxx_LenField8 {
			newCapacity := 0
			if len(m.field8) == 0 {
				newCapacity = 8
			} else if len(m.field8) < 1000000 {
				newCapacity = m.xxx_LenField8 * 2
			} else {
				newCapacity = m.xxx_LenField8 + 1000000
			}
			t := make([]*NidOptNative, newCapacity, newCapacity)
			copy(t, m.field8)
			m.field8 = t
		}
		m.field8[m.xxx_LenField8] = field
		m.xxx_LenField8 += 1
		return field, nil
	}
	return nil, errors.New("Cannot append to nil message")
}

func (m *NinRepStruct) MutateField8(index int) (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return nil, errors.New("Index is out of bounds")
	}
	if m.field8[index] == nil {
		m.field8[index] = new(NidOptNative)
	}
	return m.field8[index], nil
}

func (m *NinRepStruct) Field8Size() (size int) {
	if m != nil {
		return m.xxx_LenField8
	}
	return 0
}

func (m *NinRepStruct) ClearField8() {
	if m != nil {
		for i := 0; i < m.Field8Size(); i++ {
			m.field8[i].Clear()
		}
		m.xxx_LenField8 = 0

	}
}

func (m *NinRepStruct) GetField8(index int) (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField8 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field8[index], nil
}

func (m *NinRepStruct) AddField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field13) <= m.xxx_LenField13 {
		newCapacity := 0
		if len(m.field13) == 0 {
			newCapacity = 8
		} else if len(m.field13) < 1000000 {
			newCapacity = m.xxx_LenField13 * 2
		} else {
			newCapacity = m.xxx_LenField13 + 1000000
		}
		t := make([]bool, newCapacity, newCapacity)
		copy(t, m.field13)
		m.field13 = t
	}
	m.field13[m.xxx_LenField13] = value
	m.xxx_LenField13 += 1
	return nil
}

func (m *NinRepStruct) SetField13(value bool, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return errors.New("Index is out of bounds")
	}
	m.field13[index] = value
	return nil
}

func (m *NinRepStruct) Field13Size() (size int) {
	if m != nil {
		return m.xxx_LenField13
	}
	return 0
}

func (m *NinRepStruct) ClearField13() {
	if m != nil {
		m.xxx_LenField13 = 0
	}
}

func (m *NinRepStruct) GetField13(index int) (field bool, err error) {
	if m == nil {
		return false, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField13 {
		return false, errors.New("Index is out of bounds")
	}
	return m.field13[index], nil
}

func (m *NinRepStruct) AddField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field14) <= m.xxx_LenField14 {
		newCapacity := 0
		if len(m.field14) == 0 {
			newCapacity = 8
		} else if len(m.field14) < 1000000 {
			newCapacity = m.xxx_LenField14 * 2
		} else {
			newCapacity = m.xxx_LenField14 + 1000000
		}
		t := make([]string, newCapacity, newCapacity)
		copy(t, m.field14)
		m.field14 = t
	}
	m.field14[m.xxx_LenField14] = value
	m.xxx_LenField14 += 1
	return nil
}

func (m *NinRepStruct) SetField14(value string, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField14 {
		return errors.New("Index is out of bounds")
	}
	m.field14[index] = value
	return nil
}

func (m *NinRepStruct) Field14Size() (size int) {
	if m != nil {
		return m.xxx_LenField14
	}
	return 0
}

func (m *NinRepStruct) ClearField14() {
	if m != nil {
		m.xxx_LenField14 = 0
	}
}

func (m *NinRepStruct) GetField14(index int) (field string, err error) {
	if m == nil {
		return "", errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField14 {
		return "", errors.New("Index is out of bounds")
	}
	return m.field14[index], nil
}

func (m *NinRepStruct) AddField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	if len(m.field15) <= m.xxx_LenField15 {
		newCapacity := 0
		if len(m.field15) == 0 {
			newCapacity = 8
		} else if len(m.field15) < 1000000 {
			newCapacity = m.xxx_LenField15 * 2
		} else {
			newCapacity = m.xxx_LenField15 + 1000000
		}
		t := make([][]byte, newCapacity, newCapacity)
		copy(t, m.field15)
		m.field15 = t
	}
	m.field15[m.xxx_LenField15] = value
	m.xxx_LenField15 += 1
	return nil
}

func (m *NinRepStruct) SetField15(value []byte, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField15 {
		return errors.New("Index is out of bounds")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.field15[index] = value
	return nil
}

func (m *NinRepStruct) Field15Size() (size int) {
	if m != nil {
		return m.xxx_LenField15
	}
	return 0
}

func (m *NinRepStruct) ClearField15() {
	if m != nil {
		m.xxx_LenField15 = 0
	}
}

func (m *NinRepStruct) GetField15(index int) (field []byte, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField15 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field15[index], nil
}

func (m *NinRepStruct) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		for i := 0; i < m.Field3Size(); i++ {
			m.field3[i].Clear()
		}
		m.xxx_LenField3 = 0

		for i := 0; i < m.Field4Size(); i++ {
			m.field4[i].Clear()
		}
		m.xxx_LenField4 = 0

		m.ClearField6()
		m.ClearField7()
		for i := 0; i < m.Field8Size(); i++ {
			m.field8[i].Clear()
		}
		m.xxx_LenField8 = 0

		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type NidEmbeddedStruct struct {
	xxx_sizeCached int
	*NidOptNative
	field200              *NidOptNative
	field210              bool
	XXX_unrecognized      []byte
	xxx_IsNidOptNativeSet bool
	xxx_IsField200Set     bool
	xxx_IsField210Set     bool
}

func (m *NidEmbeddedStruct) Reset()      { *m = NidEmbeddedStruct{} }
func (*NidEmbeddedStruct) ProtoMessage() {}

func (m *NidEmbeddedStruct) GetField200() *NidOptNative {
	if m != nil && m.xxx_IsField200Set {
		return m.field200
	}
	return nil
}
func (m *NidEmbeddedStruct) GetField210() bool {
	if m != nil && m.xxx_IsField210Set {
		return m.field210
	}
	return false
}

func (m *NidEmbeddedStruct) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidEmbeddedStruct) MutateNidOptNative() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsNidOptNativeSet {
		m.xxx_IsNidOptNativeSet = true
		m.NidOptNative = new(NidOptNative)
	}
	return m.NidOptNative, nil
}

func (m *NidEmbeddedStruct) HasNidOptNative() (isSet bool) {
	if m != nil && m.xxx_IsNidOptNativeSet {
		return true
	}
	return false
}

func (m *NidEmbeddedStruct) ClearNidOptNative() {
	if m != nil {
		m.NidOptNative.Clear()
		m.xxx_IsNidOptNativeSet = false

	}
}

func (m *NidEmbeddedStruct) MutateField200() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField200Set {
		m.xxx_IsField200Set = true
		m.field200 = new(NidOptNative)
	}
	return m.field200, nil
}

func (m *NidEmbeddedStruct) HasField200() (isSet bool) {
	if m != nil && m.xxx_IsField200Set {
		return true
	}
	return false
}

func (m *NidEmbeddedStruct) ClearField200() {
	if m != nil {
		m.field200.Clear()
		m.xxx_IsField200Set = false

	}
}

func (m *NidEmbeddedStruct) SetField210(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField210Set = true
	m.field210 = value
	return nil
}

func (m *NidEmbeddedStruct) HasField210() (isSet bool) {
	if m != nil && m.xxx_IsField210Set {
		return true
	}
	return false
}

func (m *NidEmbeddedStruct) ClearField210() {
	if m != nil {
		m.xxx_IsField210Set = false
	}
}

func (m *NidEmbeddedStruct) Clear() {
	if m != nil {
		m.NidOptNative.Clear()
		m.xxx_IsNidOptNativeSet = false

		m.field200.Clear()
		m.xxx_IsField200Set = false

		m.ClearField210()
	}
}

type NinEmbeddedStruct struct {
	xxx_sizeCached int
	*NidOptNative
	field200              *NidOptNative
	field210              bool
	XXX_unrecognized      []byte
	xxx_IsNidOptNativeSet bool
	xxx_IsField200Set     bool
	xxx_IsField210Set     bool
}

func (m *NinEmbeddedStruct) Reset()      { *m = NinEmbeddedStruct{} }
func (*NinEmbeddedStruct) ProtoMessage() {}

func (m *NinEmbeddedStruct) GetField200() *NidOptNative {
	if m != nil && m.xxx_IsField200Set {
		return m.field200
	}
	return nil
}
func (m *NinEmbeddedStruct) GetField210() bool {
	if m != nil && m.xxx_IsField210Set {
		return m.field210
	}
	return false
}

func (m *NinEmbeddedStruct) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinEmbeddedStruct) MutateNidOptNative() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsNidOptNativeSet {
		m.xxx_IsNidOptNativeSet = true
		m.NidOptNative = new(NidOptNative)
	}
	return m.NidOptNative, nil
}

func (m *NinEmbeddedStruct) HasNidOptNative() (isSet bool) {
	if m != nil && m.xxx_IsNidOptNativeSet {
		return true
	}
	return false
}

func (m *NinEmbeddedStruct) ClearNidOptNative() {
	if m != nil {
		m.NidOptNative.Clear()
		m.xxx_IsNidOptNativeSet = false

	}
}

func (m *NinEmbeddedStruct) MutateField200() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField200Set {
		m.xxx_IsField200Set = true
		m.field200 = new(NidOptNative)
	}
	return m.field200, nil
}

func (m *NinEmbeddedStruct) HasField200() (isSet bool) {
	if m != nil && m.xxx_IsField200Set {
		return true
	}
	return false
}

func (m *NinEmbeddedStruct) ClearField200() {
	if m != nil {
		m.field200.Clear()
		m.xxx_IsField200Set = false

	}
}

func (m *NinEmbeddedStruct) SetField210(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField210Set = true
	m.field210 = value
	return nil
}

func (m *NinEmbeddedStruct) HasField210() (isSet bool) {
	if m != nil && m.xxx_IsField210Set {
		return true
	}
	return false
}

func (m *NinEmbeddedStruct) ClearField210() {
	if m != nil {
		m.xxx_IsField210Set = false
	}
}

func (m *NinEmbeddedStruct) Clear() {
	if m != nil {
		m.NidOptNative.Clear()
		m.xxx_IsNidOptNativeSet = false

		m.field200.Clear()
		m.xxx_IsField200Set = false

		m.ClearField210()
	}
}

type NidNestedStruct struct {
	xxx_sizeCached   int
	field1           *NidOptStruct
	field2           []*NidRepStruct
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
	xxx_LenField2    int
}

func (m *NidNestedStruct) Reset()      { *m = NidNestedStruct{} }
func (*NidNestedStruct) ProtoMessage() {}

func (m *NidNestedStruct) GetField1() *NidOptStruct {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return nil
}
func (m *NidNestedStruct) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidNestedStruct) MutateField1() (field *NidOptStruct, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField1Set {
		m.xxx_IsField1Set = true
		m.field1 = new(NidOptStruct)
	}
	return m.field1, nil
}

func (m *NidNestedStruct) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NidNestedStruct) ClearField1() {
	if m != nil {
		m.field1.Clear()
		m.xxx_IsField1Set = false

	}
}

func (m *NidNestedStruct) AddField2() (field *NidRepStruct, err error) {
	if m != nil {
		field = new(NidRepStruct)
		if len(m.field2) <= m.xxx_LenField2 {
			newCapacity := 0
			if len(m.field2) == 0 {
				newCapacity = 8
			} else if len(m.field2) < 1000000 {
				newCapacity = m.xxx_LenField2 * 2
			} else {
				newCapacity = m.xxx_LenField2 + 1000000
			}
			t := make([]*NidRepStruct, newCapacity, newCapacity)
			copy(t, m.field2)
			m.field2 = t
		}
		m.field2[m.xxx_LenField2] = field
		m.xxx_LenField2 += 1
		return field, nil
	}
	return nil, errors.New("Cannot append to nil message")
}

func (m *NidNestedStruct) MutateField2(index int) (field *NidRepStruct, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return nil, errors.New("Index is out of bounds")
	}
	if m.field2[index] == nil {
		m.field2[index] = new(NidRepStruct)
	}
	return m.field2[index], nil
}

func (m *NidNestedStruct) Field2Size() (size int) {
	if m != nil {
		return m.xxx_LenField2
	}
	return 0
}

func (m *NidNestedStruct) ClearField2() {
	if m != nil {
		for i := 0; i < m.Field2Size(); i++ {
			m.field2[i].Clear()
		}
		m.xxx_LenField2 = 0

	}
}

func (m *NidNestedStruct) GetField2(index int) (field *NidRepStruct, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field2[index], nil
}

func (m *NidNestedStruct) Clear() {
	if m != nil {
		m.field1.Clear()
		m.xxx_IsField1Set = false

		for i := 0; i < m.Field2Size(); i++ {
			m.field2[i].Clear()
		}
		m.xxx_LenField2 = 0

	}
}

type NinNestedStruct struct {
	xxx_sizeCached   int
	field1           *NinOptStruct
	field2           []*NinRepStruct
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
	xxx_LenField2    int
}

func (m *NinNestedStruct) Reset()      { *m = NinNestedStruct{} }
func (*NinNestedStruct) ProtoMessage() {}

func (m *NinNestedStruct) GetField1() *NinOptStruct {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return nil
}
func (m *NinNestedStruct) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinNestedStruct) MutateField1() (field *NinOptStruct, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField1Set {
		m.xxx_IsField1Set = true
		m.field1 = new(NinOptStruct)
	}
	return m.field1, nil
}

func (m *NinNestedStruct) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NinNestedStruct) ClearField1() {
	if m != nil {
		m.field1.Clear()
		m.xxx_IsField1Set = false

	}
}

func (m *NinNestedStruct) AddField2() (field *NinRepStruct, err error) {
	if m != nil {
		field = new(NinRepStruct)
		if len(m.field2) <= m.xxx_LenField2 {
			newCapacity := 0
			if len(m.field2) == 0 {
				newCapacity = 8
			} else if len(m.field2) < 1000000 {
				newCapacity = m.xxx_LenField2 * 2
			} else {
				newCapacity = m.xxx_LenField2 + 1000000
			}
			t := make([]*NinRepStruct, newCapacity, newCapacity)
			copy(t, m.field2)
			m.field2 = t
		}
		m.field2[m.xxx_LenField2] = field
		m.xxx_LenField2 += 1
		return field, nil
	}
	return nil, errors.New("Cannot append to nil message")
}

func (m *NinNestedStruct) MutateField2(index int) (field *NinRepStruct, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return nil, errors.New("Index is out of bounds")
	}
	if m.field2[index] == nil {
		m.field2[index] = new(NinRepStruct)
	}
	return m.field2[index], nil
}

func (m *NinNestedStruct) Field2Size() (size int) {
	if m != nil {
		return m.xxx_LenField2
	}
	return 0
}

func (m *NinNestedStruct) ClearField2() {
	if m != nil {
		for i := 0; i < m.Field2Size(); i++ {
			m.field2[i].Clear()
		}
		m.xxx_LenField2 = 0

	}
}

func (m *NinNestedStruct) GetField2(index int) (field *NinRepStruct, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField2 {
		return nil, errors.New("Index is out of bounds")
	}
	return m.field2[index], nil
}

func (m *NinNestedStruct) Clear() {
	if m != nil {
		m.field1.Clear()
		m.xxx_IsField1Set = false

		for i := 0; i < m.Field2Size(); i++ {
			m.field2[i].Clear()
		}
		m.xxx_LenField2 = 0

	}
}

type NidOptCustom struct {
	xxx_sizeCached   int
	id               Id
	value            Weight
	XXX_unrecognized []byte
	xxx_IsIdSet      bool
	xxx_IsValueSet   bool
}

func (m *NidOptCustom) Reset()      { *m = NidOptCustom{} }
func (*NidOptCustom) ProtoMessage() {}

func (m *NidOptCustom) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidOptCustom) SetId(value Id) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsIdSet = true
	m.id = value
	return nil
}

func (m *NidOptCustom) HasId() (isSet bool) {
	if m != nil && m.xxx_IsIdSet {
		return true
	}
	return false
}

func (m *NidOptCustom) ClearId() {
	if m != nil {
		m.xxx_IsIdSet = false
	}
}

func (m *NidOptCustom) SetValue(value Weight) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsValueSet = true
	m.value = value
	return nil
}

func (m *NidOptCustom) HasValue() (isSet bool) {
	if m != nil && m.xxx_IsValueSet {
		return true
	}
	return false
}

func (m *NidOptCustom) ClearValue() {
	if m != nil {
		m.xxx_IsValueSet = false
	}
}

func (m *NidOptCustom) Clear() {
	if m != nil {
		m.ClearId()
		m.ClearValue()
	}
}

type NinOptCustom struct {
	xxx_sizeCached   int
	id               Id
	value            Weight
	XXX_unrecognized []byte
	xxx_IsIdSet      bool
	xxx_IsValueSet   bool
}

func (m *NinOptCustom) Reset()      { *m = NinOptCustom{} }
func (*NinOptCustom) ProtoMessage() {}

func (m *NinOptCustom) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinOptCustom) SetId(value Id) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsIdSet = true
	m.id = value
	return nil
}

func (m *NinOptCustom) HasId() (isSet bool) {
	if m != nil && m.xxx_IsIdSet {
		return true
	}
	return false
}

func (m *NinOptCustom) ClearId() {
	if m != nil {
		m.xxx_IsIdSet = false
	}
}

func (m *NinOptCustom) SetValue(value Weight) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsValueSet = true
	m.value = value
	return nil
}

func (m *NinOptCustom) HasValue() (isSet bool) {
	if m != nil && m.xxx_IsValueSet {
		return true
	}
	return false
}

func (m *NinOptCustom) ClearValue() {
	if m != nil {
		m.xxx_IsValueSet = false
	}
}

func (m *NinOptCustom) Clear() {
	if m != nil {
		m.ClearId()
		m.ClearValue()
	}
}

type NidRepCustom struct {
	xxx_sizeCached   int
	id               []Id
	value            []Weight
	XXX_unrecognized []byte
	xxx_LenId        int
	xxx_LenValue     int
}

func (m *NidRepCustom) Reset()      { *m = NidRepCustom{} }
func (*NidRepCustom) ProtoMessage() {}

func (m *NidRepCustom) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidRepCustom) AddId(value Id) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.id) <= m.xxx_LenId {
		newCapacity := 0
		if len(m.id) == 0 {
			newCapacity = 8
		} else if len(m.id) < 1000000 {
			newCapacity = m.xxx_LenId * 2
		} else {
			newCapacity = m.xxx_LenId + 1000000
		}
		t := make([]Id, newCapacity, newCapacity)
		copy(t, m.id)
		m.id = t
	}
	m.id[m.xxx_LenId] = value
	m.xxx_LenId += 1
	return nil
}

func (m *NidRepCustom) SetId(value Id, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenId {
		return errors.New("Index is out of bounds")
	}
	m.id[index] = value
	return nil
}

func (m *NidRepCustom) IdSize() (size int) {
	if m != nil {
		return m.xxx_LenId
	}
	return 0
}

func (m *NidRepCustom) ClearId() {
	if m != nil {
		m.xxx_LenId = 0
	}
}

func (m *NidRepCustom) GetId(index int) (field Id, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenId {
		return 0, errors.New("Index is out of bounds")
	}
	return m.id[index], nil
}

func (m *NidRepCustom) AddValue(value Weight) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.value) <= m.xxx_LenValue {
		newCapacity := 0
		if len(m.value) == 0 {
			newCapacity = 8
		} else if len(m.value) < 1000000 {
			newCapacity = m.xxx_LenValue * 2
		} else {
			newCapacity = m.xxx_LenValue + 1000000
		}
		t := make([]Weight, newCapacity, newCapacity)
		copy(t, m.value)
		m.value = t
	}
	m.value[m.xxx_LenValue] = value
	m.xxx_LenValue += 1
	return nil
}

func (m *NidRepCustom) SetValue(value Weight, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenValue {
		return errors.New("Index is out of bounds")
	}
	m.value[index] = value
	return nil
}

func (m *NidRepCustom) ValueSize() (size int) {
	if m != nil {
		return m.xxx_LenValue
	}
	return 0
}

func (m *NidRepCustom) ClearValue() {
	if m != nil {
		m.xxx_LenValue = 0
	}
}

func (m *NidRepCustom) GetValue(index int) (field Weight, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenValue {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.value[index], nil
}

func (m *NidRepCustom) Clear() {
	if m != nil {
		m.ClearId()
		m.ClearValue()
	}
}

type NinRepCustom struct {
	xxx_sizeCached   int
	id               []Id
	value            []Weight
	XXX_unrecognized []byte
	xxx_LenId        int
	xxx_LenValue     int
}

func (m *NinRepCustom) Reset()      { *m = NinRepCustom{} }
func (*NinRepCustom) ProtoMessage() {}

func (m *NinRepCustom) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinRepCustom) AddId(value Id) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.id) <= m.xxx_LenId {
		newCapacity := 0
		if len(m.id) == 0 {
			newCapacity = 8
		} else if len(m.id) < 1000000 {
			newCapacity = m.xxx_LenId * 2
		} else {
			newCapacity = m.xxx_LenId + 1000000
		}
		t := make([]Id, newCapacity, newCapacity)
		copy(t, m.id)
		m.id = t
	}
	m.id[m.xxx_LenId] = value
	m.xxx_LenId += 1
	return nil
}

func (m *NinRepCustom) SetId(value Id, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenId {
		return errors.New("Index is out of bounds")
	}
	m.id[index] = value
	return nil
}

func (m *NinRepCustom) IdSize() (size int) {
	if m != nil {
		return m.xxx_LenId
	}
	return 0
}

func (m *NinRepCustom) ClearId() {
	if m != nil {
		m.xxx_LenId = 0
	}
}

func (m *NinRepCustom) GetId(index int) (field Id, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenId {
		return 0, errors.New("Index is out of bounds")
	}
	return m.id[index], nil
}

func (m *NinRepCustom) AddValue(value Weight) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.value) <= m.xxx_LenValue {
		newCapacity := 0
		if len(m.value) == 0 {
			newCapacity = 8
		} else if len(m.value) < 1000000 {
			newCapacity = m.xxx_LenValue * 2
		} else {
			newCapacity = m.xxx_LenValue + 1000000
		}
		t := make([]Weight, newCapacity, newCapacity)
		copy(t, m.value)
		m.value = t
	}
	m.value[m.xxx_LenValue] = value
	m.xxx_LenValue += 1
	return nil
}

func (m *NinRepCustom) SetValue(value Weight, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenValue {
		return errors.New("Index is out of bounds")
	}
	m.value[index] = value
	return nil
}

func (m *NinRepCustom) ValueSize() (size int) {
	if m != nil {
		return m.xxx_LenValue
	}
	return 0
}

func (m *NinRepCustom) ClearValue() {
	if m != nil {
		m.xxx_LenValue = 0
	}
}

func (m *NinRepCustom) GetValue(index int) (field Weight, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenValue {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.value[index], nil
}

func (m *NinRepCustom) Clear() {
	if m != nil {
		m.ClearId()
		m.ClearValue()
	}
}

type NinOptNativeUnion struct {
	xxx_sizeCached   int
	field1           float64
	field2           float32
	field3           int32
	field4           int64
	field5           uint32
	field6           uint64
	field13          bool
	field14          string
	field15          []byte
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
	xxx_IsField2Set  bool
	xxx_IsField3Set  bool
	xxx_IsField4Set  bool
	xxx_IsField5Set  bool
	xxx_IsField6Set  bool
	xxx_IsField13Set bool
	xxx_IsField14Set bool
	xxx_IsField15Set bool
}

func (m *NinOptNativeUnion) Reset()      { *m = NinOptNativeUnion{} }
func (*NinOptNativeUnion) ProtoMessage() {}

func (m *NinOptNativeUnion) GetField1() float64 {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return 0
}

func (m *NinOptNativeUnion) GetField2() float32 {
	if m != nil && m.xxx_IsField2Set {
		return m.field2
	}
	return 0
}

func (m *NinOptNativeUnion) GetField3() int32 {
	if m != nil && m.xxx_IsField3Set {
		return m.field3
	}
	return 0
}

func (m *NinOptNativeUnion) GetField4() int64 {
	if m != nil && m.xxx_IsField4Set {
		return m.field4
	}
	return 0
}

func (m *NinOptNativeUnion) GetField5() uint32 {
	if m != nil && m.xxx_IsField5Set {
		return m.field5
	}
	return 0
}

func (m *NinOptNativeUnion) GetField6() uint64 {
	if m != nil && m.xxx_IsField6Set {
		return m.field6
	}
	return 0
}

func (m *NinOptNativeUnion) GetField13() bool {
	if m != nil && m.xxx_IsField13Set {
		return m.field13
	}
	return false
}

func (m *NinOptNativeUnion) GetField14() string {
	if m != nil && m.xxx_IsField14Set {
		return m.field14
	}
	return ""
}

func (m *NinOptNativeUnion) GetField15() []byte {
	if m != nil && m.xxx_IsField15Set {
		return m.field15
	}
	return nil
}
func (m *NinOptNativeUnion) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinOptNativeUnion) SetField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NinOptNativeUnion) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NinOptNativeUnion) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NinOptNativeUnion) SetField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField2Set = true
	m.field2 = value
	return nil
}

func (m *NinOptNativeUnion) HasField2() (isSet bool) {
	if m != nil && m.xxx_IsField2Set {
		return true
	}
	return false
}

func (m *NinOptNativeUnion) ClearField2() {
	if m != nil {
		m.xxx_IsField2Set = false
	}
}

func (m *NinOptNativeUnion) SetField3(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField3Set = true
	m.field3 = value
	return nil
}

func (m *NinOptNativeUnion) HasField3() (isSet bool) {
	if m != nil && m.xxx_IsField3Set {
		return true
	}
	return false
}

func (m *NinOptNativeUnion) ClearField3() {
	if m != nil {
		m.xxx_IsField3Set = false
	}
}

func (m *NinOptNativeUnion) SetField4(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField4Set = true
	m.field4 = value
	return nil
}

func (m *NinOptNativeUnion) HasField4() (isSet bool) {
	if m != nil && m.xxx_IsField4Set {
		return true
	}
	return false
}

func (m *NinOptNativeUnion) ClearField4() {
	if m != nil {
		m.xxx_IsField4Set = false
	}
}

func (m *NinOptNativeUnion) SetField5(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField5Set = true
	m.field5 = value
	return nil
}

func (m *NinOptNativeUnion) HasField5() (isSet bool) {
	if m != nil && m.xxx_IsField5Set {
		return true
	}
	return false
}

func (m *NinOptNativeUnion) ClearField5() {
	if m != nil {
		m.xxx_IsField5Set = false
	}
}

func (m *NinOptNativeUnion) SetField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField6Set = true
	m.field6 = value
	return nil
}

func (m *NinOptNativeUnion) HasField6() (isSet bool) {
	if m != nil && m.xxx_IsField6Set {
		return true
	}
	return false
}

func (m *NinOptNativeUnion) ClearField6() {
	if m != nil {
		m.xxx_IsField6Set = false
	}
}

func (m *NinOptNativeUnion) SetField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField13Set = true
	m.field13 = value
	return nil
}

func (m *NinOptNativeUnion) HasField13() (isSet bool) {
	if m != nil && m.xxx_IsField13Set {
		return true
	}
	return false
}

func (m *NinOptNativeUnion) ClearField13() {
	if m != nil {
		m.xxx_IsField13Set = false
	}
}

func (m *NinOptNativeUnion) SetField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField14Set = true
	m.field14 = value
	return nil
}

func (m *NinOptNativeUnion) HasField14() (isSet bool) {
	if m != nil && m.xxx_IsField14Set {
		return true
	}
	return false
}

func (m *NinOptNativeUnion) ClearField14() {
	if m != nil {
		m.xxx_IsField14Set = false
		m.field14 = ""
	}
}

func (m *NinOptNativeUnion) SetField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsField15Set = true
	m.field15 = value
	return nil
}

func (m *NinOptNativeUnion) HasField15() (isSet bool) {
	if m != nil && m.xxx_IsField15Set {
		return true
	}
	return false
}

func (m *NinOptNativeUnion) ClearField15() {
	if m != nil {
		m.xxx_IsField15Set = false
		m.field15 = nil
	}
}

func (m *NinOptNativeUnion) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.ClearField3()
		m.ClearField4()
		m.ClearField5()
		m.ClearField6()
		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type NinOptStructUnion struct {
	xxx_sizeCached   int
	field1           float64
	field2           float32
	field3           *NidOptNative
	field4           *NinOptNative
	field6           uint64
	field7           int32
	field13          bool
	field14          string
	field15          []byte
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
	xxx_IsField2Set  bool
	xxx_IsField3Set  bool
	xxx_IsField4Set  bool
	xxx_IsField6Set  bool
	xxx_IsField7Set  bool
	xxx_IsField13Set bool
	xxx_IsField14Set bool
	xxx_IsField15Set bool
}

func (m *NinOptStructUnion) Reset()      { *m = NinOptStructUnion{} }
func (*NinOptStructUnion) ProtoMessage() {}

func (m *NinOptStructUnion) GetField1() float64 {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return 0
}

func (m *NinOptStructUnion) GetField2() float32 {
	if m != nil && m.xxx_IsField2Set {
		return m.field2
	}
	return 0
}

func (m *NinOptStructUnion) GetField3() *NidOptNative {
	if m != nil && m.xxx_IsField3Set {
		return m.field3
	}
	return nil
}
func (m *NinOptStructUnion) GetField4() *NinOptNative {
	if m != nil && m.xxx_IsField4Set {
		return m.field4
	}
	return nil
}
func (m *NinOptStructUnion) GetField6() uint64 {
	if m != nil && m.xxx_IsField6Set {
		return m.field6
	}
	return 0
}

func (m *NinOptStructUnion) GetField7() int32 {
	if m != nil && m.xxx_IsField7Set {
		return m.field7
	}
	return 0
}

func (m *NinOptStructUnion) GetField13() bool {
	if m != nil && m.xxx_IsField13Set {
		return m.field13
	}
	return false
}

func (m *NinOptStructUnion) GetField14() string {
	if m != nil && m.xxx_IsField14Set {
		return m.field14
	}
	return ""
}

func (m *NinOptStructUnion) GetField15() []byte {
	if m != nil && m.xxx_IsField15Set {
		return m.field15
	}
	return nil
}
func (m *NinOptStructUnion) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinOptStructUnion) SetField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NinOptStructUnion) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NinOptStructUnion) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NinOptStructUnion) SetField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField2Set = true
	m.field2 = value
	return nil
}

func (m *NinOptStructUnion) HasField2() (isSet bool) {
	if m != nil && m.xxx_IsField2Set {
		return true
	}
	return false
}

func (m *NinOptStructUnion) ClearField2() {
	if m != nil {
		m.xxx_IsField2Set = false
	}
}

func (m *NinOptStructUnion) MutateField3() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField3Set {
		m.xxx_IsField3Set = true
		m.field3 = new(NidOptNative)
	}
	return m.field3, nil
}

func (m *NinOptStructUnion) HasField3() (isSet bool) {
	if m != nil && m.xxx_IsField3Set {
		return true
	}
	return false
}

func (m *NinOptStructUnion) ClearField3() {
	if m != nil {
		m.field3.Clear()
		m.xxx_IsField3Set = false

	}
}

func (m *NinOptStructUnion) MutateField4() (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField4Set {
		m.xxx_IsField4Set = true
		m.field4 = new(NinOptNative)
	}
	return m.field4, nil
}

func (m *NinOptStructUnion) HasField4() (isSet bool) {
	if m != nil && m.xxx_IsField4Set {
		return true
	}
	return false
}

func (m *NinOptStructUnion) ClearField4() {
	if m != nil {
		m.field4.Clear()
		m.xxx_IsField4Set = false

	}
}

func (m *NinOptStructUnion) SetField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField6Set = true
	m.field6 = value
	return nil
}

func (m *NinOptStructUnion) HasField6() (isSet bool) {
	if m != nil && m.xxx_IsField6Set {
		return true
	}
	return false
}

func (m *NinOptStructUnion) ClearField6() {
	if m != nil {
		m.xxx_IsField6Set = false
	}
}

func (m *NinOptStructUnion) SetField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField7Set = true
	m.field7 = value
	return nil
}

func (m *NinOptStructUnion) HasField7() (isSet bool) {
	if m != nil && m.xxx_IsField7Set {
		return true
	}
	return false
}

func (m *NinOptStructUnion) ClearField7() {
	if m != nil {
		m.xxx_IsField7Set = false
	}
}

func (m *NinOptStructUnion) SetField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField13Set = true
	m.field13 = value
	return nil
}

func (m *NinOptStructUnion) HasField13() (isSet bool) {
	if m != nil && m.xxx_IsField13Set {
		return true
	}
	return false
}

func (m *NinOptStructUnion) ClearField13() {
	if m != nil {
		m.xxx_IsField13Set = false
	}
}

func (m *NinOptStructUnion) SetField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField14Set = true
	m.field14 = value
	return nil
}

func (m *NinOptStructUnion) HasField14() (isSet bool) {
	if m != nil && m.xxx_IsField14Set {
		return true
	}
	return false
}

func (m *NinOptStructUnion) ClearField14() {
	if m != nil {
		m.xxx_IsField14Set = false
		m.field14 = ""
	}
}

func (m *NinOptStructUnion) SetField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsField15Set = true
	m.field15 = value
	return nil
}

func (m *NinOptStructUnion) HasField15() (isSet bool) {
	if m != nil && m.xxx_IsField15Set {
		return true
	}
	return false
}

func (m *NinOptStructUnion) ClearField15() {
	if m != nil {
		m.xxx_IsField15Set = false
		m.field15 = nil
	}
}

func (m *NinOptStructUnion) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.field3.Clear()
		m.xxx_IsField3Set = false

		m.field4.Clear()
		m.xxx_IsField4Set = false

		m.ClearField6()
		m.ClearField7()
		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type NinEmbeddedStructUnion struct {
	xxx_sizeCached int
	*NidOptNative
	field200              *NinOptNative
	field210              bool
	XXX_unrecognized      []byte
	xxx_IsNidOptNativeSet bool
	xxx_IsField200Set     bool
	xxx_IsField210Set     bool
}

func (m *NinEmbeddedStructUnion) Reset()      { *m = NinEmbeddedStructUnion{} }
func (*NinEmbeddedStructUnion) ProtoMessage() {}

func (m *NinEmbeddedStructUnion) GetField200() *NinOptNative {
	if m != nil && m.xxx_IsField200Set {
		return m.field200
	}
	return nil
}
func (m *NinEmbeddedStructUnion) GetField210() bool {
	if m != nil && m.xxx_IsField210Set {
		return m.field210
	}
	return false
}

func (m *NinEmbeddedStructUnion) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinEmbeddedStructUnion) MutateNidOptNative() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsNidOptNativeSet {
		m.xxx_IsNidOptNativeSet = true
		m.NidOptNative = new(NidOptNative)
	}
	return m.NidOptNative, nil
}

func (m *NinEmbeddedStructUnion) HasNidOptNative() (isSet bool) {
	if m != nil && m.xxx_IsNidOptNativeSet {
		return true
	}
	return false
}

func (m *NinEmbeddedStructUnion) ClearNidOptNative() {
	if m != nil {
		m.NidOptNative.Clear()
		m.xxx_IsNidOptNativeSet = false

	}
}

func (m *NinEmbeddedStructUnion) MutateField200() (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField200Set {
		m.xxx_IsField200Set = true
		m.field200 = new(NinOptNative)
	}
	return m.field200, nil
}

func (m *NinEmbeddedStructUnion) HasField200() (isSet bool) {
	if m != nil && m.xxx_IsField200Set {
		return true
	}
	return false
}

func (m *NinEmbeddedStructUnion) ClearField200() {
	if m != nil {
		m.field200.Clear()
		m.xxx_IsField200Set = false

	}
}

func (m *NinEmbeddedStructUnion) SetField210(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField210Set = true
	m.field210 = value
	return nil
}

func (m *NinEmbeddedStructUnion) HasField210() (isSet bool) {
	if m != nil && m.xxx_IsField210Set {
		return true
	}
	return false
}

func (m *NinEmbeddedStructUnion) ClearField210() {
	if m != nil {
		m.xxx_IsField210Set = false
	}
}

func (m *NinEmbeddedStructUnion) Clear() {
	if m != nil {
		m.NidOptNative.Clear()
		m.xxx_IsNidOptNativeSet = false

		m.field200.Clear()
		m.xxx_IsField200Set = false

		m.ClearField210()
	}
}

type NinNestedStructUnion struct {
	xxx_sizeCached   int
	field1           *NinOptNativeUnion
	field2           *NinOptStructUnion
	field3           *NinEmbeddedStructUnion
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
	xxx_IsField2Set  bool
	xxx_IsField3Set  bool
}

func (m *NinNestedStructUnion) Reset()      { *m = NinNestedStructUnion{} }
func (*NinNestedStructUnion) ProtoMessage() {}

func (m *NinNestedStructUnion) GetField1() *NinOptNativeUnion {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return nil
}
func (m *NinNestedStructUnion) GetField2() *NinOptStructUnion {
	if m != nil && m.xxx_IsField2Set {
		return m.field2
	}
	return nil
}
func (m *NinNestedStructUnion) GetField3() *NinEmbeddedStructUnion {
	if m != nil && m.xxx_IsField3Set {
		return m.field3
	}
	return nil
}
func (m *NinNestedStructUnion) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinNestedStructUnion) MutateField1() (field *NinOptNativeUnion, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField1Set {
		m.xxx_IsField1Set = true
		m.field1 = new(NinOptNativeUnion)
	}
	return m.field1, nil
}

func (m *NinNestedStructUnion) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NinNestedStructUnion) ClearField1() {
	if m != nil {
		m.field1.Clear()
		m.xxx_IsField1Set = false

	}
}

func (m *NinNestedStructUnion) MutateField2() (field *NinOptStructUnion, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField2Set {
		m.xxx_IsField2Set = true
		m.field2 = new(NinOptStructUnion)
	}
	return m.field2, nil
}

func (m *NinNestedStructUnion) HasField2() (isSet bool) {
	if m != nil && m.xxx_IsField2Set {
		return true
	}
	return false
}

func (m *NinNestedStructUnion) ClearField2() {
	if m != nil {
		m.field2.Clear()
		m.xxx_IsField2Set = false

	}
}

func (m *NinNestedStructUnion) MutateField3() (field *NinEmbeddedStructUnion, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsField3Set {
		m.xxx_IsField3Set = true
		m.field3 = new(NinEmbeddedStructUnion)
	}
	return m.field3, nil
}

func (m *NinNestedStructUnion) HasField3() (isSet bool) {
	if m != nil && m.xxx_IsField3Set {
		return true
	}
	return false
}

func (m *NinNestedStructUnion) ClearField3() {
	if m != nil {
		m.field3.Clear()
		m.xxx_IsField3Set = false

	}
}

func (m *NinNestedStructUnion) Clear() {
	if m != nil {
		m.field1.Clear()
		m.xxx_IsField1Set = false

		m.field2.Clear()
		m.xxx_IsField2Set = false

		m.field3.Clear()
		m.xxx_IsField3Set = false

	}
}

type Tree struct {
	xxx_sizeCached   int
	or               *OrBranch
	and              *AndBranch
	leaf             *Leaf
	XXX_unrecognized []byte
	xxx_IsOrSet      bool
	xxx_IsAndSet     bool
	xxx_IsLeafSet    bool
}

func (m *Tree) Reset()      { *m = Tree{} }
func (*Tree) ProtoMessage() {}

func (m *Tree) GetOr() *OrBranch {
	if m != nil && m.xxx_IsOrSet {
		return m.or
	}
	return nil
}
func (m *Tree) GetAnd() *AndBranch {
	if m != nil && m.xxx_IsAndSet {
		return m.and
	}
	return nil
}
func (m *Tree) GetLeaf() *Leaf {
	if m != nil && m.xxx_IsLeafSet {
		return m.leaf
	}
	return nil
}
func (m *Tree) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *Tree) MutateOr() (field *OrBranch, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsOrSet {
		m.xxx_IsOrSet = true
		m.or = new(OrBranch)
	}
	return m.or, nil
}

func (m *Tree) HasOr() (isSet bool) {
	if m != nil && m.xxx_IsOrSet {
		return true
	}
	return false
}

func (m *Tree) ClearOr() {
	if m != nil {
		m.or.Clear()
		m.xxx_IsOrSet = false

	}
}

func (m *Tree) MutateAnd() (field *AndBranch, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsAndSet {
		m.xxx_IsAndSet = true
		m.and = new(AndBranch)
	}
	return m.and, nil
}

func (m *Tree) HasAnd() (isSet bool) {
	if m != nil && m.xxx_IsAndSet {
		return true
	}
	return false
}

func (m *Tree) ClearAnd() {
	if m != nil {
		m.and.Clear()
		m.xxx_IsAndSet = false

	}
}

func (m *Tree) MutateLeaf() (field *Leaf, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsLeafSet {
		m.xxx_IsLeafSet = true
		m.leaf = new(Leaf)
	}
	return m.leaf, nil
}

func (m *Tree) HasLeaf() (isSet bool) {
	if m != nil && m.xxx_IsLeafSet {
		return true
	}
	return false
}

func (m *Tree) ClearLeaf() {
	if m != nil {
		m.leaf.Clear()
		m.xxx_IsLeafSet = false

	}
}

func (m *Tree) Clear() {
	if m != nil {
		m.or.Clear()
		m.xxx_IsOrSet = false

		m.and.Clear()
		m.xxx_IsAndSet = false

		m.leaf.Clear()
		m.xxx_IsLeafSet = false

	}
}

type OrBranch struct {
	xxx_sizeCached   int
	left             *Tree
	right            *Tree
	XXX_unrecognized []byte
	xxx_IsLeftSet    bool
	xxx_IsRightSet   bool
}

func (m *OrBranch) Reset()      { *m = OrBranch{} }
func (*OrBranch) ProtoMessage() {}

func (m *OrBranch) GetLeft() *Tree {
	if m != nil && m.xxx_IsLeftSet {
		return m.left
	}
	return nil
}
func (m *OrBranch) GetRight() *Tree {
	if m != nil && m.xxx_IsRightSet {
		return m.right
	}
	return nil
}
func (m *OrBranch) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *OrBranch) MutateLeft() (field *Tree, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsLeftSet {
		m.xxx_IsLeftSet = true
		m.left = new(Tree)
	}
	return m.left, nil
}

func (m *OrBranch) HasLeft() (isSet bool) {
	if m != nil && m.xxx_IsLeftSet {
		return true
	}
	return false
}

func (m *OrBranch) ClearLeft() {
	if m != nil {
		m.left.Clear()
		m.xxx_IsLeftSet = false

	}
}

func (m *OrBranch) MutateRight() (field *Tree, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsRightSet {
		m.xxx_IsRightSet = true
		m.right = new(Tree)
	}
	return m.right, nil
}

func (m *OrBranch) HasRight() (isSet bool) {
	if m != nil && m.xxx_IsRightSet {
		return true
	}
	return false
}

func (m *OrBranch) ClearRight() {
	if m != nil {
		m.right.Clear()
		m.xxx_IsRightSet = false

	}
}

func (m *OrBranch) Clear() {
	if m != nil {
		m.left.Clear()
		m.xxx_IsLeftSet = false

		m.right.Clear()
		m.xxx_IsRightSet = false

	}
}

type AndBranch struct {
	xxx_sizeCached   int
	left             *Tree
	right            *Tree
	XXX_unrecognized []byte
	xxx_IsLeftSet    bool
	xxx_IsRightSet   bool
}

func (m *AndBranch) Reset()      { *m = AndBranch{} }
func (*AndBranch) ProtoMessage() {}

func (m *AndBranch) GetLeft() *Tree {
	if m != nil && m.xxx_IsLeftSet {
		return m.left
	}
	return nil
}
func (m *AndBranch) GetRight() *Tree {
	if m != nil && m.xxx_IsRightSet {
		return m.right
	}
	return nil
}
func (m *AndBranch) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *AndBranch) MutateLeft() (field *Tree, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsLeftSet {
		m.xxx_IsLeftSet = true
		m.left = new(Tree)
	}
	return m.left, nil
}

func (m *AndBranch) HasLeft() (isSet bool) {
	if m != nil && m.xxx_IsLeftSet {
		return true
	}
	return false
}

func (m *AndBranch) ClearLeft() {
	if m != nil {
		m.left.Clear()
		m.xxx_IsLeftSet = false

	}
}

func (m *AndBranch) MutateRight() (field *Tree, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsRightSet {
		m.xxx_IsRightSet = true
		m.right = new(Tree)
	}
	return m.right, nil
}

func (m *AndBranch) HasRight() (isSet bool) {
	if m != nil && m.xxx_IsRightSet {
		return true
	}
	return false
}

func (m *AndBranch) ClearRight() {
	if m != nil {
		m.right.Clear()
		m.xxx_IsRightSet = false

	}
}

func (m *AndBranch) Clear() {
	if m != nil {
		m.left.Clear()
		m.xxx_IsLeftSet = false

		m.right.Clear()
		m.xxx_IsRightSet = false

	}
}

type Leaf struct {
	xxx_sizeCached    int
	value             int64
	strValue          string
	XXX_unrecognized  []byte
	xxx_IsValueSet    bool
	xxx_IsStrValueSet bool
}

func (m *Leaf) Reset()      { *m = Leaf{} }
func (*Leaf) ProtoMessage() {}

func (m *Leaf) GetValue() int64 {
	if m != nil && m.xxx_IsValueSet {
		return m.value
	}
	return 0
}

func (m *Leaf) GetStrValue() string {
	if m != nil && m.xxx_IsStrValueSet {
		return m.strValue
	}
	return ""
}

func (m *Leaf) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *Leaf) SetValue(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsValueSet = true
	m.value = value
	return nil
}

func (m *Leaf) HasValue() (isSet bool) {
	if m != nil && m.xxx_IsValueSet {
		return true
	}
	return false
}

func (m *Leaf) ClearValue() {
	if m != nil {
		m.xxx_IsValueSet = false
	}
}

func (m *Leaf) SetStrValue(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsStrValueSet = true
	m.strValue = value
	return nil
}

func (m *Leaf) HasStrValue() (isSet bool) {
	if m != nil && m.xxx_IsStrValueSet {
		return true
	}
	return false
}

func (m *Leaf) ClearStrValue() {
	if m != nil {
		m.xxx_IsStrValueSet = false
		m.strValue = ""
	}
}

func (m *Leaf) Clear() {
	if m != nil {
		m.ClearValue()
		m.ClearStrValue()
	}
}

type DeepTree struct {
	xxx_sizeCached   int
	down             *ADeepBranch
	and              *AndDeepBranch
	leaf             *DeepLeaf
	XXX_unrecognized []byte
	xxx_IsDownSet    bool
	xxx_IsAndSet     bool
	xxx_IsLeafSet    bool
}

func (m *DeepTree) Reset()      { *m = DeepTree{} }
func (*DeepTree) ProtoMessage() {}

func (m *DeepTree) GetDown() *ADeepBranch {
	if m != nil && m.xxx_IsDownSet {
		return m.down
	}
	return nil
}
func (m *DeepTree) GetAnd() *AndDeepBranch {
	if m != nil && m.xxx_IsAndSet {
		return m.and
	}
	return nil
}
func (m *DeepTree) GetLeaf() *DeepLeaf {
	if m != nil && m.xxx_IsLeafSet {
		return m.leaf
	}
	return nil
}
func (m *DeepTree) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *DeepTree) MutateDown() (field *ADeepBranch, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsDownSet {
		m.xxx_IsDownSet = true
		m.down = new(ADeepBranch)
	}
	return m.down, nil
}

func (m *DeepTree) HasDown() (isSet bool) {
	if m != nil && m.xxx_IsDownSet {
		return true
	}
	return false
}

func (m *DeepTree) ClearDown() {
	if m != nil {
		m.down.Clear()
		m.xxx_IsDownSet = false

	}
}

func (m *DeepTree) MutateAnd() (field *AndDeepBranch, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsAndSet {
		m.xxx_IsAndSet = true
		m.and = new(AndDeepBranch)
	}
	return m.and, nil
}

func (m *DeepTree) HasAnd() (isSet bool) {
	if m != nil && m.xxx_IsAndSet {
		return true
	}
	return false
}

func (m *DeepTree) ClearAnd() {
	if m != nil {
		m.and.Clear()
		m.xxx_IsAndSet = false

	}
}

func (m *DeepTree) MutateLeaf() (field *DeepLeaf, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsLeafSet {
		m.xxx_IsLeafSet = true
		m.leaf = new(DeepLeaf)
	}
	return m.leaf, nil
}

func (m *DeepTree) HasLeaf() (isSet bool) {
	if m != nil && m.xxx_IsLeafSet {
		return true
	}
	return false
}

func (m *DeepTree) ClearLeaf() {
	if m != nil {
		m.leaf.Clear()
		m.xxx_IsLeafSet = false

	}
}

func (m *DeepTree) Clear() {
	if m != nil {
		m.down.Clear()
		m.xxx_IsDownSet = false

		m.and.Clear()
		m.xxx_IsAndSet = false

		m.leaf.Clear()
		m.xxx_IsLeafSet = false

	}
}

type ADeepBranch struct {
	xxx_sizeCached   int
	down             *DeepTree
	XXX_unrecognized []byte
	xxx_IsDownSet    bool
}

func (m *ADeepBranch) Reset()      { *m = ADeepBranch{} }
func (*ADeepBranch) ProtoMessage() {}

func (m *ADeepBranch) GetDown() *DeepTree {
	if m != nil && m.xxx_IsDownSet {
		return m.down
	}
	return nil
}
func (m *ADeepBranch) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *ADeepBranch) MutateDown() (field *DeepTree, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsDownSet {
		m.xxx_IsDownSet = true
		m.down = new(DeepTree)
	}
	return m.down, nil
}

func (m *ADeepBranch) HasDown() (isSet bool) {
	if m != nil && m.xxx_IsDownSet {
		return true
	}
	return false
}

func (m *ADeepBranch) ClearDown() {
	if m != nil {
		m.down.Clear()
		m.xxx_IsDownSet = false

	}
}

func (m *ADeepBranch) Clear() {
	if m != nil {
		m.down.Clear()
		m.xxx_IsDownSet = false

	}
}

type AndDeepBranch struct {
	xxx_sizeCached   int
	left             *DeepTree
	right            *DeepTree
	XXX_unrecognized []byte
	xxx_IsLeftSet    bool
	xxx_IsRightSet   bool
}

func (m *AndDeepBranch) Reset()      { *m = AndDeepBranch{} }
func (*AndDeepBranch) ProtoMessage() {}

func (m *AndDeepBranch) GetLeft() *DeepTree {
	if m != nil && m.xxx_IsLeftSet {
		return m.left
	}
	return nil
}
func (m *AndDeepBranch) GetRight() *DeepTree {
	if m != nil && m.xxx_IsRightSet {
		return m.right
	}
	return nil
}
func (m *AndDeepBranch) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *AndDeepBranch) MutateLeft() (field *DeepTree, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsLeftSet {
		m.xxx_IsLeftSet = true
		m.left = new(DeepTree)
	}
	return m.left, nil
}

func (m *AndDeepBranch) HasLeft() (isSet bool) {
	if m != nil && m.xxx_IsLeftSet {
		return true
	}
	return false
}

func (m *AndDeepBranch) ClearLeft() {
	if m != nil {
		m.left.Clear()
		m.xxx_IsLeftSet = false

	}
}

func (m *AndDeepBranch) MutateRight() (field *DeepTree, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsRightSet {
		m.xxx_IsRightSet = true
		m.right = new(DeepTree)
	}
	return m.right, nil
}

func (m *AndDeepBranch) HasRight() (isSet bool) {
	if m != nil && m.xxx_IsRightSet {
		return true
	}
	return false
}

func (m *AndDeepBranch) ClearRight() {
	if m != nil {
		m.right.Clear()
		m.xxx_IsRightSet = false

	}
}

func (m *AndDeepBranch) Clear() {
	if m != nil {
		m.left.Clear()
		m.xxx_IsLeftSet = false

		m.right.Clear()
		m.xxx_IsRightSet = false

	}
}

type DeepLeaf struct {
	xxx_sizeCached   int
	tree             *Tree
	XXX_unrecognized []byte
	xxx_IsTreeSet    bool
}

func (m *DeepLeaf) Reset()      { *m = DeepLeaf{} }
func (*DeepLeaf) ProtoMessage() {}

func (m *DeepLeaf) GetTree() *Tree {
	if m != nil && m.xxx_IsTreeSet {
		return m.tree
	}
	return nil
}
func (m *DeepLeaf) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *DeepLeaf) MutateTree() (field *Tree, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsTreeSet {
		m.xxx_IsTreeSet = true
		m.tree = new(Tree)
	}
	return m.tree, nil
}

func (m *DeepLeaf) HasTree() (isSet bool) {
	if m != nil && m.xxx_IsTreeSet {
		return true
	}
	return false
}

func (m *DeepLeaf) ClearTree() {
	if m != nil {
		m.tree.Clear()
		m.xxx_IsTreeSet = false

	}
}

func (m *DeepLeaf) Clear() {
	if m != nil {
		m.tree.Clear()
		m.xxx_IsTreeSet = false

	}
}

type Nil struct {
	xxx_sizeCached   int
	XXX_unrecognized []byte
}

func (m *Nil) Reset()      { *m = Nil{} }
func (*Nil) ProtoMessage() {}

func (m *Nil) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *Nil) Clear() {
	if m != nil {
	}
}

type NidOptEnum struct {
	xxx_sizeCached   int
	field1           TheTestEnum
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
}

func (m *NidOptEnum) Reset()      { *m = NidOptEnum{} }
func (*NidOptEnum) ProtoMessage() {}

func (m *NidOptEnum) GetField1() TheTestEnum {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return A
}

func (m *NidOptEnum) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidOptEnum) SetField1(value TheTestEnum) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NidOptEnum) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NidOptEnum) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NidOptEnum) Clear() {
	if m != nil {
		m.ClearField1()
	}
}

type NinOptEnum struct {
	xxx_sizeCached   int
	field1           TheTestEnum
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
}

func (m *NinOptEnum) Reset()      { *m = NinOptEnum{} }
func (*NinOptEnum) ProtoMessage() {}

func (m *NinOptEnum) GetField1() TheTestEnum {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return A
}

func (m *NinOptEnum) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinOptEnum) SetField1(value TheTestEnum) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NinOptEnum) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NinOptEnum) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NinOptEnum) Clear() {
	if m != nil {
		m.ClearField1()
	}
}

type NidRepEnum struct {
	xxx_sizeCached   int
	field1           []TheTestEnum
	XXX_unrecognized []byte
	xxx_LenField1    int
}

func (m *NidRepEnum) Reset()      { *m = NidRepEnum{} }
func (*NidRepEnum) ProtoMessage() {}

func (m *NidRepEnum) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NidRepEnum) AddField1(value TheTestEnum) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field1) <= m.xxx_LenField1 {
		newCapacity := 0
		if len(m.field1) == 0 {
			newCapacity = 8
		} else if len(m.field1) < 1000000 {
			newCapacity = m.xxx_LenField1 * 2
		} else {
			newCapacity = m.xxx_LenField1 + 1000000
		}
		t := make([]TheTestEnum, newCapacity, newCapacity)
		copy(t, m.field1)
		m.field1 = t
	}
	m.field1[m.xxx_LenField1] = value
	m.xxx_LenField1 += 1
	return nil
}

func (m *NidRepEnum) SetField1(value TheTestEnum, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return errors.New("Index is out of bounds")
	}
	m.field1[index] = value
	return nil
}

func (m *NidRepEnum) Field1Size() (size int) {
	if m != nil {
		return m.xxx_LenField1
	}
	return 0
}

func (m *NidRepEnum) ClearField1() {
	if m != nil {
		m.xxx_LenField1 = 0
	}
}

func (m *NidRepEnum) GetField1(index int) (field TheTestEnum, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field1[index], nil
}

func (m *NidRepEnum) Clear() {
	if m != nil {
		m.ClearField1()
	}
}

type NinRepEnum struct {
	xxx_sizeCached   int
	field1           []TheTestEnum
	XXX_unrecognized []byte
	xxx_LenField1    int
}

func (m *NinRepEnum) Reset()      { *m = NinRepEnum{} }
func (*NinRepEnum) ProtoMessage() {}

func (m *NinRepEnum) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinRepEnum) AddField1(value TheTestEnum) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.field1) <= m.xxx_LenField1 {
		newCapacity := 0
		if len(m.field1) == 0 {
			newCapacity = 8
		} else if len(m.field1) < 1000000 {
			newCapacity = m.xxx_LenField1 * 2
		} else {
			newCapacity = m.xxx_LenField1 + 1000000
		}
		t := make([]TheTestEnum, newCapacity, newCapacity)
		copy(t, m.field1)
		m.field1 = t
	}
	m.field1[m.xxx_LenField1] = value
	m.xxx_LenField1 += 1
	return nil
}

func (m *NinRepEnum) SetField1(value TheTestEnum, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return errors.New("Index is out of bounds")
	}
	m.field1[index] = value
	return nil
}

func (m *NinRepEnum) Field1Size() (size int) {
	if m != nil {
		return m.xxx_LenField1
	}
	return 0
}

func (m *NinRepEnum) ClearField1() {
	if m != nil {
		m.xxx_LenField1 = 0
	}
}

func (m *NinRepEnum) GetField1(index int) (field TheTestEnum, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenField1 {
		return 0, errors.New("Index is out of bounds")
	}
	return m.field1[index], nil
}

func (m *NinRepEnum) Clear() {
	if m != nil {
		m.ClearField1()
	}
}

type NinOptEnumDefault struct {
	xxx_sizeCached   int
	field1           TheTestEnum
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
}

func (m *NinOptEnumDefault) Reset()      { *m = NinOptEnumDefault{} }
func (*NinOptEnumDefault) ProtoMessage() {}

const Default_NinOptEnumDefault_Field1 TheTestEnum = C

func (m *NinOptEnumDefault) GetField1() TheTestEnum {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return Default_NinOptEnumDefault_Field1
}

func (m *NinOptEnumDefault) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinOptEnumDefault) SetField1(value TheTestEnum) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NinOptEnumDefault) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NinOptEnumDefault) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NinOptEnumDefault) Clear() {
	if m != nil {
		m.ClearField1()
	}
}

type AnotherNinOptEnum struct {
	xxx_sizeCached   int
	field1           AnotherTestEnum
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
}

func (m *AnotherNinOptEnum) Reset()      { *m = AnotherNinOptEnum{} }
func (*AnotherNinOptEnum) ProtoMessage() {}

func (m *AnotherNinOptEnum) GetField1() AnotherTestEnum {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return D
}

func (m *AnotherNinOptEnum) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *AnotherNinOptEnum) SetField1(value AnotherTestEnum) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *AnotherNinOptEnum) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *AnotherNinOptEnum) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *AnotherNinOptEnum) Clear() {
	if m != nil {
		m.ClearField1()
	}
}

type AnotherNinOptEnumDefault struct {
	xxx_sizeCached   int
	field1           AnotherTestEnum
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
}

func (m *AnotherNinOptEnumDefault) Reset()      { *m = AnotherNinOptEnumDefault{} }
func (*AnotherNinOptEnumDefault) ProtoMessage() {}

const Default_AnotherNinOptEnumDefault_Field1 AnotherTestEnum = E

func (m *AnotherNinOptEnumDefault) GetField1() AnotherTestEnum {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return Default_AnotherNinOptEnumDefault_Field1
}

func (m *AnotherNinOptEnumDefault) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *AnotherNinOptEnumDefault) SetField1(value AnotherTestEnum) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *AnotherNinOptEnumDefault) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *AnotherNinOptEnumDefault) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *AnotherNinOptEnumDefault) Clear() {
	if m != nil {
		m.ClearField1()
	}
}

type Timer struct {
	xxx_sizeCached   int
	time1            int64
	time2            int64
	data             []byte
	XXX_unrecognized []byte
	xxx_IsTime1Set   bool
	xxx_IsTime2Set   bool
	xxx_IsDataSet    bool
}

func (m *Timer) Reset()      { *m = Timer{} }
func (*Timer) ProtoMessage() {}

func (m *Timer) GetTime1() int64 {
	if m != nil && m.xxx_IsTime1Set {
		return m.time1
	}
	return 0
}

func (m *Timer) GetTime2() int64 {
	if m != nil && m.xxx_IsTime2Set {
		return m.time2
	}
	return 0
}

func (m *Timer) GetData() []byte {
	if m != nil && m.xxx_IsDataSet {
		return m.data
	}
	return nil
}
func (m *Timer) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *Timer) SetTime1(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsTime1Set = true
	m.time1 = value
	return nil
}

func (m *Timer) HasTime1() (isSet bool) {
	if m != nil && m.xxx_IsTime1Set {
		return true
	}
	return false
}

func (m *Timer) ClearTime1() {
	if m != nil {
		m.xxx_IsTime1Set = false
	}
}

func (m *Timer) SetTime2(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsTime2Set = true
	m.time2 = value
	return nil
}

func (m *Timer) HasTime2() (isSet bool) {
	if m != nil && m.xxx_IsTime2Set {
		return true
	}
	return false
}

func (m *Timer) ClearTime2() {
	if m != nil {
		m.xxx_IsTime2Set = false
	}
}

func (m *Timer) SetData(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsDataSet = true
	m.data = value
	return nil
}

func (m *Timer) HasData() (isSet bool) {
	if m != nil && m.xxx_IsDataSet {
		return true
	}
	return false
}

func (m *Timer) ClearData() {
	if m != nil {
		m.xxx_IsDataSet = false
		m.data = nil
	}
}

func (m *Timer) Clear() {
	if m != nil {
		m.ClearTime1()
		m.ClearTime2()
		m.ClearData()
	}
}

type MyExtendable struct {
	xxx_sizeCached   int
	field1           int64
	XXX_extensions   map[int32]proto.Extension
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
}

func (m *MyExtendable) Reset()      { *m = MyExtendable{} }
func (*MyExtendable) ProtoMessage() {}

var extRange_MyExtendable = []proto.ExtensionRange{
	{100, 199},
}

func (m *MyExtendable) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_MyExtendable
}
func (m *MyExtendable) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *MyExtendable) GetField1() int64 {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return 0
}

func (m *MyExtendable) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *MyExtendable) SetField1(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *MyExtendable) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *MyExtendable) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *MyExtendable) Clear() {
	if m != nil {
		m.ClearField1()
	}
}

type OtherExtenable struct {
	xxx_sizeCached   int
	field2           int64
	field13          int64
	m                *MyExtendable
	XXX_extensions   map[int32]proto.Extension
	XXX_unrecognized []byte
	xxx_IsField2Set  bool
	xxx_IsField13Set bool
	xxx_IsMSet       bool
}

func (m *OtherExtenable) Reset()      { *m = OtherExtenable{} }
func (*OtherExtenable) ProtoMessage() {}

var extRange_OtherExtenable = []proto.ExtensionRange{
	{14, 16},
	{10, 12},
}

func (m *OtherExtenable) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_OtherExtenable
}
func (m *OtherExtenable) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *OtherExtenable) GetField2() int64 {
	if m != nil && m.xxx_IsField2Set {
		return m.field2
	}
	return 0
}

func (m *OtherExtenable) GetField13() int64 {
	if m != nil && m.xxx_IsField13Set {
		return m.field13
	}
	return 0
}

func (m *OtherExtenable) GetM() *MyExtendable {
	if m != nil && m.xxx_IsMSet {
		return m.m
	}
	return nil
}
func (m *OtherExtenable) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *OtherExtenable) SetField2(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField2Set = true
	m.field2 = value
	return nil
}

func (m *OtherExtenable) HasField2() (isSet bool) {
	if m != nil && m.xxx_IsField2Set {
		return true
	}
	return false
}

func (m *OtherExtenable) ClearField2() {
	if m != nil {
		m.xxx_IsField2Set = false
	}
}

func (m *OtherExtenable) SetField13(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField13Set = true
	m.field13 = value
	return nil
}

func (m *OtherExtenable) HasField13() (isSet bool) {
	if m != nil && m.xxx_IsField13Set {
		return true
	}
	return false
}

func (m *OtherExtenable) ClearField13() {
	if m != nil {
		m.xxx_IsField13Set = false
	}
}

func (m *OtherExtenable) MutateM() (field *MyExtendable, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsMSet {
		m.xxx_IsMSet = true
		m.m = new(MyExtendable)
	}
	return m.m, nil
}

func (m *OtherExtenable) HasM() (isSet bool) {
	if m != nil && m.xxx_IsMSet {
		return true
	}
	return false
}

func (m *OtherExtenable) ClearM() {
	if m != nil {
		m.m.Clear()
		m.xxx_IsMSet = false

	}
}

func (m *OtherExtenable) Clear() {
	if m != nil {
		m.ClearField2()
		m.ClearField13()
		m.m.Clear()
		m.xxx_IsMSet = false

	}
}

type NestedDefinition struct {
	xxx_sizeCached     int
	field1             int64
	enumField          NestedDefinition_NestedEnum
	nNM                *NestedDefinition_NestedMessage_NestedNestedMsg
	nM                 *NestedDefinition_NestedMessage
	XXX_unrecognized   []byte
	xxx_IsField1Set    bool
	xxx_IsEnumFieldSet bool
	xxx_IsNNMSet       bool
	xxx_IsNMSet        bool
}

func (m *NestedDefinition) Reset()      { *m = NestedDefinition{} }
func (*NestedDefinition) ProtoMessage() {}

func (m *NestedDefinition) GetField1() int64 {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return 0
}

func (m *NestedDefinition) GetEnumField() NestedDefinition_NestedEnum {
	if m != nil && m.xxx_IsEnumFieldSet {
		return m.enumField
	}
	return TYPE_NESTED
}

func (m *NestedDefinition) GetNNM() *NestedDefinition_NestedMessage_NestedNestedMsg {
	if m != nil && m.xxx_IsNNMSet {
		return m.nNM
	}
	return nil
}
func (m *NestedDefinition) GetNM() *NestedDefinition_NestedMessage {
	if m != nil && m.xxx_IsNMSet {
		return m.nM
	}
	return nil
}
func (m *NestedDefinition) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NestedDefinition) SetField1(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NestedDefinition) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NestedDefinition) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NestedDefinition) SetEnumField(value NestedDefinition_NestedEnum) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsEnumFieldSet = true
	m.enumField = value
	return nil
}

func (m *NestedDefinition) HasEnumField() (isSet bool) {
	if m != nil && m.xxx_IsEnumFieldSet {
		return true
	}
	return false
}

func (m *NestedDefinition) ClearEnumField() {
	if m != nil {
		m.xxx_IsEnumFieldSet = false
	}
}

func (m *NestedDefinition) MutateNNM() (field *NestedDefinition_NestedMessage_NestedNestedMsg, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsNNMSet {
		m.xxx_IsNNMSet = true
		m.nNM = new(NestedDefinition_NestedMessage_NestedNestedMsg)
	}
	return m.nNM, nil
}

func (m *NestedDefinition) HasNNM() (isSet bool) {
	if m != nil && m.xxx_IsNNMSet {
		return true
	}
	return false
}

func (m *NestedDefinition) ClearNNM() {
	if m != nil {
		m.nNM.Clear()
		m.xxx_IsNNMSet = false

	}
}

func (m *NestedDefinition) MutateNM() (field *NestedDefinition_NestedMessage, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsNMSet {
		m.xxx_IsNMSet = true
		m.nM = new(NestedDefinition_NestedMessage)
	}
	return m.nM, nil
}

func (m *NestedDefinition) HasNM() (isSet bool) {
	if m != nil && m.xxx_IsNMSet {
		return true
	}
	return false
}

func (m *NestedDefinition) ClearNM() {
	if m != nil {
		m.nM.Clear()
		m.xxx_IsNMSet = false

	}
}

func (m *NestedDefinition) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearEnumField()
		m.nNM.Clear()
		m.xxx_IsNNMSet = false

		m.nM.Clear()
		m.xxx_IsNMSet = false

	}
}

type NestedDefinition_NestedMessage struct {
	xxx_sizeCached        int
	nestedField1          uint64
	nNM                   *NestedDefinition_NestedMessage_NestedNestedMsg
	XXX_unrecognized      []byte
	xxx_IsNestedField1Set bool
	xxx_IsNNMSet          bool
}

func (m *NestedDefinition_NestedMessage) Reset()      { *m = NestedDefinition_NestedMessage{} }
func (*NestedDefinition_NestedMessage) ProtoMessage() {}

func (m *NestedDefinition_NestedMessage) GetNestedField1() uint64 {
	if m != nil && m.xxx_IsNestedField1Set {
		return m.nestedField1
	}
	return 0
}

func (m *NestedDefinition_NestedMessage) GetNNM() *NestedDefinition_NestedMessage_NestedNestedMsg {
	if m != nil && m.xxx_IsNNMSet {
		return m.nNM
	}
	return nil
}
func (m *NestedDefinition_NestedMessage) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NestedDefinition_NestedMessage) SetNestedField1(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsNestedField1Set = true
	m.nestedField1 = value
	return nil
}

func (m *NestedDefinition_NestedMessage) HasNestedField1() (isSet bool) {
	if m != nil && m.xxx_IsNestedField1Set {
		return true
	}
	return false
}

func (m *NestedDefinition_NestedMessage) ClearNestedField1() {
	if m != nil {
		m.xxx_IsNestedField1Set = false
	}
}

func (m *NestedDefinition_NestedMessage) MutateNNM() (field *NestedDefinition_NestedMessage_NestedNestedMsg, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsNNMSet {
		m.xxx_IsNNMSet = true
		m.nNM = new(NestedDefinition_NestedMessage_NestedNestedMsg)
	}
	return m.nNM, nil
}

func (m *NestedDefinition_NestedMessage) HasNNM() (isSet bool) {
	if m != nil && m.xxx_IsNNMSet {
		return true
	}
	return false
}

func (m *NestedDefinition_NestedMessage) ClearNNM() {
	if m != nil {
		m.nNM.Clear()
		m.xxx_IsNNMSet = false

	}
}

func (m *NestedDefinition_NestedMessage) Clear() {
	if m != nil {
		m.ClearNestedField1()
		m.nNM.Clear()
		m.xxx_IsNNMSet = false

	}
}

type NestedDefinition_NestedMessage_NestedNestedMsg struct {
	xxx_sizeCached              int
	nestedNestedField1          string
	XXX_unrecognized            []byte
	xxx_IsNestedNestedField1Set bool
}

func (m *NestedDefinition_NestedMessage_NestedNestedMsg) Reset() {
	*m = NestedDefinition_NestedMessage_NestedNestedMsg{}
}
func (*NestedDefinition_NestedMessage_NestedNestedMsg) ProtoMessage() {}

func (m *NestedDefinition_NestedMessage_NestedNestedMsg) GetNestedNestedField1() string {
	if m != nil && m.xxx_IsNestedNestedField1Set {
		return m.nestedNestedField1
	}
	return ""
}

func (m *NestedDefinition_NestedMessage_NestedNestedMsg) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NestedDefinition_NestedMessage_NestedNestedMsg) SetNestedNestedField1(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsNestedNestedField1Set = true
	m.nestedNestedField1 = value
	return nil
}

func (m *NestedDefinition_NestedMessage_NestedNestedMsg) HasNestedNestedField1() (isSet bool) {
	if m != nil && m.xxx_IsNestedNestedField1Set {
		return true
	}
	return false
}

func (m *NestedDefinition_NestedMessage_NestedNestedMsg) ClearNestedNestedField1() {
	if m != nil {
		m.xxx_IsNestedNestedField1Set = false
		m.nestedNestedField1 = ""
	}
}

func (m *NestedDefinition_NestedMessage_NestedNestedMsg) Clear() {
	if m != nil {
		m.ClearNestedNestedField1()
	}
}

type NestedScope struct {
	xxx_sizeCached   int
	a                *NestedDefinition_NestedMessage_NestedNestedMsg
	b                NestedDefinition_NestedEnum
	c                *NestedDefinition_NestedMessage
	XXX_unrecognized []byte
	xxx_IsASet       bool
	xxx_IsBSet       bool
	xxx_IsCSet       bool
}

func (m *NestedScope) Reset()      { *m = NestedScope{} }
func (*NestedScope) ProtoMessage() {}

func (m *NestedScope) GetA() *NestedDefinition_NestedMessage_NestedNestedMsg {
	if m != nil && m.xxx_IsASet {
		return m.a
	}
	return nil
}
func (m *NestedScope) GetB() NestedDefinition_NestedEnum {
	if m != nil && m.xxx_IsBSet {
		return m.b
	}
	return TYPE_NESTED
}

func (m *NestedScope) GetC() *NestedDefinition_NestedMessage {
	if m != nil && m.xxx_IsCSet {
		return m.c
	}
	return nil
}
func (m *NestedScope) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NestedScope) MutateA() (field *NestedDefinition_NestedMessage_NestedNestedMsg, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsASet {
		m.xxx_IsASet = true
		m.a = new(NestedDefinition_NestedMessage_NestedNestedMsg)
	}
	return m.a, nil
}

func (m *NestedScope) HasA() (isSet bool) {
	if m != nil && m.xxx_IsASet {
		return true
	}
	return false
}

func (m *NestedScope) ClearA() {
	if m != nil {
		m.a.Clear()
		m.xxx_IsASet = false

	}
}

func (m *NestedScope) SetB(value NestedDefinition_NestedEnum) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsBSet = true
	m.b = value
	return nil
}

func (m *NestedScope) HasB() (isSet bool) {
	if m != nil && m.xxx_IsBSet {
		return true
	}
	return false
}

func (m *NestedScope) ClearB() {
	if m != nil {
		m.xxx_IsBSet = false
	}
}

func (m *NestedScope) MutateC() (field *NestedDefinition_NestedMessage, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsCSet {
		m.xxx_IsCSet = true
		m.c = new(NestedDefinition_NestedMessage)
	}
	return m.c, nil
}

func (m *NestedScope) HasC() (isSet bool) {
	if m != nil && m.xxx_IsCSet {
		return true
	}
	return false
}

func (m *NestedScope) ClearC() {
	if m != nil {
		m.c.Clear()
		m.xxx_IsCSet = false

	}
}

func (m *NestedScope) Clear() {
	if m != nil {
		m.a.Clear()
		m.xxx_IsASet = false

		m.ClearB()
		m.c.Clear()
		m.xxx_IsCSet = false

	}
}

type NinOptNativeDefault struct {
	xxx_sizeCached   int
	field1           float64
	field2           float32
	field3           int32
	field4           int64
	field5           uint32
	field6           uint64
	field7           int32
	field8           int64
	field9           uint32
	field10          int32
	field11          uint64
	field12          int64
	field13          bool
	field14          string
	field15          []byte
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
	xxx_IsField2Set  bool
	xxx_IsField3Set  bool
	xxx_IsField4Set  bool
	xxx_IsField5Set  bool
	xxx_IsField6Set  bool
	xxx_IsField7Set  bool
	xxx_IsField8Set  bool
	xxx_IsField9Set  bool
	xxx_IsField10Set bool
	xxx_IsField11Set bool
	xxx_IsField12Set bool
	xxx_IsField13Set bool
	xxx_IsField14Set bool
	xxx_IsField15Set bool
}

func (m *NinOptNativeDefault) Reset()      { *m = NinOptNativeDefault{} }
func (*NinOptNativeDefault) ProtoMessage() {}

const Default_NinOptNativeDefault_Field1 float64 = 1234.1234
const Default_NinOptNativeDefault_Field2 float32 = 1234.1234
const Default_NinOptNativeDefault_Field3 int32 = 1234
const Default_NinOptNativeDefault_Field4 int64 = 1234
const Default_NinOptNativeDefault_Field5 uint32 = 1234
const Default_NinOptNativeDefault_Field6 uint64 = 1234
const Default_NinOptNativeDefault_Field7 int32 = 1234
const Default_NinOptNativeDefault_Field8 int64 = 1234
const Default_NinOptNativeDefault_Field9 uint32 = 1234
const Default_NinOptNativeDefault_Field10 int32 = 1234
const Default_NinOptNativeDefault_Field11 uint64 = 1234
const Default_NinOptNativeDefault_Field12 int64 = 1234
const Default_NinOptNativeDefault_Field13 bool = true
const Default_NinOptNativeDefault_Field14 string = "1234"

func (m *NinOptNativeDefault) GetField1() float64 {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return Default_NinOptNativeDefault_Field1
}

func (m *NinOptNativeDefault) GetField2() float32 {
	if m != nil && m.xxx_IsField2Set {
		return m.field2
	}
	return Default_NinOptNativeDefault_Field2
}

func (m *NinOptNativeDefault) GetField3() int32 {
	if m != nil && m.xxx_IsField3Set {
		return m.field3
	}
	return Default_NinOptNativeDefault_Field3
}

func (m *NinOptNativeDefault) GetField4() int64 {
	if m != nil && m.xxx_IsField4Set {
		return m.field4
	}
	return Default_NinOptNativeDefault_Field4
}

func (m *NinOptNativeDefault) GetField5() uint32 {
	if m != nil && m.xxx_IsField5Set {
		return m.field5
	}
	return Default_NinOptNativeDefault_Field5
}

func (m *NinOptNativeDefault) GetField6() uint64 {
	if m != nil && m.xxx_IsField6Set {
		return m.field6
	}
	return Default_NinOptNativeDefault_Field6
}

func (m *NinOptNativeDefault) GetField7() int32 {
	if m != nil && m.xxx_IsField7Set {
		return m.field7
	}
	return Default_NinOptNativeDefault_Field7
}

func (m *NinOptNativeDefault) GetField8() int64 {
	if m != nil && m.xxx_IsField8Set {
		return m.field8
	}
	return Default_NinOptNativeDefault_Field8
}

func (m *NinOptNativeDefault) GetField9() uint32 {
	if m != nil && m.xxx_IsField9Set {
		return m.field9
	}
	return Default_NinOptNativeDefault_Field9
}

func (m *NinOptNativeDefault) GetField10() int32 {
	if m != nil && m.xxx_IsField10Set {
		return m.field10
	}
	return Default_NinOptNativeDefault_Field10
}

func (m *NinOptNativeDefault) GetField11() uint64 {
	if m != nil && m.xxx_IsField11Set {
		return m.field11
	}
	return Default_NinOptNativeDefault_Field11
}

func (m *NinOptNativeDefault) GetField12() int64 {
	if m != nil && m.xxx_IsField12Set {
		return m.field12
	}
	return Default_NinOptNativeDefault_Field12
}

func (m *NinOptNativeDefault) GetField13() bool {
	if m != nil && m.xxx_IsField13Set {
		return m.field13
	}
	return Default_NinOptNativeDefault_Field13
}

func (m *NinOptNativeDefault) GetField14() string {
	if m != nil && m.xxx_IsField14Set {
		return m.field14
	}
	return Default_NinOptNativeDefault_Field14
}

func (m *NinOptNativeDefault) GetField15() []byte {
	if m != nil && m.xxx_IsField15Set {
		return m.field15
	}
	return nil
}
func (m *NinOptNativeDefault) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NinOptNativeDefault) SetField1(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NinOptNativeDefault) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NinOptNativeDefault) SetField2(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField2Set = true
	m.field2 = value
	return nil
}

func (m *NinOptNativeDefault) HasField2() (isSet bool) {
	if m != nil && m.xxx_IsField2Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField2() {
	if m != nil {
		m.xxx_IsField2Set = false
	}
}

func (m *NinOptNativeDefault) SetField3(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField3Set = true
	m.field3 = value
	return nil
}

func (m *NinOptNativeDefault) HasField3() (isSet bool) {
	if m != nil && m.xxx_IsField3Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField3() {
	if m != nil {
		m.xxx_IsField3Set = false
	}
}

func (m *NinOptNativeDefault) SetField4(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField4Set = true
	m.field4 = value
	return nil
}

func (m *NinOptNativeDefault) HasField4() (isSet bool) {
	if m != nil && m.xxx_IsField4Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField4() {
	if m != nil {
		m.xxx_IsField4Set = false
	}
}

func (m *NinOptNativeDefault) SetField5(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField5Set = true
	m.field5 = value
	return nil
}

func (m *NinOptNativeDefault) HasField5() (isSet bool) {
	if m != nil && m.xxx_IsField5Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField5() {
	if m != nil {
		m.xxx_IsField5Set = false
	}
}

func (m *NinOptNativeDefault) SetField6(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField6Set = true
	m.field6 = value
	return nil
}

func (m *NinOptNativeDefault) HasField6() (isSet bool) {
	if m != nil && m.xxx_IsField6Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField6() {
	if m != nil {
		m.xxx_IsField6Set = false
	}
}

func (m *NinOptNativeDefault) SetField7(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField7Set = true
	m.field7 = value
	return nil
}

func (m *NinOptNativeDefault) HasField7() (isSet bool) {
	if m != nil && m.xxx_IsField7Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField7() {
	if m != nil {
		m.xxx_IsField7Set = false
	}
}

func (m *NinOptNativeDefault) SetField8(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField8Set = true
	m.field8 = value
	return nil
}

func (m *NinOptNativeDefault) HasField8() (isSet bool) {
	if m != nil && m.xxx_IsField8Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField8() {
	if m != nil {
		m.xxx_IsField8Set = false
	}
}

func (m *NinOptNativeDefault) SetField9(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField9Set = true
	m.field9 = value
	return nil
}

func (m *NinOptNativeDefault) HasField9() (isSet bool) {
	if m != nil && m.xxx_IsField9Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField9() {
	if m != nil {
		m.xxx_IsField9Set = false
	}
}

func (m *NinOptNativeDefault) SetField10(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField10Set = true
	m.field10 = value
	return nil
}

func (m *NinOptNativeDefault) HasField10() (isSet bool) {
	if m != nil && m.xxx_IsField10Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField10() {
	if m != nil {
		m.xxx_IsField10Set = false
	}
}

func (m *NinOptNativeDefault) SetField11(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField11Set = true
	m.field11 = value
	return nil
}

func (m *NinOptNativeDefault) HasField11() (isSet bool) {
	if m != nil && m.xxx_IsField11Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField11() {
	if m != nil {
		m.xxx_IsField11Set = false
	}
}

func (m *NinOptNativeDefault) SetField12(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField12Set = true
	m.field12 = value
	return nil
}

func (m *NinOptNativeDefault) HasField12() (isSet bool) {
	if m != nil && m.xxx_IsField12Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField12() {
	if m != nil {
		m.xxx_IsField12Set = false
	}
}

func (m *NinOptNativeDefault) SetField13(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField13Set = true
	m.field13 = value
	return nil
}

func (m *NinOptNativeDefault) HasField13() (isSet bool) {
	if m != nil && m.xxx_IsField13Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField13() {
	if m != nil {
		m.xxx_IsField13Set = false
	}
}

func (m *NinOptNativeDefault) SetField14(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField14Set = true
	m.field14 = value
	return nil
}

func (m *NinOptNativeDefault) HasField14() (isSet bool) {
	if m != nil && m.xxx_IsField14Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField14() {
	if m != nil {
		m.xxx_IsField14Set = false
		m.field14 = ""
	}
}

func (m *NinOptNativeDefault) SetField15(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsField15Set = true
	m.field15 = value
	return nil
}

func (m *NinOptNativeDefault) HasField15() (isSet bool) {
	if m != nil && m.xxx_IsField15Set {
		return true
	}
	return false
}

func (m *NinOptNativeDefault) ClearField15() {
	if m != nil {
		m.xxx_IsField15Set = false
		m.field15 = nil
	}
}

func (m *NinOptNativeDefault) Clear() {
	if m != nil {
		m.ClearField1()
		m.ClearField2()
		m.ClearField3()
		m.ClearField4()
		m.ClearField5()
		m.ClearField6()
		m.ClearField7()
		m.ClearField8()
		m.ClearField9()
		m.ClearField10()
		m.ClearField11()
		m.ClearField12()
		m.ClearField13()
		m.ClearField14()
		m.ClearField15()
	}
}

type CustomContainer struct {
	xxx_sizeCached        int
	customStruct          *NidOptCustom
	XXX_unrecognized      []byte
	xxx_IsCustomStructSet bool
}

func (m *CustomContainer) Reset()      { *m = CustomContainer{} }
func (*CustomContainer) ProtoMessage() {}

func (m *CustomContainer) GetCustomStruct() *NidOptCustom {
	if m != nil && m.xxx_IsCustomStructSet {
		return m.customStruct
	}
	return nil
}
func (m *CustomContainer) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *CustomContainer) MutateCustomStruct() (field *NidOptCustom, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsCustomStructSet {
		m.xxx_IsCustomStructSet = true
		m.customStruct = new(NidOptCustom)
	}
	return m.customStruct, nil
}

func (m *CustomContainer) HasCustomStruct() (isSet bool) {
	if m != nil && m.xxx_IsCustomStructSet {
		return true
	}
	return false
}

func (m *CustomContainer) ClearCustomStruct() {
	if m != nil {
		m.customStruct.Clear()
		m.xxx_IsCustomStructSet = false

	}
}

func (m *CustomContainer) Clear() {
	if m != nil {
		m.customStruct.Clear()
		m.xxx_IsCustomStructSet = false

	}
}

type CustomNameNidOptNative struct {
	xxx_sizeCached   int
	fieldA           float64
	fieldB           float32
	fieldC           int32
	fieldD           int64
	fieldE           uint32
	fieldF           uint64
	fieldG           int32
	fieldH           int64
	fieldI           uint32
	fieldJ           int32
	fieldK           uint64
	fieldL           int64
	fieldM           bool
	fieldN           string
	fieldO           []byte
	XXX_unrecognized []byte
	xxx_IsFieldASet  bool
	xxx_IsFieldBSet  bool
	xxx_IsFieldCSet  bool
	xxx_IsFieldDSet  bool
	xxx_IsFieldESet  bool
	xxx_IsFieldFSet  bool
	xxx_IsFieldGSet  bool
	xxx_IsFieldHSet  bool
	xxx_IsFieldISet  bool
	xxx_IsFieldJSet  bool
	xxx_IsFieldKSet  bool
	xxx_IsFieldLSet  bool
	xxx_IsFieldMSet  bool
	xxx_IsFieldNSet  bool
	xxx_IsFieldOSet  bool
}

func (m *CustomNameNidOptNative) Reset()      { *m = CustomNameNidOptNative{} }
func (*CustomNameNidOptNative) ProtoMessage() {}

func (m *CustomNameNidOptNative) GetFieldA() float64 {
	if m != nil && m.xxx_IsFieldASet {
		return m.fieldA
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldB() float32 {
	if m != nil && m.xxx_IsFieldBSet {
		return m.fieldB
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldC() int32 {
	if m != nil && m.xxx_IsFieldCSet {
		return m.fieldC
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldD() int64 {
	if m != nil && m.xxx_IsFieldDSet {
		return m.fieldD
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldE() uint32 {
	if m != nil && m.xxx_IsFieldESet {
		return m.fieldE
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldF() uint64 {
	if m != nil && m.xxx_IsFieldFSet {
		return m.fieldF
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldG() int32 {
	if m != nil && m.xxx_IsFieldGSet {
		return m.fieldG
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldH() int64 {
	if m != nil && m.xxx_IsFieldHSet {
		return m.fieldH
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldI() uint32 {
	if m != nil && m.xxx_IsFieldISet {
		return m.fieldI
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldJ() int32 {
	if m != nil && m.xxx_IsFieldJSet {
		return m.fieldJ
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldK() uint64 {
	if m != nil && m.xxx_IsFieldKSet {
		return m.fieldK
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldL() int64 {
	if m != nil && m.xxx_IsFieldLSet {
		return m.fieldL
	}
	return 0
}

func (m *CustomNameNidOptNative) GetFieldM() bool {
	if m != nil && m.xxx_IsFieldMSet {
		return m.fieldM
	}
	return false
}

func (m *CustomNameNidOptNative) GetFieldN() string {
	if m != nil && m.xxx_IsFieldNSet {
		return m.fieldN
	}
	return ""
}

func (m *CustomNameNidOptNative) GetFieldO() []byte {
	if m != nil && m.xxx_IsFieldOSet {
		return m.fieldO
	}
	return nil
}
func (m *CustomNameNidOptNative) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *CustomNameNidOptNative) SetFieldA(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldASet = true
	m.fieldA = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldA() (isSet bool) {
	if m != nil && m.xxx_IsFieldASet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldA() {
	if m != nil {
		m.xxx_IsFieldASet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldB(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldBSet = true
	m.fieldB = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldB() (isSet bool) {
	if m != nil && m.xxx_IsFieldBSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldB() {
	if m != nil {
		m.xxx_IsFieldBSet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldC(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldCSet = true
	m.fieldC = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldC() (isSet bool) {
	if m != nil && m.xxx_IsFieldCSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldC() {
	if m != nil {
		m.xxx_IsFieldCSet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldD(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldDSet = true
	m.fieldD = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldD() (isSet bool) {
	if m != nil && m.xxx_IsFieldDSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldD() {
	if m != nil {
		m.xxx_IsFieldDSet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldE(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldESet = true
	m.fieldE = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldE() (isSet bool) {
	if m != nil && m.xxx_IsFieldESet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldE() {
	if m != nil {
		m.xxx_IsFieldESet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldF(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldFSet = true
	m.fieldF = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldF() (isSet bool) {
	if m != nil && m.xxx_IsFieldFSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldF() {
	if m != nil {
		m.xxx_IsFieldFSet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldG(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldGSet = true
	m.fieldG = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldG() (isSet bool) {
	if m != nil && m.xxx_IsFieldGSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldG() {
	if m != nil {
		m.xxx_IsFieldGSet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldH(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldHSet = true
	m.fieldH = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldH() (isSet bool) {
	if m != nil && m.xxx_IsFieldHSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldH() {
	if m != nil {
		m.xxx_IsFieldHSet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldI(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldISet = true
	m.fieldI = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldI() (isSet bool) {
	if m != nil && m.xxx_IsFieldISet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldI() {
	if m != nil {
		m.xxx_IsFieldISet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldJ(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldJSet = true
	m.fieldJ = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldJ() (isSet bool) {
	if m != nil && m.xxx_IsFieldJSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldJ() {
	if m != nil {
		m.xxx_IsFieldJSet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldK(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldKSet = true
	m.fieldK = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldK() (isSet bool) {
	if m != nil && m.xxx_IsFieldKSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldK() {
	if m != nil {
		m.xxx_IsFieldKSet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldL(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldLSet = true
	m.fieldL = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldL() (isSet bool) {
	if m != nil && m.xxx_IsFieldLSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldL() {
	if m != nil {
		m.xxx_IsFieldLSet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldM(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldMSet = true
	m.fieldM = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldM() (isSet bool) {
	if m != nil && m.xxx_IsFieldMSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldM() {
	if m != nil {
		m.xxx_IsFieldMSet = false
	}
}

func (m *CustomNameNidOptNative) SetFieldN(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldNSet = true
	m.fieldN = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldN() (isSet bool) {
	if m != nil && m.xxx_IsFieldNSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldN() {
	if m != nil {
		m.xxx_IsFieldNSet = false
		m.fieldN = ""
	}
}

func (m *CustomNameNidOptNative) SetFieldO(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsFieldOSet = true
	m.fieldO = value
	return nil
}

func (m *CustomNameNidOptNative) HasFieldO() (isSet bool) {
	if m != nil && m.xxx_IsFieldOSet {
		return true
	}
	return false
}

func (m *CustomNameNidOptNative) ClearFieldO() {
	if m != nil {
		m.xxx_IsFieldOSet = false
		m.fieldO = nil
	}
}

func (m *CustomNameNidOptNative) Clear() {
	if m != nil {
		m.ClearFieldA()
		m.ClearFieldB()
		m.ClearFieldC()
		m.ClearFieldD()
		m.ClearFieldE()
		m.ClearFieldF()
		m.ClearFieldG()
		m.ClearFieldH()
		m.ClearFieldI()
		m.ClearFieldJ()
		m.ClearFieldK()
		m.ClearFieldL()
		m.ClearFieldM()
		m.ClearFieldN()
		m.ClearFieldO()
	}
}

type CustomNameNinOptNative struct {
	xxx_sizeCached   int
	fieldA           float64
	fieldB           float32
	fieldC           int32
	fieldD           int64
	fieldE           uint32
	fieldF           uint64
	fieldG           int32
	fieldH           int64
	fieldI           uint32
	fieldJ           int32
	fieldK           uint64
	fielL            int64
	fieldM           bool
	fieldN           string
	fieldO           []byte
	XXX_unrecognized []byte
	xxx_IsFieldASet  bool
	xxx_IsFieldBSet  bool
	xxx_IsFieldCSet  bool
	xxx_IsFieldDSet  bool
	xxx_IsFieldESet  bool
	xxx_IsFieldFSet  bool
	xxx_IsFieldGSet  bool
	xxx_IsFieldHSet  bool
	xxx_IsFieldISet  bool
	xxx_IsFieldJSet  bool
	xxx_IsFieldKSet  bool
	xxx_IsFielLSet   bool
	xxx_IsFieldMSet  bool
	xxx_IsFieldNSet  bool
	xxx_IsFieldOSet  bool
}

func (m *CustomNameNinOptNative) Reset()      { *m = CustomNameNinOptNative{} }
func (*CustomNameNinOptNative) ProtoMessage() {}

func (m *CustomNameNinOptNative) GetFieldA() float64 {
	if m != nil && m.xxx_IsFieldASet {
		return m.fieldA
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldB() float32 {
	if m != nil && m.xxx_IsFieldBSet {
		return m.fieldB
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldC() int32 {
	if m != nil && m.xxx_IsFieldCSet {
		return m.fieldC
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldD() int64 {
	if m != nil && m.xxx_IsFieldDSet {
		return m.fieldD
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldE() uint32 {
	if m != nil && m.xxx_IsFieldESet {
		return m.fieldE
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldF() uint64 {
	if m != nil && m.xxx_IsFieldFSet {
		return m.fieldF
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldG() int32 {
	if m != nil && m.xxx_IsFieldGSet {
		return m.fieldG
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldH() int64 {
	if m != nil && m.xxx_IsFieldHSet {
		return m.fieldH
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldI() uint32 {
	if m != nil && m.xxx_IsFieldISet {
		return m.fieldI
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldJ() int32 {
	if m != nil && m.xxx_IsFieldJSet {
		return m.fieldJ
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldK() uint64 {
	if m != nil && m.xxx_IsFieldKSet {
		return m.fieldK
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFielL() int64 {
	if m != nil && m.xxx_IsFielLSet {
		return m.fielL
	}
	return 0
}

func (m *CustomNameNinOptNative) GetFieldM() bool {
	if m != nil && m.xxx_IsFieldMSet {
		return m.fieldM
	}
	return false
}

func (m *CustomNameNinOptNative) GetFieldN() string {
	if m != nil && m.xxx_IsFieldNSet {
		return m.fieldN
	}
	return ""
}

func (m *CustomNameNinOptNative) GetFieldO() []byte {
	if m != nil && m.xxx_IsFieldOSet {
		return m.fieldO
	}
	return nil
}
func (m *CustomNameNinOptNative) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *CustomNameNinOptNative) SetFieldA(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldASet = true
	m.fieldA = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldA() (isSet bool) {
	if m != nil && m.xxx_IsFieldASet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldA() {
	if m != nil {
		m.xxx_IsFieldASet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldB(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldBSet = true
	m.fieldB = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldB() (isSet bool) {
	if m != nil && m.xxx_IsFieldBSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldB() {
	if m != nil {
		m.xxx_IsFieldBSet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldC(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldCSet = true
	m.fieldC = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldC() (isSet bool) {
	if m != nil && m.xxx_IsFieldCSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldC() {
	if m != nil {
		m.xxx_IsFieldCSet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldD(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldDSet = true
	m.fieldD = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldD() (isSet bool) {
	if m != nil && m.xxx_IsFieldDSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldD() {
	if m != nil {
		m.xxx_IsFieldDSet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldE(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldESet = true
	m.fieldE = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldE() (isSet bool) {
	if m != nil && m.xxx_IsFieldESet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldE() {
	if m != nil {
		m.xxx_IsFieldESet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldF(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldFSet = true
	m.fieldF = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldF() (isSet bool) {
	if m != nil && m.xxx_IsFieldFSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldF() {
	if m != nil {
		m.xxx_IsFieldFSet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldG(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldGSet = true
	m.fieldG = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldG() (isSet bool) {
	if m != nil && m.xxx_IsFieldGSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldG() {
	if m != nil {
		m.xxx_IsFieldGSet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldH(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldHSet = true
	m.fieldH = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldH() (isSet bool) {
	if m != nil && m.xxx_IsFieldHSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldH() {
	if m != nil {
		m.xxx_IsFieldHSet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldI(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldISet = true
	m.fieldI = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldI() (isSet bool) {
	if m != nil && m.xxx_IsFieldISet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldI() {
	if m != nil {
		m.xxx_IsFieldISet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldJ(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldJSet = true
	m.fieldJ = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldJ() (isSet bool) {
	if m != nil && m.xxx_IsFieldJSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldJ() {
	if m != nil {
		m.xxx_IsFieldJSet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldK(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldKSet = true
	m.fieldK = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldK() (isSet bool) {
	if m != nil && m.xxx_IsFieldKSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldK() {
	if m != nil {
		m.xxx_IsFieldKSet = false
	}
}

func (m *CustomNameNinOptNative) SetFielL(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFielLSet = true
	m.fielL = value
	return nil
}

func (m *CustomNameNinOptNative) HasFielL() (isSet bool) {
	if m != nil && m.xxx_IsFielLSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFielL() {
	if m != nil {
		m.xxx_IsFielLSet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldM(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldMSet = true
	m.fieldM = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldM() (isSet bool) {
	if m != nil && m.xxx_IsFieldMSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldM() {
	if m != nil {
		m.xxx_IsFieldMSet = false
	}
}

func (m *CustomNameNinOptNative) SetFieldN(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldNSet = true
	m.fieldN = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldN() (isSet bool) {
	if m != nil && m.xxx_IsFieldNSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldN() {
	if m != nil {
		m.xxx_IsFieldNSet = false
		m.fieldN = ""
	}
}

func (m *CustomNameNinOptNative) SetFieldO(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsFieldOSet = true
	m.fieldO = value
	return nil
}

func (m *CustomNameNinOptNative) HasFieldO() (isSet bool) {
	if m != nil && m.xxx_IsFieldOSet {
		return true
	}
	return false
}

func (m *CustomNameNinOptNative) ClearFieldO() {
	if m != nil {
		m.xxx_IsFieldOSet = false
		m.fieldO = nil
	}
}

func (m *CustomNameNinOptNative) Clear() {
	if m != nil {
		m.ClearFieldA()
		m.ClearFieldB()
		m.ClearFieldC()
		m.ClearFieldD()
		m.ClearFieldE()
		m.ClearFieldF()
		m.ClearFieldG()
		m.ClearFieldH()
		m.ClearFieldI()
		m.ClearFieldJ()
		m.ClearFieldK()
		m.ClearFielL()
		m.ClearFieldM()
		m.ClearFieldN()
		m.ClearFieldO()
	}
}

type CustomNameNinRepNative struct {
	xxx_sizeCached   int
	fieldA           []float64
	fieldB           []float32
	fieldC           []int32
	fieldD           []int64
	fieldE           []uint32
	fieldF           []uint64
	fieldG           []int32
	fieldH           []int64
	fieldI           []uint32
	fieldJ           []int32
	fieldK           []uint64
	fieldL           []int64
	fieldM           []bool
	fieldN           []string
	fieldO           [][]byte
	XXX_unrecognized []byte
	xxx_LenFieldA    int
	xxx_LenFieldB    int
	xxx_LenFieldC    int
	xxx_LenFieldD    int
	xxx_LenFieldE    int
	xxx_LenFieldF    int
	xxx_LenFieldG    int
	xxx_LenFieldH    int
	xxx_LenFieldI    int
	xxx_LenFieldJ    int
	xxx_LenFieldK    int
	xxx_LenFieldL    int
	xxx_LenFieldM    int
	xxx_LenFieldN    int
	xxx_LenFieldO    int
}

func (m *CustomNameNinRepNative) Reset()      { *m = CustomNameNinRepNative{} }
func (*CustomNameNinRepNative) ProtoMessage() {}

func (m *CustomNameNinRepNative) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *CustomNameNinRepNative) AddFieldA(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldA) <= m.xxx_LenFieldA {
		newCapacity := 0
		if len(m.fieldA) == 0 {
			newCapacity = 8
		} else if len(m.fieldA) < 1000000 {
			newCapacity = m.xxx_LenFieldA * 2
		} else {
			newCapacity = m.xxx_LenFieldA + 1000000
		}
		t := make([]float64, newCapacity, newCapacity)
		copy(t, m.fieldA)
		m.fieldA = t
	}
	m.fieldA[m.xxx_LenFieldA] = value
	m.xxx_LenFieldA += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldA(value float64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldA {
		return errors.New("Index is out of bounds")
	}
	m.fieldA[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldASize() (size int) {
	if m != nil {
		return m.xxx_LenFieldA
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldA() {
	if m != nil {
		m.xxx_LenFieldA = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldA(index int) (field float64, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldA {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.fieldA[index], nil
}

func (m *CustomNameNinRepNative) AddFieldB(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldB) <= m.xxx_LenFieldB {
		newCapacity := 0
		if len(m.fieldB) == 0 {
			newCapacity = 8
		} else if len(m.fieldB) < 1000000 {
			newCapacity = m.xxx_LenFieldB * 2
		} else {
			newCapacity = m.xxx_LenFieldB + 1000000
		}
		t := make([]float32, newCapacity, newCapacity)
		copy(t, m.fieldB)
		m.fieldB = t
	}
	m.fieldB[m.xxx_LenFieldB] = value
	m.xxx_LenFieldB += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldB(value float32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldB {
		return errors.New("Index is out of bounds")
	}
	m.fieldB[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldBSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldB
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldB() {
	if m != nil {
		m.xxx_LenFieldB = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldB(index int) (field float32, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldB {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.fieldB[index], nil
}

func (m *CustomNameNinRepNative) AddFieldC(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldC) <= m.xxx_LenFieldC {
		newCapacity := 0
		if len(m.fieldC) == 0 {
			newCapacity = 8
		} else if len(m.fieldC) < 1000000 {
			newCapacity = m.xxx_LenFieldC * 2
		} else {
			newCapacity = m.xxx_LenFieldC + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.fieldC)
		m.fieldC = t
	}
	m.fieldC[m.xxx_LenFieldC] = value
	m.xxx_LenFieldC += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldC(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldC {
		return errors.New("Index is out of bounds")
	}
	m.fieldC[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldCSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldC
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldC() {
	if m != nil {
		m.xxx_LenFieldC = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldC(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldC {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldC[index], nil
}

func (m *CustomNameNinRepNative) AddFieldD(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldD) <= m.xxx_LenFieldD {
		newCapacity := 0
		if len(m.fieldD) == 0 {
			newCapacity = 8
		} else if len(m.fieldD) < 1000000 {
			newCapacity = m.xxx_LenFieldD * 2
		} else {
			newCapacity = m.xxx_LenFieldD + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.fieldD)
		m.fieldD = t
	}
	m.fieldD[m.xxx_LenFieldD] = value
	m.xxx_LenFieldD += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldD(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldD {
		return errors.New("Index is out of bounds")
	}
	m.fieldD[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldDSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldD
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldD() {
	if m != nil {
		m.xxx_LenFieldD = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldD(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldD {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldD[index], nil
}

func (m *CustomNameNinRepNative) AddFieldE(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldE) <= m.xxx_LenFieldE {
		newCapacity := 0
		if len(m.fieldE) == 0 {
			newCapacity = 8
		} else if len(m.fieldE) < 1000000 {
			newCapacity = m.xxx_LenFieldE * 2
		} else {
			newCapacity = m.xxx_LenFieldE + 1000000
		}
		t := make([]uint32, newCapacity, newCapacity)
		copy(t, m.fieldE)
		m.fieldE = t
	}
	m.fieldE[m.xxx_LenFieldE] = value
	m.xxx_LenFieldE += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldE(value uint32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldE {
		return errors.New("Index is out of bounds")
	}
	m.fieldE[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldESize() (size int) {
	if m != nil {
		return m.xxx_LenFieldE
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldE() {
	if m != nil {
		m.xxx_LenFieldE = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldE(index int) (field uint32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldE {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldE[index], nil
}

func (m *CustomNameNinRepNative) AddFieldF(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldF) <= m.xxx_LenFieldF {
		newCapacity := 0
		if len(m.fieldF) == 0 {
			newCapacity = 8
		} else if len(m.fieldF) < 1000000 {
			newCapacity = m.xxx_LenFieldF * 2
		} else {
			newCapacity = m.xxx_LenFieldF + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.fieldF)
		m.fieldF = t
	}
	m.fieldF[m.xxx_LenFieldF] = value
	m.xxx_LenFieldF += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldF(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldF {
		return errors.New("Index is out of bounds")
	}
	m.fieldF[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldFSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldF
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldF() {
	if m != nil {
		m.xxx_LenFieldF = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldF(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldF {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldF[index], nil
}

func (m *CustomNameNinRepNative) AddFieldG(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldG) <= m.xxx_LenFieldG {
		newCapacity := 0
		if len(m.fieldG) == 0 {
			newCapacity = 8
		} else if len(m.fieldG) < 1000000 {
			newCapacity = m.xxx_LenFieldG * 2
		} else {
			newCapacity = m.xxx_LenFieldG + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.fieldG)
		m.fieldG = t
	}
	m.fieldG[m.xxx_LenFieldG] = value
	m.xxx_LenFieldG += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldG(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldG {
		return errors.New("Index is out of bounds")
	}
	m.fieldG[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldGSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldG
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldG() {
	if m != nil {
		m.xxx_LenFieldG = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldG(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldG {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldG[index], nil
}

func (m *CustomNameNinRepNative) AddFieldH(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldH) <= m.xxx_LenFieldH {
		newCapacity := 0
		if len(m.fieldH) == 0 {
			newCapacity = 8
		} else if len(m.fieldH) < 1000000 {
			newCapacity = m.xxx_LenFieldH * 2
		} else {
			newCapacity = m.xxx_LenFieldH + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.fieldH)
		m.fieldH = t
	}
	m.fieldH[m.xxx_LenFieldH] = value
	m.xxx_LenFieldH += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldH(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldH {
		return errors.New("Index is out of bounds")
	}
	m.fieldH[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldHSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldH
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldH() {
	if m != nil {
		m.xxx_LenFieldH = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldH(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldH {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldH[index], nil
}

func (m *CustomNameNinRepNative) AddFieldI(value uint32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldI) <= m.xxx_LenFieldI {
		newCapacity := 0
		if len(m.fieldI) == 0 {
			newCapacity = 8
		} else if len(m.fieldI) < 1000000 {
			newCapacity = m.xxx_LenFieldI * 2
		} else {
			newCapacity = m.xxx_LenFieldI + 1000000
		}
		t := make([]uint32, newCapacity, newCapacity)
		copy(t, m.fieldI)
		m.fieldI = t
	}
	m.fieldI[m.xxx_LenFieldI] = value
	m.xxx_LenFieldI += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldI(value uint32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldI {
		return errors.New("Index is out of bounds")
	}
	m.fieldI[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldISize() (size int) {
	if m != nil {
		return m.xxx_LenFieldI
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldI() {
	if m != nil {
		m.xxx_LenFieldI = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldI(index int) (field uint32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldI {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldI[index], nil
}

func (m *CustomNameNinRepNative) AddFieldJ(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldJ) <= m.xxx_LenFieldJ {
		newCapacity := 0
		if len(m.fieldJ) == 0 {
			newCapacity = 8
		} else if len(m.fieldJ) < 1000000 {
			newCapacity = m.xxx_LenFieldJ * 2
		} else {
			newCapacity = m.xxx_LenFieldJ + 1000000
		}
		t := make([]int32, newCapacity, newCapacity)
		copy(t, m.fieldJ)
		m.fieldJ = t
	}
	m.fieldJ[m.xxx_LenFieldJ] = value
	m.xxx_LenFieldJ += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldJ(value int32, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldJ {
		return errors.New("Index is out of bounds")
	}
	m.fieldJ[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldJSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldJ
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldJ() {
	if m != nil {
		m.xxx_LenFieldJ = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldJ(index int) (field int32, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldJ {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldJ[index], nil
}

func (m *CustomNameNinRepNative) AddFieldK(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldK) <= m.xxx_LenFieldK {
		newCapacity := 0
		if len(m.fieldK) == 0 {
			newCapacity = 8
		} else if len(m.fieldK) < 1000000 {
			newCapacity = m.xxx_LenFieldK * 2
		} else {
			newCapacity = m.xxx_LenFieldK + 1000000
		}
		t := make([]uint64, newCapacity, newCapacity)
		copy(t, m.fieldK)
		m.fieldK = t
	}
	m.fieldK[m.xxx_LenFieldK] = value
	m.xxx_LenFieldK += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldK(value uint64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldK {
		return errors.New("Index is out of bounds")
	}
	m.fieldK[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldKSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldK
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldK() {
	if m != nil {
		m.xxx_LenFieldK = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldK(index int) (field uint64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldK {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldK[index], nil
}

func (m *CustomNameNinRepNative) AddFieldL(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldL) <= m.xxx_LenFieldL {
		newCapacity := 0
		if len(m.fieldL) == 0 {
			newCapacity = 8
		} else if len(m.fieldL) < 1000000 {
			newCapacity = m.xxx_LenFieldL * 2
		} else {
			newCapacity = m.xxx_LenFieldL + 1000000
		}
		t := make([]int64, newCapacity, newCapacity)
		copy(t, m.fieldL)
		m.fieldL = t
	}
	m.fieldL[m.xxx_LenFieldL] = value
	m.xxx_LenFieldL += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldL(value int64, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldL {
		return errors.New("Index is out of bounds")
	}
	m.fieldL[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldLSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldL
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldL() {
	if m != nil {
		m.xxx_LenFieldL = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldL(index int) (field int64, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldL {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldL[index], nil
}

func (m *CustomNameNinRepNative) AddFieldM(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldM) <= m.xxx_LenFieldM {
		newCapacity := 0
		if len(m.fieldM) == 0 {
			newCapacity = 8
		} else if len(m.fieldM) < 1000000 {
			newCapacity = m.xxx_LenFieldM * 2
		} else {
			newCapacity = m.xxx_LenFieldM + 1000000
		}
		t := make([]bool, newCapacity, newCapacity)
		copy(t, m.fieldM)
		m.fieldM = t
	}
	m.fieldM[m.xxx_LenFieldM] = value
	m.xxx_LenFieldM += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldM(value bool, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldM {
		return errors.New("Index is out of bounds")
	}
	m.fieldM[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldMSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldM
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldM() {
	if m != nil {
		m.xxx_LenFieldM = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldM(index int) (field bool, err error) {
	if m == nil {
		return false, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldM {
		return false, errors.New("Index is out of bounds")
	}
	return m.fieldM[index], nil
}

func (m *CustomNameNinRepNative) AddFieldN(value string) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldN) <= m.xxx_LenFieldN {
		newCapacity := 0
		if len(m.fieldN) == 0 {
			newCapacity = 8
		} else if len(m.fieldN) < 1000000 {
			newCapacity = m.xxx_LenFieldN * 2
		} else {
			newCapacity = m.xxx_LenFieldN + 1000000
		}
		t := make([]string, newCapacity, newCapacity)
		copy(t, m.fieldN)
		m.fieldN = t
	}
	m.fieldN[m.xxx_LenFieldN] = value
	m.xxx_LenFieldN += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldN(value string, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldN {
		return errors.New("Index is out of bounds")
	}
	m.fieldN[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldNSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldN
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldN() {
	if m != nil {
		m.xxx_LenFieldN = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldN(index int) (field string, err error) {
	if m == nil {
		return "", errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldN {
		return "", errors.New("Index is out of bounds")
	}
	return m.fieldN[index], nil
}

func (m *CustomNameNinRepNative) AddFieldO(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	if len(m.fieldO) <= m.xxx_LenFieldO {
		newCapacity := 0
		if len(m.fieldO) == 0 {
			newCapacity = 8
		} else if len(m.fieldO) < 1000000 {
			newCapacity = m.xxx_LenFieldO * 2
		} else {
			newCapacity = m.xxx_LenFieldO + 1000000
		}
		t := make([][]byte, newCapacity, newCapacity)
		copy(t, m.fieldO)
		m.fieldO = t
	}
	m.fieldO[m.xxx_LenFieldO] = value
	m.xxx_LenFieldO += 1
	return nil
}

func (m *CustomNameNinRepNative) SetFieldO(value []byte, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldO {
		return errors.New("Index is out of bounds")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.fieldO[index] = value
	return nil
}

func (m *CustomNameNinRepNative) FieldOSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldO
	}
	return 0
}

func (m *CustomNameNinRepNative) ClearFieldO() {
	if m != nil {
		m.xxx_LenFieldO = 0
	}
}

func (m *CustomNameNinRepNative) GetFieldO(index int) (field []byte, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldO {
		return nil, errors.New("Index is out of bounds")
	}
	return m.fieldO[index], nil
}

func (m *CustomNameNinRepNative) Clear() {
	if m != nil {
		m.ClearFieldA()
		m.ClearFieldB()
		m.ClearFieldC()
		m.ClearFieldD()
		m.ClearFieldE()
		m.ClearFieldF()
		m.ClearFieldG()
		m.ClearFieldH()
		m.ClearFieldI()
		m.ClearFieldJ()
		m.ClearFieldK()
		m.ClearFieldL()
		m.ClearFieldM()
		m.ClearFieldN()
		m.ClearFieldO()
	}
}

type CustomNameNinStruct struct {
	xxx_sizeCached   int
	fieldA           float64
	fieldB           float32
	fieldC           *NidOptNative
	fieldD           []*NinOptNative
	fieldE           uint64
	fieldF           int32
	fieldG           *NidOptNative
	fieldH           bool
	fieldI           string
	fieldJ           []byte
	XXX_unrecognized []byte
	xxx_IsFieldASet  bool
	xxx_IsFieldBSet  bool
	xxx_IsFieldCSet  bool
	xxx_LenFieldD    int
	xxx_IsFieldESet  bool
	xxx_IsFieldFSet  bool
	xxx_IsFieldGSet  bool
	xxx_IsFieldHSet  bool
	xxx_IsFieldISet  bool
	xxx_IsFieldJSet  bool
}

func (m *CustomNameNinStruct) Reset()      { *m = CustomNameNinStruct{} }
func (*CustomNameNinStruct) ProtoMessage() {}

func (m *CustomNameNinStruct) GetFieldA() float64 {
	if m != nil && m.xxx_IsFieldASet {
		return m.fieldA
	}
	return 0
}

func (m *CustomNameNinStruct) GetFieldB() float32 {
	if m != nil && m.xxx_IsFieldBSet {
		return m.fieldB
	}
	return 0
}

func (m *CustomNameNinStruct) GetFieldC() *NidOptNative {
	if m != nil && m.xxx_IsFieldCSet {
		return m.fieldC
	}
	return nil
}
func (m *CustomNameNinStruct) GetFieldE() uint64 {
	if m != nil && m.xxx_IsFieldESet {
		return m.fieldE
	}
	return 0
}

func (m *CustomNameNinStruct) GetFieldF() int32 {
	if m != nil && m.xxx_IsFieldFSet {
		return m.fieldF
	}
	return 0
}

func (m *CustomNameNinStruct) GetFieldG() *NidOptNative {
	if m != nil && m.xxx_IsFieldGSet {
		return m.fieldG
	}
	return nil
}
func (m *CustomNameNinStruct) GetFieldH() bool {
	if m != nil && m.xxx_IsFieldHSet {
		return m.fieldH
	}
	return false
}

func (m *CustomNameNinStruct) GetFieldI() string {
	if m != nil && m.xxx_IsFieldISet {
		return m.fieldI
	}
	return ""
}

func (m *CustomNameNinStruct) GetFieldJ() []byte {
	if m != nil && m.xxx_IsFieldJSet {
		return m.fieldJ
	}
	return nil
}
func (m *CustomNameNinStruct) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *CustomNameNinStruct) SetFieldA(value float64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldASet = true
	m.fieldA = value
	return nil
}

func (m *CustomNameNinStruct) HasFieldA() (isSet bool) {
	if m != nil && m.xxx_IsFieldASet {
		return true
	}
	return false
}

func (m *CustomNameNinStruct) ClearFieldA() {
	if m != nil {
		m.xxx_IsFieldASet = false
	}
}

func (m *CustomNameNinStruct) SetFieldB(value float32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldBSet = true
	m.fieldB = value
	return nil
}

func (m *CustomNameNinStruct) HasFieldB() (isSet bool) {
	if m != nil && m.xxx_IsFieldBSet {
		return true
	}
	return false
}

func (m *CustomNameNinStruct) ClearFieldB() {
	if m != nil {
		m.xxx_IsFieldBSet = false
	}
}

func (m *CustomNameNinStruct) MutateFieldC() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsFieldCSet {
		m.xxx_IsFieldCSet = true
		m.fieldC = new(NidOptNative)
	}
	return m.fieldC, nil
}

func (m *CustomNameNinStruct) HasFieldC() (isSet bool) {
	if m != nil && m.xxx_IsFieldCSet {
		return true
	}
	return false
}

func (m *CustomNameNinStruct) ClearFieldC() {
	if m != nil {
		m.fieldC.Clear()
		m.xxx_IsFieldCSet = false

	}
}

func (m *CustomNameNinStruct) AddFieldD() (field *NinOptNative, err error) {
	if m != nil {
		field = new(NinOptNative)
		if len(m.fieldD) <= m.xxx_LenFieldD {
			newCapacity := 0
			if len(m.fieldD) == 0 {
				newCapacity = 8
			} else if len(m.fieldD) < 1000000 {
				newCapacity = m.xxx_LenFieldD * 2
			} else {
				newCapacity = m.xxx_LenFieldD + 1000000
			}
			t := make([]*NinOptNative, newCapacity, newCapacity)
			copy(t, m.fieldD)
			m.fieldD = t
		}
		m.fieldD[m.xxx_LenFieldD] = field
		m.xxx_LenFieldD += 1
		return field, nil
	}
	return nil, errors.New("Cannot append to nil message")
}

func (m *CustomNameNinStruct) MutateFieldD(index int) (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldD {
		return nil, errors.New("Index is out of bounds")
	}
	if m.fieldD[index] == nil {
		m.fieldD[index] = new(NinOptNative)
	}
	return m.fieldD[index], nil
}

func (m *CustomNameNinStruct) FieldDSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldD
	}
	return 0
}

func (m *CustomNameNinStruct) ClearFieldD() {
	if m != nil {
		for i := 0; i < m.FieldDSize(); i++ {
			m.fieldD[i].Clear()
		}
		m.xxx_LenFieldD = 0

	}
}

func (m *CustomNameNinStruct) GetFieldD(index int) (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldD {
		return nil, errors.New("Index is out of bounds")
	}
	return m.fieldD[index], nil
}

func (m *CustomNameNinStruct) SetFieldE(value uint64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldESet = true
	m.fieldE = value
	return nil
}

func (m *CustomNameNinStruct) HasFieldE() (isSet bool) {
	if m != nil && m.xxx_IsFieldESet {
		return true
	}
	return false
}

func (m *CustomNameNinStruct) ClearFieldE() {
	if m != nil {
		m.xxx_IsFieldESet = false
	}
}

func (m *CustomNameNinStruct) SetFieldF(value int32) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldFSet = true
	m.fieldF = value
	return nil
}

func (m *CustomNameNinStruct) HasFieldF() (isSet bool) {
	if m != nil && m.xxx_IsFieldFSet {
		return true
	}
	return false
}

func (m *CustomNameNinStruct) ClearFieldF() {
	if m != nil {
		m.xxx_IsFieldFSet = false
	}
}

func (m *CustomNameNinStruct) MutateFieldG() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsFieldGSet {
		m.xxx_IsFieldGSet = true
		m.fieldG = new(NidOptNative)
	}
	return m.fieldG, nil
}

func (m *CustomNameNinStruct) HasFieldG() (isSet bool) {
	if m != nil && m.xxx_IsFieldGSet {
		return true
	}
	return false
}

func (m *CustomNameNinStruct) ClearFieldG() {
	if m != nil {
		m.fieldG.Clear()
		m.xxx_IsFieldGSet = false

	}
}

func (m *CustomNameNinStruct) SetFieldH(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldHSet = true
	m.fieldH = value
	return nil
}

func (m *CustomNameNinStruct) HasFieldH() (isSet bool) {
	if m != nil && m.xxx_IsFieldHSet {
		return true
	}
	return false
}

func (m *CustomNameNinStruct) ClearFieldH() {
	if m != nil {
		m.xxx_IsFieldHSet = false
	}
}

func (m *CustomNameNinStruct) SetFieldI(value string) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldISet = true
	m.fieldI = value
	return nil
}

func (m *CustomNameNinStruct) HasFieldI() (isSet bool) {
	if m != nil && m.xxx_IsFieldISet {
		return true
	}
	return false
}

func (m *CustomNameNinStruct) ClearFieldI() {
	if m != nil {
		m.xxx_IsFieldISet = false
		m.fieldI = ""
	}
}

func (m *CustomNameNinStruct) SetFieldJ(value []byte) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if value == nil {
		return errors.New("Cannot set with a nil value.")
	}
	m.xxx_IsFieldJSet = true
	m.fieldJ = value
	return nil
}

func (m *CustomNameNinStruct) HasFieldJ() (isSet bool) {
	if m != nil && m.xxx_IsFieldJSet {
		return true
	}
	return false
}

func (m *CustomNameNinStruct) ClearFieldJ() {
	if m != nil {
		m.xxx_IsFieldJSet = false
		m.fieldJ = nil
	}
}

func (m *CustomNameNinStruct) Clear() {
	if m != nil {
		m.ClearFieldA()
		m.ClearFieldB()
		m.fieldC.Clear()
		m.xxx_IsFieldCSet = false

		for i := 0; i < m.FieldDSize(); i++ {
			m.fieldD[i].Clear()
		}
		m.xxx_LenFieldD = 0

		m.ClearFieldE()
		m.ClearFieldF()
		m.fieldG.Clear()
		m.xxx_IsFieldGSet = false

		m.ClearFieldH()
		m.ClearFieldI()
		m.ClearFieldJ()
	}
}

type CustomNameCustomType struct {
	xxx_sizeCached   int
	fieldA           Id
	fieldB           Weight
	fieldC           []Id
	fieldD           []Weight
	XXX_unrecognized []byte
	xxx_IsFieldASet  bool
	xxx_IsFieldBSet  bool
	xxx_LenFieldC    int
	xxx_LenFieldD    int
}

func (m *CustomNameCustomType) Reset()      { *m = CustomNameCustomType{} }
func (*CustomNameCustomType) ProtoMessage() {}

func (m *CustomNameCustomType) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *CustomNameCustomType) SetFieldA(value Id) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldASet = true
	m.fieldA = value
	return nil
}

func (m *CustomNameCustomType) HasFieldA() (isSet bool) {
	if m != nil && m.xxx_IsFieldASet {
		return true
	}
	return false
}

func (m *CustomNameCustomType) ClearFieldA() {
	if m != nil {
		m.xxx_IsFieldASet = false
	}
}

func (m *CustomNameCustomType) SetFieldB(value Weight) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldBSet = true
	m.fieldB = value
	return nil
}

func (m *CustomNameCustomType) HasFieldB() (isSet bool) {
	if m != nil && m.xxx_IsFieldBSet {
		return true
	}
	return false
}

func (m *CustomNameCustomType) ClearFieldB() {
	if m != nil {
		m.xxx_IsFieldBSet = false
	}
}

func (m *CustomNameCustomType) AddFieldC(value Id) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldC) <= m.xxx_LenFieldC {
		newCapacity := 0
		if len(m.fieldC) == 0 {
			newCapacity = 8
		} else if len(m.fieldC) < 1000000 {
			newCapacity = m.xxx_LenFieldC * 2
		} else {
			newCapacity = m.xxx_LenFieldC + 1000000
		}
		t := make([]Id, newCapacity, newCapacity)
		copy(t, m.fieldC)
		m.fieldC = t
	}
	m.fieldC[m.xxx_LenFieldC] = value
	m.xxx_LenFieldC += 1
	return nil
}

func (m *CustomNameCustomType) SetFieldC(value Id, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldC {
		return errors.New("Index is out of bounds")
	}
	m.fieldC[index] = value
	return nil
}

func (m *CustomNameCustomType) FieldCSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldC
	}
	return 0
}

func (m *CustomNameCustomType) ClearFieldC() {
	if m != nil {
		m.xxx_LenFieldC = 0
	}
}

func (m *CustomNameCustomType) GetFieldC(index int) (field Id, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldC {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldC[index], nil
}

func (m *CustomNameCustomType) AddFieldD(value Weight) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldD) <= m.xxx_LenFieldD {
		newCapacity := 0
		if len(m.fieldD) == 0 {
			newCapacity = 8
		} else if len(m.fieldD) < 1000000 {
			newCapacity = m.xxx_LenFieldD * 2
		} else {
			newCapacity = m.xxx_LenFieldD + 1000000
		}
		t := make([]Weight, newCapacity, newCapacity)
		copy(t, m.fieldD)
		m.fieldD = t
	}
	m.fieldD[m.xxx_LenFieldD] = value
	m.xxx_LenFieldD += 1
	return nil
}

func (m *CustomNameCustomType) SetFieldD(value Weight, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldD {
		return errors.New("Index is out of bounds")
	}
	m.fieldD[index] = value
	return nil
}

func (m *CustomNameCustomType) FieldDSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldD
	}
	return 0
}

func (m *CustomNameCustomType) ClearFieldD() {
	if m != nil {
		m.xxx_LenFieldD = 0
	}
}

func (m *CustomNameCustomType) GetFieldD(index int) (field Weight, err error) {
	if m == nil {
		return 0.0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldD {
		return 0.0, errors.New("Index is out of bounds")
	}
	return m.fieldD[index], nil
}

func (m *CustomNameCustomType) Clear() {
	if m != nil {
		m.ClearFieldA()
		m.ClearFieldB()
		m.ClearFieldC()
		m.ClearFieldD()
	}
}

type CustomNameNinEmbeddedStructUnion struct {
	xxx_sizeCached int
	*NidOptNative
	fieldA                *NinOptNative
	fieldB                bool
	XXX_unrecognized      []byte
	xxx_IsNidOptNativeSet bool
	xxx_IsFieldASet       bool
	xxx_IsFieldBSet       bool
}

func (m *CustomNameNinEmbeddedStructUnion) Reset()      { *m = CustomNameNinEmbeddedStructUnion{} }
func (*CustomNameNinEmbeddedStructUnion) ProtoMessage() {}

func (m *CustomNameNinEmbeddedStructUnion) GetFieldA() *NinOptNative {
	if m != nil && m.xxx_IsFieldASet {
		return m.fieldA
	}
	return nil
}
func (m *CustomNameNinEmbeddedStructUnion) GetFieldB() bool {
	if m != nil && m.xxx_IsFieldBSet {
		return m.fieldB
	}
	return false
}

func (m *CustomNameNinEmbeddedStructUnion) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *CustomNameNinEmbeddedStructUnion) MutateNidOptNative() (field *NidOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsNidOptNativeSet {
		m.xxx_IsNidOptNativeSet = true
		m.NidOptNative = new(NidOptNative)
	}
	return m.NidOptNative, nil
}

func (m *CustomNameNinEmbeddedStructUnion) HasNidOptNative() (isSet bool) {
	if m != nil && m.xxx_IsNidOptNativeSet {
		return true
	}
	return false
}

func (m *CustomNameNinEmbeddedStructUnion) ClearNidOptNative() {
	if m != nil {
		m.NidOptNative.Clear()
		m.xxx_IsNidOptNativeSet = false

	}
}

func (m *CustomNameNinEmbeddedStructUnion) MutateFieldA() (field *NinOptNative, err error) {
	if m == nil {
		return nil, errors.New("Cannot mutate a nil message")
	}
	if !m.xxx_IsFieldASet {
		m.xxx_IsFieldASet = true
		m.fieldA = new(NinOptNative)
	}
	return m.fieldA, nil
}

func (m *CustomNameNinEmbeddedStructUnion) HasFieldA() (isSet bool) {
	if m != nil && m.xxx_IsFieldASet {
		return true
	}
	return false
}

func (m *CustomNameNinEmbeddedStructUnion) ClearFieldA() {
	if m != nil {
		m.fieldA.Clear()
		m.xxx_IsFieldASet = false

	}
}

func (m *CustomNameNinEmbeddedStructUnion) SetFieldB(value bool) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldBSet = true
	m.fieldB = value
	return nil
}

func (m *CustomNameNinEmbeddedStructUnion) HasFieldB() (isSet bool) {
	if m != nil && m.xxx_IsFieldBSet {
		return true
	}
	return false
}

func (m *CustomNameNinEmbeddedStructUnion) ClearFieldB() {
	if m != nil {
		m.xxx_IsFieldBSet = false
	}
}

func (m *CustomNameNinEmbeddedStructUnion) Clear() {
	if m != nil {
		m.NidOptNative.Clear()
		m.xxx_IsNidOptNativeSet = false

		m.fieldA.Clear()
		m.xxx_IsFieldASet = false

		m.ClearFieldB()
	}
}

type CustomNameEnum struct {
	xxx_sizeCached   int
	fieldA           TheTestEnum
	fieldB           []TheTestEnum
	XXX_unrecognized []byte
	xxx_IsFieldASet  bool
	xxx_LenFieldB    int
}

func (m *CustomNameEnum) Reset()      { *m = CustomNameEnum{} }
func (*CustomNameEnum) ProtoMessage() {}

func (m *CustomNameEnum) GetFieldA() TheTestEnum {
	if m != nil && m.xxx_IsFieldASet {
		return m.fieldA
	}
	return A
}

func (m *CustomNameEnum) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *CustomNameEnum) SetFieldA(value TheTestEnum) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsFieldASet = true
	m.fieldA = value
	return nil
}

func (m *CustomNameEnum) HasFieldA() (isSet bool) {
	if m != nil && m.xxx_IsFieldASet {
		return true
	}
	return false
}

func (m *CustomNameEnum) ClearFieldA() {
	if m != nil {
		m.xxx_IsFieldASet = false
	}
}

func (m *CustomNameEnum) AddFieldB(value TheTestEnum) (err error) {
	if m == nil {
		return errors.New("Cannot append to nil message")
	}
	if len(m.fieldB) <= m.xxx_LenFieldB {
		newCapacity := 0
		if len(m.fieldB) == 0 {
			newCapacity = 8
		} else if len(m.fieldB) < 1000000 {
			newCapacity = m.xxx_LenFieldB * 2
		} else {
			newCapacity = m.xxx_LenFieldB + 1000000
		}
		t := make([]TheTestEnum, newCapacity, newCapacity)
		copy(t, m.fieldB)
		m.fieldB = t
	}
	m.fieldB[m.xxx_LenFieldB] = value
	m.xxx_LenFieldB += 1
	return nil
}

func (m *CustomNameEnum) SetFieldB(value TheTestEnum, index int) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldB {
		return errors.New("Index is out of bounds")
	}
	m.fieldB[index] = value
	return nil
}

func (m *CustomNameEnum) FieldBSize() (size int) {
	if m != nil {
		return m.xxx_LenFieldB
	}
	return 0
}

func (m *CustomNameEnum) ClearFieldB() {
	if m != nil {
		m.xxx_LenFieldB = 0
	}
}

func (m *CustomNameEnum) GetFieldB(index int) (field TheTestEnum, err error) {
	if m == nil {
		return 0, errors.New("Cannot get nil message")
	}
	if index < 0 || index >= m.xxx_LenFieldB {
		return 0, errors.New("Index is out of bounds")
	}
	return m.fieldB[index], nil
}

func (m *CustomNameEnum) Clear() {
	if m != nil {
		m.ClearFieldA()
		m.ClearFieldB()
	}
}

type NoExtensionsMap struct {
	xxx_sizeCached   int
	field1           int64
	XXX_extensions   []byte
	XXX_unrecognized []byte
	xxx_IsField1Set  bool
}

func (m *NoExtensionsMap) Reset()      { *m = NoExtensionsMap{} }
func (*NoExtensionsMap) ProtoMessage() {}

var extRange_NoExtensionsMap = []proto.ExtensionRange{
	{100, 199},
}

func (m *NoExtensionsMap) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NoExtensionsMap
}
func (m *NoExtensionsMap) GetExtensions() *[]byte {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make([]byte, 0)
	}
	return &m.XXX_extensions
}

func (m *NoExtensionsMap) GetField1() int64 {
	if m != nil && m.xxx_IsField1Set {
		return m.field1
	}
	return 0
}

func (m *NoExtensionsMap) SizeCached() int {
	return m.xxx_sizeCached
}

func (m *NoExtensionsMap) SetField1(value int64) (err error) {
	if m == nil {
		return errors.New("Cannot assign to nil message")
	}
	m.xxx_IsField1Set = true
	m.field1 = value
	return nil
}

func (m *NoExtensionsMap) HasField1() (isSet bool) {
	if m != nil && m.xxx_IsField1Set {
		return true
	}
	return false
}

func (m *NoExtensionsMap) ClearField1() {
	if m != nil {
		m.xxx_IsField1Set = false
	}
}

func (m *NoExtensionsMap) Clear() {
	if m != nil {
		m.ClearField1()
	}
}

func (m *NidOptNative) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 9
	}
	if m.xxx_IsField2Set {
		n += 5
	}
	if m.xxx_IsField3Set {
		n += 1 + sovThetest(uint64(uint32(m.field3)))
	}
	if m.xxx_IsField4Set {
		n += 1 + sovThetest(uint64(m.field4))
	}
	if m.xxx_IsField5Set {
		n += 1 + sovThetest(uint64(m.field5))
	}
	if m.xxx_IsField6Set {
		n += 1 + sovThetest(uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		n += 1 + sozThetest(uint64(m.field7))
	}
	if m.xxx_IsField8Set {
		n += 1 + sozThetest(uint64(m.field8))
	}
	if m.xxx_IsField9Set {
		n += 5
	}
	if m.xxx_IsField10Set {
		n += 5
	}
	if m.xxx_IsField11Set {
		n += 9
	}
	if m.xxx_IsField12Set {
		n += 9
	}
	if m.xxx_IsField13Set {
		n += 2
	}
	if m.xxx_IsField14Set {
		l = len(m.field14)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField15Set {
		l = len(m.field15)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinOptNative) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 9
	}
	if m.xxx_IsField2Set {
		n += 5
	}
	if m.xxx_IsField3Set {
		n += 1 + sovThetest(uint64(uint32(m.field3)))
	}
	if m.xxx_IsField4Set {
		n += 1 + sovThetest(uint64(m.field4))
	}
	if m.xxx_IsField5Set {
		n += 1 + sovThetest(uint64(m.field5))
	}
	if m.xxx_IsField6Set {
		n += 1 + sovThetest(uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		n += 1 + sozThetest(uint64(m.field7))
	}
	if m.xxx_IsField8Set {
		n += 1 + sozThetest(uint64(m.field8))
	}
	if m.xxx_IsField9Set {
		n += 5
	}
	if m.xxx_IsField10Set {
		n += 5
	}
	if m.xxx_IsField11Set {
		n += 9
	}
	if m.xxx_IsField12Set {
		n += 9
	}
	if m.xxx_IsField13Set {
		n += 2
	}
	if m.xxx_IsField14Set {
		l = len(m.field14)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField15Set {
		l = len(m.field15)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NidRepNative) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		n += 9 * m.xxx_LenField1
	}
	if m.xxx_LenField2 > 0 {
		n += 5 * m.xxx_LenField2
	}
	if m.xxx_LenField3 > 0 {
		for i := 0; i < m.xxx_LenField3; i++ {
			e := m.field3[i]
			n += 1 + sovThetest(uint64(uint32(e)))
		}
	}
	if m.xxx_LenField4 > 0 {
		for i := 0; i < m.xxx_LenField4; i++ {
			e := m.field4[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenField5 > 0 {
		for i := 0; i < m.xxx_LenField5; i++ {
			e := m.field5[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenField6 > 0 {
		for i := 0; i < m.xxx_LenField6; i++ {
			e := m.field6[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenField7 > 0 {
		for i := 0; i < m.xxx_LenField7; i++ {
			e := m.field7[i]
			n += 1 + sozThetest(uint64(e))
		}
	}
	if m.xxx_LenField8 > 0 {
		for i := 0; i < m.xxx_LenField8; i++ {
			e := m.field8[i]
			n += 1 + sozThetest(uint64(e))
		}
	}
	if m.xxx_LenField9 > 0 {
		n += 5 * m.xxx_LenField9
	}
	if m.xxx_LenField10 > 0 {
		n += 5 * m.xxx_LenField10
	}
	if m.xxx_LenField11 > 0 {
		n += 9 * m.xxx_LenField11
	}
	if m.xxx_LenField12 > 0 {
		n += 9 * m.xxx_LenField12
	}
	if m.xxx_LenField13 > 0 {
		n += 2 * m.xxx_LenField13
	}
	if m.xxx_LenField14 > 0 {
		for i := 0; i < m.xxx_LenField14; i++ {
			s := m.field14[i]
			l = len(s)
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenField15 > 0 {
		for i := 0; i < m.xxx_LenField15; i++ {
			b := m.field15[i]
			l = len(b)
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinRepNative) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		n += 9 * m.xxx_LenField1
	}
	if m.xxx_LenField2 > 0 {
		n += 5 * m.xxx_LenField2
	}
	if m.xxx_LenField3 > 0 {
		for i := 0; i < m.xxx_LenField3; i++ {
			e := m.field3[i]
			n += 1 + sovThetest(uint64(uint32(e)))
		}
	}
	if m.xxx_LenField4 > 0 {
		for i := 0; i < m.xxx_LenField4; i++ {
			e := m.field4[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenField5 > 0 {
		for i := 0; i < m.xxx_LenField5; i++ {
			e := m.field5[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenField6 > 0 {
		for i := 0; i < m.xxx_LenField6; i++ {
			e := m.field6[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenField7 > 0 {
		for i := 0; i < m.xxx_LenField7; i++ {
			e := m.field7[i]
			n += 1 + sozThetest(uint64(e))
		}
	}
	if m.xxx_LenField8 > 0 {
		for i := 0; i < m.xxx_LenField8; i++ {
			e := m.field8[i]
			n += 1 + sozThetest(uint64(e))
		}
	}
	if m.xxx_LenField9 > 0 {
		n += 5 * m.xxx_LenField9
	}
	if m.xxx_LenField10 > 0 {
		n += 5 * m.xxx_LenField10
	}
	if m.xxx_LenField11 > 0 {
		n += 9 * m.xxx_LenField11
	}
	if m.xxx_LenField12 > 0 {
		n += 9 * m.xxx_LenField12
	}
	if m.xxx_LenField13 > 0 {
		n += 2 * m.xxx_LenField13
	}
	if m.xxx_LenField14 > 0 {
		for i := 0; i < m.xxx_LenField14; i++ {
			s := m.field14[i]
			l = len(s)
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenField15 > 0 {
		for i := 0; i < m.xxx_LenField15; i++ {
			b := m.field15[i]
			l = len(b)
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NidRepPackedNative) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField1*8)) + m.xxx_LenField1*8
	}
	if m.xxx_LenField2 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField2*4)) + m.xxx_LenField2*4
	}
	if m.xxx_LenField3 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField3; i++ {
			e := m.field3[i]
			l += sovThetest(uint64(uint32(e)))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField4 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField4; i++ {
			e := m.field4[i]
			l += sovThetest(uint64(e))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField5 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField5; i++ {
			e := m.field5[i]
			l += sovThetest(uint64(e))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField6 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField6; i++ {
			e := m.field6[i]
			l += sovThetest(uint64(e))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField7 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField7; i++ {
			e := m.field7[i]
			l += sozThetest(uint64(e))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField8 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField8; i++ {
			e := m.field8[i]
			l += sozThetest(uint64(e))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField9 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField9*4)) + m.xxx_LenField9*4
	}
	if m.xxx_LenField10 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField10*4)) + m.xxx_LenField10*4
	}
	if m.xxx_LenField11 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField11*8)) + m.xxx_LenField11*8
	}
	if m.xxx_LenField12 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField12*8)) + m.xxx_LenField12*8
	}
	if m.xxx_LenField13 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField13)) + m.xxx_LenField13*1
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinRepPackedNative) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField1*8)) + m.xxx_LenField1*8
	}
	if m.xxx_LenField2 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField2*4)) + m.xxx_LenField2*4
	}
	if m.xxx_LenField3 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField3; i++ {
			e := m.field3[i]
			l += sovThetest(uint64(uint32(e)))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField4 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField4; i++ {
			e := m.field4[i]
			l += sovThetest(uint64(e))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField5 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField5; i++ {
			e := m.field5[i]
			l += sovThetest(uint64(e))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField6 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField6; i++ {
			e := m.field6[i]
			l += sovThetest(uint64(e))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField7 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField7; i++ {
			e := m.field7[i]
			l += sozThetest(uint64(e))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField8 > 0 {
		l = 0
		for i := 0; i < m.xxx_LenField8; i++ {
			e := m.field8[i]
			l += sozThetest(uint64(e))
		}
		n += 1 + sovThetest(uint64(l)) + l
	}
	if m.xxx_LenField9 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField9*4)) + m.xxx_LenField9*4
	}
	if m.xxx_LenField10 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField10*4)) + m.xxx_LenField10*4
	}
	if m.xxx_LenField11 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField11*8)) + m.xxx_LenField11*8
	}
	if m.xxx_LenField12 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField12*8)) + m.xxx_LenField12*8
	}
	if m.xxx_LenField13 > 0 {
		n += 1 + sovThetest(uint64(m.xxx_LenField13)) + m.xxx_LenField13*1
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NidOptStruct) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 9
	}
	if m.xxx_IsField2Set {
		n += 5
	}
	if m.xxx_IsField3Set {
		l = m.field3.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField4Set {
		l = m.field4.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField6Set {
		n += 1 + sovThetest(uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		n += 1 + sozThetest(uint64(m.field7))
	}
	if m.xxx_IsField8Set {
		l = m.field8.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField13Set {
		n += 2
	}
	if m.xxx_IsField14Set {
		l = len(m.field14)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField15Set {
		l = len(m.field15)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinOptStruct) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 9
	}
	if m.xxx_IsField2Set {
		n += 5
	}
	if m.xxx_IsField3Set {
		l = m.field3.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField4Set {
		l = m.field4.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField6Set {
		n += 1 + sovThetest(uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		n += 1 + sozThetest(uint64(m.field7))
	}
	if m.xxx_IsField8Set {
		l = m.field8.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField13Set {
		n += 2
	}
	if m.xxx_IsField14Set {
		l = len(m.field14)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField15Set {
		l = len(m.field15)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NidRepStruct) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		n += 9 * m.xxx_LenField1
	}
	if m.xxx_LenField2 > 0 {
		n += 5 * m.xxx_LenField2
	}
	if m.xxx_LenField3 > 0 {
		for i := 0; i < m.xxx_LenField3; i++ {
			e := m.field3[i]
			l = e.Size()
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenField4 > 0 {
		for i := 0; i < m.xxx_LenField4; i++ {
			e := m.field4[i]
			l = e.Size()
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenField6 > 0 {
		for i := 0; i < m.xxx_LenField6; i++ {
			e := m.field6[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenField7 > 0 {
		for i := 0; i < m.xxx_LenField7; i++ {
			e := m.field7[i]
			n += 1 + sozThetest(uint64(e))
		}
	}
	if m.xxx_LenField8 > 0 {
		for i := 0; i < m.xxx_LenField8; i++ {
			e := m.field8[i]
			l = e.Size()
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenField13 > 0 {
		n += 2 * m.xxx_LenField13
	}
	if m.xxx_LenField14 > 0 {
		for i := 0; i < m.xxx_LenField14; i++ {
			s := m.field14[i]
			l = len(s)
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenField15 > 0 {
		for i := 0; i < m.xxx_LenField15; i++ {
			b := m.field15[i]
			l = len(b)
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinRepStruct) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		n += 9 * m.xxx_LenField1
	}
	if m.xxx_LenField2 > 0 {
		n += 5 * m.xxx_LenField2
	}
	if m.xxx_LenField3 > 0 {
		for i := 0; i < m.xxx_LenField3; i++ {
			e := m.field3[i]
			l = e.Size()
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenField4 > 0 {
		for i := 0; i < m.xxx_LenField4; i++ {
			e := m.field4[i]
			l = e.Size()
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenField6 > 0 {
		for i := 0; i < m.xxx_LenField6; i++ {
			e := m.field6[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenField7 > 0 {
		for i := 0; i < m.xxx_LenField7; i++ {
			e := m.field7[i]
			n += 1 + sozThetest(uint64(e))
		}
	}
	if m.xxx_LenField8 > 0 {
		for i := 0; i < m.xxx_LenField8; i++ {
			e := m.field8[i]
			l = e.Size()
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenField13 > 0 {
		n += 2 * m.xxx_LenField13
	}
	if m.xxx_LenField14 > 0 {
		for i := 0; i < m.xxx_LenField14; i++ {
			s := m.field14[i]
			l = len(s)
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenField15 > 0 {
		for i := 0; i < m.xxx_LenField15; i++ {
			b := m.field15[i]
			l = len(b)
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NidEmbeddedStruct) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsNidOptNativeSet {
		l = m.NidOptNative.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField200Set {
		l = m.field200.Size()
		n += 2 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField210Set {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinEmbeddedStruct) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsNidOptNativeSet {
		l = m.NidOptNative.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField200Set {
		l = m.field200.Size()
		n += 2 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField210Set {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NidNestedStruct) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		l = m.field1.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_LenField2 > 0 {
		for i := 0; i < m.xxx_LenField2; i++ {
			e := m.field2[i]
			l = e.Size()
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinNestedStruct) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		l = m.field1.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_LenField2 > 0 {
		for i := 0; i < m.xxx_LenField2; i++ {
			e := m.field2[i]
			l = e.Size()
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NidOptCustom) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsIdSet {
		n += 1 + sovThetest(uint64(m.id))
	}
	if m.xxx_IsValueSet {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinOptCustom) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsIdSet {
		n += 1 + sovThetest(uint64(m.id))
	}
	if m.xxx_IsValueSet {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NidRepCustom) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenId > 0 {
		for i := 0; i < m.xxx_LenId; i++ {
			e := m.id[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenValue > 0 {
		n += 9 * m.xxx_LenValue
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinRepCustom) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenId > 0 {
		for i := 0; i < m.xxx_LenId; i++ {
			e := m.id[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenValue > 0 {
		n += 9 * m.xxx_LenValue
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinOptNativeUnion) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 9
	}
	if m.xxx_IsField2Set {
		n += 5
	}
	if m.xxx_IsField3Set {
		n += 1 + sovThetest(uint64(uint32(m.field3)))
	}
	if m.xxx_IsField4Set {
		n += 1 + sovThetest(uint64(m.field4))
	}
	if m.xxx_IsField5Set {
		n += 1 + sovThetest(uint64(m.field5))
	}
	if m.xxx_IsField6Set {
		n += 1 + sovThetest(uint64(m.field6))
	}
	if m.xxx_IsField13Set {
		n += 2
	}
	if m.xxx_IsField14Set {
		l = len(m.field14)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField15Set {
		l = len(m.field15)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinOptStructUnion) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 9
	}
	if m.xxx_IsField2Set {
		n += 5
	}
	if m.xxx_IsField3Set {
		l = m.field3.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField4Set {
		l = m.field4.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField6Set {
		n += 1 + sovThetest(uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		n += 1 + sozThetest(uint64(m.field7))
	}
	if m.xxx_IsField13Set {
		n += 2
	}
	if m.xxx_IsField14Set {
		l = len(m.field14)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField15Set {
		l = len(m.field15)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinEmbeddedStructUnion) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsNidOptNativeSet {
		l = m.NidOptNative.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField200Set {
		l = m.field200.Size()
		n += 2 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField210Set {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinNestedStructUnion) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		l = m.field1.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField2Set {
		l = m.field2.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField3Set {
		l = m.field3.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *Tree) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsOrSet {
		l = m.or.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsAndSet {
		l = m.and.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsLeafSet {
		l = m.leaf.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *OrBranch) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsLeftSet {
		l = m.left.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsRightSet {
		l = m.right.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *AndBranch) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsLeftSet {
		l = m.left.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsRightSet {
		l = m.right.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *Leaf) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsValueSet {
		n += 1 + sovThetest(uint64(m.value))
	}
	if m.xxx_IsStrValueSet {
		l = len(m.strValue)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *DeepTree) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsDownSet {
		l = m.down.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsAndSet {
		l = m.and.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsLeafSet {
		l = m.leaf.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *ADeepBranch) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsDownSet {
		l = m.down.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *AndDeepBranch) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsLeftSet {
		l = m.left.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsRightSet {
		l = m.right.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *DeepLeaf) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsTreeSet {
		l = m.tree.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *Nil) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NidOptEnum) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 1 + sovThetest(uint64(m.field1))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinOptEnum) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 1 + sovThetest(uint64(m.field1))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NidRepEnum) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		for i := 0; i < m.xxx_LenField1; i++ {
			e := m.field1[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinRepEnum) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		for i := 0; i < m.xxx_LenField1; i++ {
			e := m.field1[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinOptEnumDefault) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 1 + sovThetest(uint64(m.field1))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *AnotherNinOptEnum) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 1 + sovThetest(uint64(m.field1))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *AnotherNinOptEnumDefault) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 1 + sovThetest(uint64(m.field1))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *Timer) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsTime1Set {
		n += 9
	}
	if m.xxx_IsTime2Set {
		n += 9
	}
	if m.xxx_IsDataSet {
		l = len(m.data)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *MyExtendable) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 1 + sovThetest(uint64(m.field1))
	}
	if m.XXX_extensions != nil {
		n += proto.SizeOfExtensionMap(m.XXX_extensions)
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *OtherExtenable) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField2Set {
		n += 1 + sovThetest(uint64(m.field2))
	}
	if m.xxx_IsField13Set {
		n += 1 + sovThetest(uint64(m.field13))
	}
	if m.xxx_IsMSet {
		l = m.m.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_extensions != nil {
		n += proto.SizeOfExtensionMap(m.XXX_extensions)
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NestedDefinition) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 1 + sovThetest(uint64(m.field1))
	}
	if m.xxx_IsEnumFieldSet {
		n += 1 + sovThetest(uint64(m.enumField))
	}
	if m.xxx_IsNNMSet {
		l = m.nNM.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsNMSet {
		l = m.nM.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NestedDefinition_NestedMessage) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsNestedField1Set {
		n += 9
	}
	if m.xxx_IsNNMSet {
		l = m.nNM.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NestedDefinition_NestedMessage_NestedNestedMsg) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsNestedNestedField1Set {
		l = len(m.nestedNestedField1)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NestedScope) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsASet {
		l = m.a.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsBSet {
		n += 1 + sovThetest(uint64(m.b))
	}
	if m.xxx_IsCSet {
		l = m.c.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NinOptNativeDefault) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 9
	}
	if m.xxx_IsField2Set {
		n += 5
	}
	if m.xxx_IsField3Set {
		n += 1 + sovThetest(uint64(uint32(m.field3)))
	}
	if m.xxx_IsField4Set {
		n += 1 + sovThetest(uint64(m.field4))
	}
	if m.xxx_IsField5Set {
		n += 1 + sovThetest(uint64(m.field5))
	}
	if m.xxx_IsField6Set {
		n += 1 + sovThetest(uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		n += 1 + sozThetest(uint64(m.field7))
	}
	if m.xxx_IsField8Set {
		n += 1 + sozThetest(uint64(m.field8))
	}
	if m.xxx_IsField9Set {
		n += 5
	}
	if m.xxx_IsField10Set {
		n += 5
	}
	if m.xxx_IsField11Set {
		n += 9
	}
	if m.xxx_IsField12Set {
		n += 9
	}
	if m.xxx_IsField13Set {
		n += 2
	}
	if m.xxx_IsField14Set {
		l = len(m.field14)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsField15Set {
		l = len(m.field15)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *CustomContainer) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsCustomStructSet {
		l = m.customStruct.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *CustomNameNidOptNative) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsFieldASet {
		n += 9
	}
	if m.xxx_IsFieldBSet {
		n += 5
	}
	if m.xxx_IsFieldCSet {
		n += 1 + sovThetest(uint64(uint32(m.fieldC)))
	}
	if m.xxx_IsFieldDSet {
		n += 1 + sovThetest(uint64(m.fieldD))
	}
	if m.xxx_IsFieldESet {
		n += 1 + sovThetest(uint64(m.fieldE))
	}
	if m.xxx_IsFieldFSet {
		n += 1 + sovThetest(uint64(m.fieldF))
	}
	if m.xxx_IsFieldGSet {
		n += 1 + sozThetest(uint64(m.fieldG))
	}
	if m.xxx_IsFieldHSet {
		n += 1 + sozThetest(uint64(m.fieldH))
	}
	if m.xxx_IsFieldISet {
		n += 5
	}
	if m.xxx_IsFieldJSet {
		n += 5
	}
	if m.xxx_IsFieldKSet {
		n += 9
	}
	if m.xxx_IsFieldLSet {
		n += 9
	}
	if m.xxx_IsFieldMSet {
		n += 2
	}
	if m.xxx_IsFieldNSet {
		l = len(m.fieldN)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsFieldOSet {
		l = len(m.fieldO)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *CustomNameNinOptNative) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsFieldASet {
		n += 9
	}
	if m.xxx_IsFieldBSet {
		n += 5
	}
	if m.xxx_IsFieldCSet {
		n += 1 + sovThetest(uint64(uint32(m.fieldC)))
	}
	if m.xxx_IsFieldDSet {
		n += 1 + sovThetest(uint64(m.fieldD))
	}
	if m.xxx_IsFieldESet {
		n += 1 + sovThetest(uint64(m.fieldE))
	}
	if m.xxx_IsFieldFSet {
		n += 1 + sovThetest(uint64(m.fieldF))
	}
	if m.xxx_IsFieldGSet {
		n += 1 + sozThetest(uint64(m.fieldG))
	}
	if m.xxx_IsFieldHSet {
		n += 1 + sozThetest(uint64(m.fieldH))
	}
	if m.xxx_IsFieldISet {
		n += 5
	}
	if m.xxx_IsFieldJSet {
		n += 5
	}
	if m.xxx_IsFieldKSet {
		n += 9
	}
	if m.xxx_IsFielLSet {
		n += 9
	}
	if m.xxx_IsFieldMSet {
		n += 2
	}
	if m.xxx_IsFieldNSet {
		l = len(m.fieldN)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsFieldOSet {
		l = len(m.fieldO)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *CustomNameNinRepNative) Size() (n int) {
	var l int
	_ = l
	if m.xxx_LenFieldA > 0 {
		n += 9 * m.xxx_LenFieldA
	}
	if m.xxx_LenFieldB > 0 {
		n += 5 * m.xxx_LenFieldB
	}
	if m.xxx_LenFieldC > 0 {
		for i := 0; i < m.xxx_LenFieldC; i++ {
			e := m.fieldC[i]
			n += 1 + sovThetest(uint64(uint32(e)))
		}
	}
	if m.xxx_LenFieldD > 0 {
		for i := 0; i < m.xxx_LenFieldD; i++ {
			e := m.fieldD[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenFieldE > 0 {
		for i := 0; i < m.xxx_LenFieldE; i++ {
			e := m.fieldE[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenFieldF > 0 {
		for i := 0; i < m.xxx_LenFieldF; i++ {
			e := m.fieldF[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenFieldG > 0 {
		for i := 0; i < m.xxx_LenFieldG; i++ {
			e := m.fieldG[i]
			n += 1 + sozThetest(uint64(e))
		}
	}
	if m.xxx_LenFieldH > 0 {
		for i := 0; i < m.xxx_LenFieldH; i++ {
			e := m.fieldH[i]
			n += 1 + sozThetest(uint64(e))
		}
	}
	if m.xxx_LenFieldI > 0 {
		n += 5 * m.xxx_LenFieldI
	}
	if m.xxx_LenFieldJ > 0 {
		n += 5 * m.xxx_LenFieldJ
	}
	if m.xxx_LenFieldK > 0 {
		n += 9 * m.xxx_LenFieldK
	}
	if m.xxx_LenFieldL > 0 {
		n += 9 * m.xxx_LenFieldL
	}
	if m.xxx_LenFieldM > 0 {
		n += 2 * m.xxx_LenFieldM
	}
	if m.xxx_LenFieldN > 0 {
		for i := 0; i < m.xxx_LenFieldN; i++ {
			s := m.fieldN[i]
			l = len(s)
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_LenFieldO > 0 {
		for i := 0; i < m.xxx_LenFieldO; i++ {
			b := m.fieldO[i]
			l = len(b)
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *CustomNameNinStruct) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsFieldASet {
		n += 9
	}
	if m.xxx_IsFieldBSet {
		n += 5
	}
	if m.xxx_IsFieldCSet {
		l = m.fieldC.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_LenFieldD > 0 {
		for i := 0; i < m.xxx_LenFieldD; i++ {
			e := m.fieldD[i]
			l = e.Size()
			n += 1 + l + sovThetest(uint64(l))
		}
	}
	if m.xxx_IsFieldESet {
		n += 1 + sovThetest(uint64(m.fieldE))
	}
	if m.xxx_IsFieldFSet {
		n += 1 + sozThetest(uint64(m.fieldF))
	}
	if m.xxx_IsFieldGSet {
		l = m.fieldG.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsFieldHSet {
		n += 2
	}
	if m.xxx_IsFieldISet {
		l = len(m.fieldI)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsFieldJSet {
		l = len(m.fieldJ)
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *CustomNameCustomType) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsFieldASet {
		n += 1 + sovThetest(uint64(m.fieldA))
	}
	if m.xxx_IsFieldBSet {
		n += 9
	}
	if m.xxx_LenFieldC > 0 {
		for i := 0; i < m.xxx_LenFieldC; i++ {
			e := m.fieldC[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.xxx_LenFieldD > 0 {
		n += 9 * m.xxx_LenFieldD
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *CustomNameNinEmbeddedStructUnion) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsNidOptNativeSet {
		l = m.NidOptNative.Size()
		n += 1 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsFieldASet {
		l = m.fieldA.Size()
		n += 2 + l + sovThetest(uint64(l))
	}
	if m.xxx_IsFieldBSet {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *CustomNameEnum) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsFieldASet {
		n += 1 + sovThetest(uint64(m.fieldA))
	}
	if m.xxx_LenFieldB > 0 {
		for i := 0; i < m.xxx_LenFieldB; i++ {
			e := m.fieldB[i]
			n += 1 + sovThetest(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}
func (m *NoExtensionsMap) Size() (n int) {
	var l int
	_ = l
	if m.xxx_IsField1Set {
		n += 1 + sovThetest(uint64(m.field1))
	}
	if m.XXX_extensions != nil {
		n += len(m.XXX_extensions)
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	m.xxx_sizeCached = n
	return n
}

func sovThetest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozThetest(x uint64) (n int) {
	return sovThetest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NidOptNative) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidOptNative) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidOptNative) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.field1))))
	}
	if m.xxx_IsField2Set {
		data[i] = 0x15
		i++
		i = encodeFixed32Thetest(data, i, uint32(math.Float32bits(float32(m.field2))))
	}
	if m.xxx_IsField3Set {
		data[i] = 0x18
		i++
		i = encodeVarintThetest(data, i, uint64(uint32(m.field3)))
	}
	if m.xxx_IsField4Set {
		data[i] = 0x20
		i++
		i = encodeVarintThetest(data, i, uint64(m.field4))
	}
	if m.xxx_IsField5Set {
		data[i] = 0x28
		i++
		i = encodeVarintThetest(data, i, uint64(m.field5))
	}
	if m.xxx_IsField6Set {
		data[i] = 0x30
		i++
		i = encodeVarintThetest(data, i, uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		data[i] = 0x38
		i++
		i = encodeVarintThetest(data, i, uint64((uint32(m.field7)<<1)^uint32((m.field7>>31))))
	}
	if m.xxx_IsField8Set {
		data[i] = 0x40
		i++
		i = encodeVarintThetest(data, i, uint64((uint64(m.field8)<<1)^uint64((m.field8>>63))))
	}
	if m.xxx_IsField9Set {
		data[i] = 0x4d
		i++
		i = encodeFixed32Thetest(data, i, uint32(m.field9))
	}
	if m.xxx_IsField10Set {
		data[i] = 0x55
		i++
		i = encodeFixed32Thetest(data, i, uint32(m.field10))
	}
	if m.xxx_IsField11Set {
		data[i] = 0x59
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.field11))
	}
	if m.xxx_IsField12Set {
		data[i] = 0x61
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.field12))
	}
	if m.xxx_IsField13Set {
		data[i] = 0x68
		i++
		if m.field13 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.xxx_IsField14Set {
		data[i] = 0x72
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field14)))
		i += copy(data[i:], m.field14)
	}
	if m.xxx_IsField15Set {
		data[i] = 0x7a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field15)))
		i += copy(data[i:], m.field15)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinOptNative) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinOptNative) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinOptNative) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.field1))))
	}
	if m.xxx_IsField2Set {
		data[i] = 0x15
		i++
		i = encodeFixed32Thetest(data, i, uint32(math.Float32bits(float32(m.field2))))
	}
	if m.xxx_IsField3Set {
		data[i] = 0x18
		i++
		i = encodeVarintThetest(data, i, uint64(uint32(m.field3)))
	}
	if m.xxx_IsField4Set {
		data[i] = 0x20
		i++
		i = encodeVarintThetest(data, i, uint64(m.field4))
	}
	if m.xxx_IsField5Set {
		data[i] = 0x28
		i++
		i = encodeVarintThetest(data, i, uint64(m.field5))
	}
	if m.xxx_IsField6Set {
		data[i] = 0x30
		i++
		i = encodeVarintThetest(data, i, uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		data[i] = 0x38
		i++
		i = encodeVarintThetest(data, i, uint64((uint32(m.field7)<<1)^uint32((m.field7>>31))))
	}
	if m.xxx_IsField8Set {
		data[i] = 0x40
		i++
		i = encodeVarintThetest(data, i, uint64((uint64(m.field8)<<1)^uint64((m.field8>>63))))
	}
	if m.xxx_IsField9Set {
		data[i] = 0x4d
		i++
		i = encodeFixed32Thetest(data, i, uint32(m.field9))
	}
	if m.xxx_IsField10Set {
		data[i] = 0x55
		i++
		i = encodeFixed32Thetest(data, i, uint32(m.field10))
	}
	if m.xxx_IsField11Set {
		data[i] = 0x59
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.field11))
	}
	if m.xxx_IsField12Set {
		data[i] = 0x61
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.field12))
	}
	if m.xxx_IsField13Set {
		data[i] = 0x68
		i++
		if m.field13 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.xxx_IsField14Set {
		data[i] = 0x72
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field14)))
		i += copy(data[i:], m.field14)
	}
	if m.xxx_IsField15Set {
		data[i] = 0x7a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field15)))
		i += copy(data[i:], m.field15)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NidRepNative) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidRepNative) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidRepNative) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		for idx := 0; idx < m.xxx_LenField1; idx++ {
			num := m.field1[idx]
			data[i] = 0x9
			i++
			f1 := math.Float64bits(float64(num))
			data[i] = uint8(f1)
			i++
			data[i] = uint8(f1 >> 8)
			i++
			data[i] = uint8(f1 >> 16)
			i++
			data[i] = uint8(f1 >> 24)
			i++
			data[i] = uint8(f1 >> 32)
			i++
			data[i] = uint8(f1 >> 40)
			i++
			data[i] = uint8(f1 >> 48)
			i++
			data[i] = uint8(f1 >> 56)
			i++
		}
	}
	if m.xxx_LenField2 > 0 {
		for idx := 0; idx < m.xxx_LenField2; idx++ {
			num := m.field2[idx]
			data[i] = 0x15
			i++
			f2 := math.Float32bits(float32(num))
			data[i] = uint8(f2)
			i++
			data[i] = uint8(f2 >> 8)
			i++
			data[i] = uint8(f2 >> 16)
			i++
			data[i] = uint8(f2 >> 24)
			i++
		}
	}
	if m.xxx_LenField3 > 0 {
		for idx := 0; idx < m.xxx_LenField3; idx++ {
			num := m.field3[idx]
			data[i] = 0x18
			i++
			i = encodeVarintThetest(data, i, uint64(uint32(num)))
		}
	}
	if m.xxx_LenField4 > 0 {
		for idx := 0; idx < m.xxx_LenField4; idx++ {
			num := m.field4[idx]
			data[i] = 0x20
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenField5 > 0 {
		for idx := 0; idx < m.xxx_LenField5; idx++ {
			num := m.field5[idx]
			data[i] = 0x28
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenField6 > 0 {
		for idx := 0; idx < m.xxx_LenField6; idx++ {
			num := m.field6[idx]
			data[i] = 0x30
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenField7 > 0 {
		for idx := 0; idx < m.xxx_LenField7; idx++ {
			num := m.field7[idx]
			data[i] = 0x38
			i++
			x3 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x3 >= 1<<7 {
				data[i] = uint8(uint64(x3)&0x7f | 0x80)
				x3 >>= 7
				i++
			}
			data[i] = uint8(x3)
			i++
		}
	}
	if m.xxx_LenField8 > 0 {
		for idx := 0; idx < m.xxx_LenField8; idx++ {
			num := m.field8[idx]
			data[i] = 0x40
			i++
			x4 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x4 >= 1<<7 {
				data[i] = uint8(uint64(x4)&0x7f | 0x80)
				x4 >>= 7
				i++
			}
			data[i] = uint8(x4)
			i++
		}
	}
	if m.xxx_LenField9 > 0 {
		for idx := 0; idx < m.xxx_LenField9; idx++ {
			num := m.field9[idx]
			data[i] = 0x4d
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
		}
	}
	if m.xxx_LenField10 > 0 {
		for idx := 0; idx < m.xxx_LenField10; idx++ {
			num := m.field10[idx]
			data[i] = 0x55
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
		}
	}
	if m.xxx_LenField11 > 0 {
		for idx := 0; idx < m.xxx_LenField11; idx++ {
			num := m.field11[idx]
			data[i] = 0x59
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
			data[i] = uint8(num >> 32)
			i++
			data[i] = uint8(num >> 40)
			i++
			data[i] = uint8(num >> 48)
			i++
			data[i] = uint8(num >> 56)
			i++
		}
	}
	if m.xxx_LenField12 > 0 {
		for idx := 0; idx < m.xxx_LenField12; idx++ {
			num := m.field12[idx]
			data[i] = 0x61
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
			data[i] = uint8(num >> 32)
			i++
			data[i] = uint8(num >> 40)
			i++
			data[i] = uint8(num >> 48)
			i++
			data[i] = uint8(num >> 56)
			i++
		}
	}
	if m.xxx_LenField13 > 0 {
		for idx := 0; idx < m.xxx_LenField13; idx++ {
			b := m.field13[idx]
			data[i] = 0x68
			i++
			if b {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
		}
	}
	if m.xxx_LenField14 > 0 {
		for idx := 0; idx < m.xxx_LenField14; idx++ {
			s := m.field14[idx]
			data[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.xxx_LenField15 > 0 {
		for idx := 0; idx < m.xxx_LenField15; idx++ {
			b := m.field15[idx]
			data[i] = 0x7a
			i++
			i = encodeVarintThetest(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinRepNative) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinRepNative) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinRepNative) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		for idx := 0; idx < m.xxx_LenField1; idx++ {
			num := m.field1[idx]
			data[i] = 0x9
			i++
			f5 := math.Float64bits(float64(num))
			data[i] = uint8(f5)
			i++
			data[i] = uint8(f5 >> 8)
			i++
			data[i] = uint8(f5 >> 16)
			i++
			data[i] = uint8(f5 >> 24)
			i++
			data[i] = uint8(f5 >> 32)
			i++
			data[i] = uint8(f5 >> 40)
			i++
			data[i] = uint8(f5 >> 48)
			i++
			data[i] = uint8(f5 >> 56)
			i++
		}
	}
	if m.xxx_LenField2 > 0 {
		for idx := 0; idx < m.xxx_LenField2; idx++ {
			num := m.field2[idx]
			data[i] = 0x15
			i++
			f6 := math.Float32bits(float32(num))
			data[i] = uint8(f6)
			i++
			data[i] = uint8(f6 >> 8)
			i++
			data[i] = uint8(f6 >> 16)
			i++
			data[i] = uint8(f6 >> 24)
			i++
		}
	}
	if m.xxx_LenField3 > 0 {
		for idx := 0; idx < m.xxx_LenField3; idx++ {
			num := m.field3[idx]
			data[i] = 0x18
			i++
			i = encodeVarintThetest(data, i, uint64(uint32(num)))
		}
	}
	if m.xxx_LenField4 > 0 {
		for idx := 0; idx < m.xxx_LenField4; idx++ {
			num := m.field4[idx]
			data[i] = 0x20
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenField5 > 0 {
		for idx := 0; idx < m.xxx_LenField5; idx++ {
			num := m.field5[idx]
			data[i] = 0x28
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenField6 > 0 {
		for idx := 0; idx < m.xxx_LenField6; idx++ {
			num := m.field6[idx]
			data[i] = 0x30
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenField7 > 0 {
		for idx := 0; idx < m.xxx_LenField7; idx++ {
			num := m.field7[idx]
			data[i] = 0x38
			i++
			x7 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x7 >= 1<<7 {
				data[i] = uint8(uint64(x7)&0x7f | 0x80)
				x7 >>= 7
				i++
			}
			data[i] = uint8(x7)
			i++
		}
	}
	if m.xxx_LenField8 > 0 {
		for idx := 0; idx < m.xxx_LenField8; idx++ {
			num := m.field8[idx]
			data[i] = 0x40
			i++
			x8 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x8 >= 1<<7 {
				data[i] = uint8(uint64(x8)&0x7f | 0x80)
				x8 >>= 7
				i++
			}
			data[i] = uint8(x8)
			i++
		}
	}
	if m.xxx_LenField9 > 0 {
		for idx := 0; idx < m.xxx_LenField9; idx++ {
			num := m.field9[idx]
			data[i] = 0x4d
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
		}
	}
	if m.xxx_LenField10 > 0 {
		for idx := 0; idx < m.xxx_LenField10; idx++ {
			num := m.field10[idx]
			data[i] = 0x55
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
		}
	}
	if m.xxx_LenField11 > 0 {
		for idx := 0; idx < m.xxx_LenField11; idx++ {
			num := m.field11[idx]
			data[i] = 0x59
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
			data[i] = uint8(num >> 32)
			i++
			data[i] = uint8(num >> 40)
			i++
			data[i] = uint8(num >> 48)
			i++
			data[i] = uint8(num >> 56)
			i++
		}
	}
	if m.xxx_LenField12 > 0 {
		for idx := 0; idx < m.xxx_LenField12; idx++ {
			num := m.field12[idx]
			data[i] = 0x61
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
			data[i] = uint8(num >> 32)
			i++
			data[i] = uint8(num >> 40)
			i++
			data[i] = uint8(num >> 48)
			i++
			data[i] = uint8(num >> 56)
			i++
		}
	}
	if m.xxx_LenField13 > 0 {
		for idx := 0; idx < m.xxx_LenField13; idx++ {
			b := m.field13[idx]
			data[i] = 0x68
			i++
			if b {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
		}
	}
	if m.xxx_LenField14 > 0 {
		for idx := 0; idx < m.xxx_LenField14; idx++ {
			s := m.field14[idx]
			data[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.xxx_LenField15 > 0 {
		for idx := 0; idx < m.xxx_LenField15; idx++ {
			b := m.field15[idx]
			data[i] = 0x7a
			i++
			i = encodeVarintThetest(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NidRepPackedNative) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidRepPackedNative) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidRepPackedNative) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField1*8))
		for idx := 0; idx < m.xxx_LenField1; idx++ {
			num := m.field1[idx]
			f9 := math.Float64bits(float64(num))
			data[i] = uint8(f9)
			i++
			data[i] = uint8(f9 >> 8)
			i++
			data[i] = uint8(f9 >> 16)
			i++
			data[i] = uint8(f9 >> 24)
			i++
			data[i] = uint8(f9 >> 32)
			i++
			data[i] = uint8(f9 >> 40)
			i++
			data[i] = uint8(f9 >> 48)
			i++
			data[i] = uint8(f9 >> 56)
			i++
		}
	}
	if m.xxx_LenField2 > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField2*4))
		for idx := 0; idx < m.xxx_LenField2; idx++ {
			num := m.field2[idx]
			f10 := math.Float32bits(float32(num))
			data[i] = uint8(f10)
			i++
			data[i] = uint8(f10 >> 8)
			i++
			data[i] = uint8(f10 >> 16)
			i++
			data[i] = uint8(f10 >> 24)
			i++
		}
	}
	if m.xxx_LenField3 > 0 {
		data12 := make([]byte, m.xxx_LenField3*10)
		var j11 int
		for idx := 0; idx < m.xxx_LenField3; idx++ {
			num := uint32(m.field3[idx])
			for num >= 1<<7 {
				data12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			data12[j11] = uint8(num)
			j11++
		}
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(j11))
		i += copy(data[i:], data12[:j11])
	}
	if m.xxx_LenField4 > 0 {
		data14 := make([]byte, m.xxx_LenField4*10)
		var j13 int
		for idx := 0; idx < m.xxx_LenField4; idx++ {
			num := uint64(m.field4[idx])
			for num >= 1<<7 {
				data14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			data14[j13] = uint8(num)
			j13++
		}
		data[i] = 0x22
		i++
		i = encodeVarintThetest(data, i, uint64(j13))
		i += copy(data[i:], data14[:j13])
	}
	if m.xxx_LenField5 > 0 {
		data16 := make([]byte, m.xxx_LenField5*10)
		var j15 int
		for idx := 0; idx < m.xxx_LenField5; idx++ {
			num := m.field5[idx]
			for num >= 1<<7 {
				data16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			data16[j15] = uint8(num)
			j15++
		}
		data[i] = 0x2a
		i++
		i = encodeVarintThetest(data, i, uint64(j15))
		i += copy(data[i:], data16[:j15])
	}
	if m.xxx_LenField6 > 0 {
		data18 := make([]byte, m.xxx_LenField6*10)
		var j17 int
		for idx := 0; idx < m.xxx_LenField6; idx++ {
			num := m.field6[idx]
			for num >= 1<<7 {
				data18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			data18[j17] = uint8(num)
			j17++
		}
		data[i] = 0x32
		i++
		i = encodeVarintThetest(data, i, uint64(j17))
		i += copy(data[i:], data18[:j17])
	}
	if m.xxx_LenField7 > 0 {
		data19 := make([]byte, m.xxx_LenField7*5)
		var j20 int
		for idx := 0; idx < m.xxx_LenField7; idx++ {
			num := m.field7[idx]
			x21 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x21 >= 1<<7 {
				data19[j20] = uint8(uint64(x21)&0x7f | 0x80)
				j20++
				x21 >>= 7
			}
			data19[j20] = uint8(x21)
			j20++
		}
		data[i] = 0x3a
		i++
		i = encodeVarintThetest(data, i, uint64(j20))
		i += copy(data[i:], data19[:j20])
	}
	if m.xxx_LenField8 > 0 {
		var j22 int
		data24 := make([]byte, m.xxx_LenField8*10)
		for idx := 0; idx < m.xxx_LenField8; idx++ {
			num := m.field8[idx]
			x23 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x23 >= 1<<7 {
				data24[j22] = uint8(uint64(x23)&0x7f | 0x80)
				j22++
				x23 >>= 7
			}
			data24[j22] = uint8(x23)
			j22++
		}
		data[i] = 0x42
		i++
		i = encodeVarintThetest(data, i, uint64(j22))
		i += copy(data[i:], data24[:j22])
	}
	if m.xxx_LenField9 > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField9*4))
		for idx := 0; idx < m.xxx_LenField9; idx++ {
			num := m.field9[idx]
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
		}
	}
	if m.xxx_LenField10 > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField10*4))
		for idx := 0; idx < m.xxx_LenField10; idx++ {
			num := m.field10[idx]
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
		}
	}
	if m.xxx_LenField11 > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField11*8))
		for idx := 0; idx < m.xxx_LenField11; idx++ {
			num := m.field11[idx]
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
			data[i] = uint8(num >> 32)
			i++
			data[i] = uint8(num >> 40)
			i++
			data[i] = uint8(num >> 48)
			i++
			data[i] = uint8(num >> 56)
			i++
		}
	}
	if m.xxx_LenField12 > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField12*8))
		for idx := 0; idx < m.xxx_LenField12; idx++ {
			num := m.field12[idx]
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
			data[i] = uint8(num >> 32)
			i++
			data[i] = uint8(num >> 40)
			i++
			data[i] = uint8(num >> 48)
			i++
			data[i] = uint8(num >> 56)
			i++
		}
	}
	if m.xxx_LenField13 > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField13))
		for idx := 0; idx < m.xxx_LenField13; idx++ {
			b := m.field13[idx]
			if b {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinRepPackedNative) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinRepPackedNative) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinRepPackedNative) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField1*8))
		for idx := 0; idx < m.xxx_LenField1; idx++ {
			num := m.field1[idx]
			f25 := math.Float64bits(float64(num))
			data[i] = uint8(f25)
			i++
			data[i] = uint8(f25 >> 8)
			i++
			data[i] = uint8(f25 >> 16)
			i++
			data[i] = uint8(f25 >> 24)
			i++
			data[i] = uint8(f25 >> 32)
			i++
			data[i] = uint8(f25 >> 40)
			i++
			data[i] = uint8(f25 >> 48)
			i++
			data[i] = uint8(f25 >> 56)
			i++
		}
	}
	if m.xxx_LenField2 > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField2*4))
		for idx := 0; idx < m.xxx_LenField2; idx++ {
			num := m.field2[idx]
			f26 := math.Float32bits(float32(num))
			data[i] = uint8(f26)
			i++
			data[i] = uint8(f26 >> 8)
			i++
			data[i] = uint8(f26 >> 16)
			i++
			data[i] = uint8(f26 >> 24)
			i++
		}
	}
	if m.xxx_LenField3 > 0 {
		data28 := make([]byte, m.xxx_LenField3*10)
		var j27 int
		for idx := 0; idx < m.xxx_LenField3; idx++ {
			num := uint32(m.field3[idx])
			for num >= 1<<7 {
				data28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			data28[j27] = uint8(num)
			j27++
		}
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(j27))
		i += copy(data[i:], data28[:j27])
	}
	if m.xxx_LenField4 > 0 {
		data30 := make([]byte, m.xxx_LenField4*10)
		var j29 int
		for idx := 0; idx < m.xxx_LenField4; idx++ {
			num := uint64(m.field4[idx])
			for num >= 1<<7 {
				data30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			data30[j29] = uint8(num)
			j29++
		}
		data[i] = 0x22
		i++
		i = encodeVarintThetest(data, i, uint64(j29))
		i += copy(data[i:], data30[:j29])
	}
	if m.xxx_LenField5 > 0 {
		data32 := make([]byte, m.xxx_LenField5*10)
		var j31 int
		for idx := 0; idx < m.xxx_LenField5; idx++ {
			num := m.field5[idx]
			for num >= 1<<7 {
				data32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			data32[j31] = uint8(num)
			j31++
		}
		data[i] = 0x2a
		i++
		i = encodeVarintThetest(data, i, uint64(j31))
		i += copy(data[i:], data32[:j31])
	}
	if m.xxx_LenField6 > 0 {
		data34 := make([]byte, m.xxx_LenField6*10)
		var j33 int
		for idx := 0; idx < m.xxx_LenField6; idx++ {
			num := m.field6[idx]
			for num >= 1<<7 {
				data34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			data34[j33] = uint8(num)
			j33++
		}
		data[i] = 0x32
		i++
		i = encodeVarintThetest(data, i, uint64(j33))
		i += copy(data[i:], data34[:j33])
	}
	if m.xxx_LenField7 > 0 {
		data35 := make([]byte, m.xxx_LenField7*5)
		var j36 int
		for idx := 0; idx < m.xxx_LenField7; idx++ {
			num := m.field7[idx]
			x37 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x37 >= 1<<7 {
				data35[j36] = uint8(uint64(x37)&0x7f | 0x80)
				j36++
				x37 >>= 7
			}
			data35[j36] = uint8(x37)
			j36++
		}
		data[i] = 0x3a
		i++
		i = encodeVarintThetest(data, i, uint64(j36))
		i += copy(data[i:], data35[:j36])
	}
	if m.xxx_LenField8 > 0 {
		var j38 int
		data40 := make([]byte, m.xxx_LenField8*10)
		for idx := 0; idx < m.xxx_LenField8; idx++ {
			num := m.field8[idx]
			x39 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x39 >= 1<<7 {
				data40[j38] = uint8(uint64(x39)&0x7f | 0x80)
				j38++
				x39 >>= 7
			}
			data40[j38] = uint8(x39)
			j38++
		}
		data[i] = 0x42
		i++
		i = encodeVarintThetest(data, i, uint64(j38))
		i += copy(data[i:], data40[:j38])
	}
	if m.xxx_LenField9 > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField9*4))
		for idx := 0; idx < m.xxx_LenField9; idx++ {
			num := m.field9[idx]
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
		}
	}
	if m.xxx_LenField10 > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField10*4))
		for idx := 0; idx < m.xxx_LenField10; idx++ {
			num := m.field10[idx]
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
		}
	}
	if m.xxx_LenField11 > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField11*8))
		for idx := 0; idx < m.xxx_LenField11; idx++ {
			num := m.field11[idx]
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
			data[i] = uint8(num >> 32)
			i++
			data[i] = uint8(num >> 40)
			i++
			data[i] = uint8(num >> 48)
			i++
			data[i] = uint8(num >> 56)
			i++
		}
	}
	if m.xxx_LenField12 > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField12*8))
		for idx := 0; idx < m.xxx_LenField12; idx++ {
			num := m.field12[idx]
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
			data[i] = uint8(num >> 32)
			i++
			data[i] = uint8(num >> 40)
			i++
			data[i] = uint8(num >> 48)
			i++
			data[i] = uint8(num >> 56)
			i++
		}
	}
	if m.xxx_LenField13 > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintThetest(data, i, uint64(m.xxx_LenField13))
		for idx := 0; idx < m.xxx_LenField13; idx++ {
			b := m.field13[idx]
			if b {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NidOptStruct) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidOptStruct) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidOptStruct) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.field1))))
	}
	if m.xxx_IsField2Set {
		data[i] = 0x15
		i++
		i = encodeFixed32Thetest(data, i, uint32(math.Float32bits(float32(m.field2))))
	}
	if m.xxx_IsField3Set {
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(m.field3.SizeCached()))
		n41, err := m.field3.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.xxx_IsField4Set {
		data[i] = 0x22
		i++
		i = encodeVarintThetest(data, i, uint64(m.field4.SizeCached()))
		n42, err := m.field4.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.xxx_IsField6Set {
		data[i] = 0x30
		i++
		i = encodeVarintThetest(data, i, uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		data[i] = 0x38
		i++
		i = encodeVarintThetest(data, i, uint64((uint32(m.field7)<<1)^uint32((m.field7>>31))))
	}
	if m.xxx_IsField8Set {
		data[i] = 0x42
		i++
		i = encodeVarintThetest(data, i, uint64(m.field8.SizeCached()))
		n43, err := m.field8.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.xxx_IsField13Set {
		data[i] = 0x68
		i++
		if m.field13 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.xxx_IsField14Set {
		data[i] = 0x72
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field14)))
		i += copy(data[i:], m.field14)
	}
	if m.xxx_IsField15Set {
		data[i] = 0x7a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field15)))
		i += copy(data[i:], m.field15)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinOptStruct) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinOptStruct) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinOptStruct) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.field1))))
	}
	if m.xxx_IsField2Set {
		data[i] = 0x15
		i++
		i = encodeFixed32Thetest(data, i, uint32(math.Float32bits(float32(m.field2))))
	}
	if m.xxx_IsField3Set {
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(m.field3.SizeCached()))
		n44, err := m.field3.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.xxx_IsField4Set {
		data[i] = 0x22
		i++
		i = encodeVarintThetest(data, i, uint64(m.field4.SizeCached()))
		n45, err := m.field4.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.xxx_IsField6Set {
		data[i] = 0x30
		i++
		i = encodeVarintThetest(data, i, uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		data[i] = 0x38
		i++
		i = encodeVarintThetest(data, i, uint64((uint32(m.field7)<<1)^uint32((m.field7>>31))))
	}
	if m.xxx_IsField8Set {
		data[i] = 0x42
		i++
		i = encodeVarintThetest(data, i, uint64(m.field8.SizeCached()))
		n46, err := m.field8.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.xxx_IsField13Set {
		data[i] = 0x68
		i++
		if m.field13 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.xxx_IsField14Set {
		data[i] = 0x72
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field14)))
		i += copy(data[i:], m.field14)
	}
	if m.xxx_IsField15Set {
		data[i] = 0x7a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field15)))
		i += copy(data[i:], m.field15)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NidRepStruct) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidRepStruct) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidRepStruct) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		for idx := 0; idx < m.xxx_LenField1; idx++ {
			num := m.field1[idx]
			data[i] = 0x9
			i++
			f47 := math.Float64bits(float64(num))
			data[i] = uint8(f47)
			i++
			data[i] = uint8(f47 >> 8)
			i++
			data[i] = uint8(f47 >> 16)
			i++
			data[i] = uint8(f47 >> 24)
			i++
			data[i] = uint8(f47 >> 32)
			i++
			data[i] = uint8(f47 >> 40)
			i++
			data[i] = uint8(f47 >> 48)
			i++
			data[i] = uint8(f47 >> 56)
			i++
		}
	}
	if m.xxx_LenField2 > 0 {
		for idx := 0; idx < m.xxx_LenField2; idx++ {
			num := m.field2[idx]
			data[i] = 0x15
			i++
			f48 := math.Float32bits(float32(num))
			data[i] = uint8(f48)
			i++
			data[i] = uint8(f48 >> 8)
			i++
			data[i] = uint8(f48 >> 16)
			i++
			data[i] = uint8(f48 >> 24)
			i++
		}
	}
	if m.xxx_LenField3 > 0 {
		for idx := 0; idx < m.xxx_LenField3; idx++ {
			msg := m.field3[idx]
			data[i] = 0x1a
			i++
			i = encodeVarintThetest(data, i, uint64(msg.SizeCached()))
			n, err := msg.MarshalToUsingCachedSize(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.xxx_LenField4 > 0 {
		for idx := 0; idx < m.xxx_LenField4; idx++ {
			msg := m.field4[idx]
			data[i] = 0x22
			i++
			i = encodeVarintThetest(data, i, uint64(msg.SizeCached()))
			n, err := msg.MarshalToUsingCachedSize(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.xxx_LenField6 > 0 {
		for idx := 0; idx < m.xxx_LenField6; idx++ {
			num := m.field6[idx]
			data[i] = 0x30
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenField7 > 0 {
		for idx := 0; idx < m.xxx_LenField7; idx++ {
			num := m.field7[idx]
			data[i] = 0x38
			i++
			x49 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x49 >= 1<<7 {
				data[i] = uint8(uint64(x49)&0x7f | 0x80)
				x49 >>= 7
				i++
			}
			data[i] = uint8(x49)
			i++
		}
	}
	if m.xxx_LenField8 > 0 {
		for idx := 0; idx < m.xxx_LenField8; idx++ {
			msg := m.field8[idx]
			data[i] = 0x42
			i++
			i = encodeVarintThetest(data, i, uint64(msg.SizeCached()))
			n, err := msg.MarshalToUsingCachedSize(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.xxx_LenField13 > 0 {
		for idx := 0; idx < m.xxx_LenField13; idx++ {
			b := m.field13[idx]
			data[i] = 0x68
			i++
			if b {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
		}
	}
	if m.xxx_LenField14 > 0 {
		for idx := 0; idx < m.xxx_LenField14; idx++ {
			s := m.field14[idx]
			data[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.xxx_LenField15 > 0 {
		for idx := 0; idx < m.xxx_LenField15; idx++ {
			b := m.field15[idx]
			data[i] = 0x7a
			i++
			i = encodeVarintThetest(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinRepStruct) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinRepStruct) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinRepStruct) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		for idx := 0; idx < m.xxx_LenField1; idx++ {
			num := m.field1[idx]
			data[i] = 0x9
			i++
			f50 := math.Float64bits(float64(num))
			data[i] = uint8(f50)
			i++
			data[i] = uint8(f50 >> 8)
			i++
			data[i] = uint8(f50 >> 16)
			i++
			data[i] = uint8(f50 >> 24)
			i++
			data[i] = uint8(f50 >> 32)
			i++
			data[i] = uint8(f50 >> 40)
			i++
			data[i] = uint8(f50 >> 48)
			i++
			data[i] = uint8(f50 >> 56)
			i++
		}
	}
	if m.xxx_LenField2 > 0 {
		for idx := 0; idx < m.xxx_LenField2; idx++ {
			num := m.field2[idx]
			data[i] = 0x15
			i++
			f51 := math.Float32bits(float32(num))
			data[i] = uint8(f51)
			i++
			data[i] = uint8(f51 >> 8)
			i++
			data[i] = uint8(f51 >> 16)
			i++
			data[i] = uint8(f51 >> 24)
			i++
		}
	}
	if m.xxx_LenField3 > 0 {
		for idx := 0; idx < m.xxx_LenField3; idx++ {
			msg := m.field3[idx]
			data[i] = 0x1a
			i++
			i = encodeVarintThetest(data, i, uint64(msg.SizeCached()))
			n, err := msg.MarshalToUsingCachedSize(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.xxx_LenField4 > 0 {
		for idx := 0; idx < m.xxx_LenField4; idx++ {
			msg := m.field4[idx]
			data[i] = 0x22
			i++
			i = encodeVarintThetest(data, i, uint64(msg.SizeCached()))
			n, err := msg.MarshalToUsingCachedSize(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.xxx_LenField6 > 0 {
		for idx := 0; idx < m.xxx_LenField6; idx++ {
			num := m.field6[idx]
			data[i] = 0x30
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenField7 > 0 {
		for idx := 0; idx < m.xxx_LenField7; idx++ {
			num := m.field7[idx]
			data[i] = 0x38
			i++
			x52 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x52 >= 1<<7 {
				data[i] = uint8(uint64(x52)&0x7f | 0x80)
				x52 >>= 7
				i++
			}
			data[i] = uint8(x52)
			i++
		}
	}
	if m.xxx_LenField8 > 0 {
		for idx := 0; idx < m.xxx_LenField8; idx++ {
			msg := m.field8[idx]
			data[i] = 0x42
			i++
			i = encodeVarintThetest(data, i, uint64(msg.SizeCached()))
			n, err := msg.MarshalToUsingCachedSize(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.xxx_LenField13 > 0 {
		for idx := 0; idx < m.xxx_LenField13; idx++ {
			b := m.field13[idx]
			data[i] = 0x68
			i++
			if b {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
		}
	}
	if m.xxx_LenField14 > 0 {
		for idx := 0; idx < m.xxx_LenField14; idx++ {
			s := m.field14[idx]
			data[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.xxx_LenField15 > 0 {
		for idx := 0; idx < m.xxx_LenField15; idx++ {
			b := m.field15[idx]
			data[i] = 0x7a
			i++
			i = encodeVarintThetest(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NidEmbeddedStruct) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidEmbeddedStruct) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidEmbeddedStruct) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsNidOptNativeSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.NidOptNative.SizeCached()))
		n53, err := m.NidOptNative.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if m.xxx_IsField200Set {
		data[i] = 0xc2
		i++
		data[i] = 0xc
		i++
		i = encodeVarintThetest(data, i, uint64(m.field200.SizeCached()))
		n54, err := m.field200.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	if m.xxx_IsField210Set {
		data[i] = 0x90
		i++
		data[i] = 0xd
		i++
		if m.field210 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinEmbeddedStruct) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinEmbeddedStruct) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinEmbeddedStruct) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsNidOptNativeSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.NidOptNative.SizeCached()))
		n55, err := m.NidOptNative.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.xxx_IsField200Set {
		data[i] = 0xc2
		i++
		data[i] = 0xc
		i++
		i = encodeVarintThetest(data, i, uint64(m.field200.SizeCached()))
		n56, err := m.field200.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if m.xxx_IsField210Set {
		data[i] = 0x90
		i++
		data[i] = 0xd
		i++
		if m.field210 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NidNestedStruct) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidNestedStruct) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidNestedStruct) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1.SizeCached()))
		n57, err := m.field1.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	if m.xxx_LenField2 > 0 {
		for idx := 0; idx < m.xxx_LenField2; idx++ {
			msg := m.field2[idx]
			data[i] = 0x12
			i++
			i = encodeVarintThetest(data, i, uint64(msg.SizeCached()))
			n, err := msg.MarshalToUsingCachedSize(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinNestedStruct) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinNestedStruct) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinNestedStruct) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1.SizeCached()))
		n58, err := m.field1.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	if m.xxx_LenField2 > 0 {
		for idx := 0; idx < m.xxx_LenField2; idx++ {
			msg := m.field2[idx]
			data[i] = 0x12
			i++
			i = encodeVarintThetest(data, i, uint64(msg.SizeCached()))
			n, err := msg.MarshalToUsingCachedSize(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NidOptCustom) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidOptCustom) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidOptCustom) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsIdSet {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.id))
	}
	if m.xxx_IsValueSet {
		data[i] = 0x11
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.value))))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinOptCustom) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinOptCustom) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinOptCustom) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsIdSet {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.id))
	}
	if m.xxx_IsValueSet {
		data[i] = 0x11
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.value))))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NidRepCustom) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidRepCustom) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidRepCustom) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenId > 0 {
		for idx := 0; idx < m.xxx_LenId; idx++ {
			num := m.id[idx]
			data[i] = 0x8
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenValue > 0 {
		for idx := 0; idx < m.xxx_LenValue; idx++ {
			num := m.value[idx]
			data[i] = 0x11
			i++
			f59 := math.Float64bits(float64(num))
			data[i] = uint8(f59)
			i++
			data[i] = uint8(f59 >> 8)
			i++
			data[i] = uint8(f59 >> 16)
			i++
			data[i] = uint8(f59 >> 24)
			i++
			data[i] = uint8(f59 >> 32)
			i++
			data[i] = uint8(f59 >> 40)
			i++
			data[i] = uint8(f59 >> 48)
			i++
			data[i] = uint8(f59 >> 56)
			i++
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinRepCustom) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinRepCustom) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinRepCustom) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenId > 0 {
		for idx := 0; idx < m.xxx_LenId; idx++ {
			num := m.id[idx]
			data[i] = 0x8
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenValue > 0 {
		for idx := 0; idx < m.xxx_LenValue; idx++ {
			num := m.value[idx]
			data[i] = 0x11
			i++
			f60 := math.Float64bits(float64(num))
			data[i] = uint8(f60)
			i++
			data[i] = uint8(f60 >> 8)
			i++
			data[i] = uint8(f60 >> 16)
			i++
			data[i] = uint8(f60 >> 24)
			i++
			data[i] = uint8(f60 >> 32)
			i++
			data[i] = uint8(f60 >> 40)
			i++
			data[i] = uint8(f60 >> 48)
			i++
			data[i] = uint8(f60 >> 56)
			i++
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinOptNativeUnion) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinOptNativeUnion) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinOptNativeUnion) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.field1))))
	}
	if m.xxx_IsField2Set {
		data[i] = 0x15
		i++
		i = encodeFixed32Thetest(data, i, uint32(math.Float32bits(float32(m.field2))))
	}
	if m.xxx_IsField3Set {
		data[i] = 0x18
		i++
		i = encodeVarintThetest(data, i, uint64(uint32(m.field3)))
	}
	if m.xxx_IsField4Set {
		data[i] = 0x20
		i++
		i = encodeVarintThetest(data, i, uint64(m.field4))
	}
	if m.xxx_IsField5Set {
		data[i] = 0x28
		i++
		i = encodeVarintThetest(data, i, uint64(m.field5))
	}
	if m.xxx_IsField6Set {
		data[i] = 0x30
		i++
		i = encodeVarintThetest(data, i, uint64(m.field6))
	}
	if m.xxx_IsField13Set {
		data[i] = 0x68
		i++
		if m.field13 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.xxx_IsField14Set {
		data[i] = 0x72
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field14)))
		i += copy(data[i:], m.field14)
	}
	if m.xxx_IsField15Set {
		data[i] = 0x7a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field15)))
		i += copy(data[i:], m.field15)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinOptStructUnion) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinOptStructUnion) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinOptStructUnion) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.field1))))
	}
	if m.xxx_IsField2Set {
		data[i] = 0x15
		i++
		i = encodeFixed32Thetest(data, i, uint32(math.Float32bits(float32(m.field2))))
	}
	if m.xxx_IsField3Set {
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(m.field3.SizeCached()))
		n61, err := m.field3.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	if m.xxx_IsField4Set {
		data[i] = 0x22
		i++
		i = encodeVarintThetest(data, i, uint64(m.field4.SizeCached()))
		n62, err := m.field4.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if m.xxx_IsField6Set {
		data[i] = 0x30
		i++
		i = encodeVarintThetest(data, i, uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		data[i] = 0x38
		i++
		i = encodeVarintThetest(data, i, uint64((uint32(m.field7)<<1)^uint32((m.field7>>31))))
	}
	if m.xxx_IsField13Set {
		data[i] = 0x68
		i++
		if m.field13 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.xxx_IsField14Set {
		data[i] = 0x72
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field14)))
		i += copy(data[i:], m.field14)
	}
	if m.xxx_IsField15Set {
		data[i] = 0x7a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field15)))
		i += copy(data[i:], m.field15)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinEmbeddedStructUnion) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinEmbeddedStructUnion) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinEmbeddedStructUnion) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsNidOptNativeSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.NidOptNative.SizeCached()))
		n63, err := m.NidOptNative.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	if m.xxx_IsField200Set {
		data[i] = 0xc2
		i++
		data[i] = 0xc
		i++
		i = encodeVarintThetest(data, i, uint64(m.field200.SizeCached()))
		n64, err := m.field200.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	if m.xxx_IsField210Set {
		data[i] = 0x90
		i++
		data[i] = 0xd
		i++
		if m.field210 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinNestedStructUnion) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinNestedStructUnion) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinNestedStructUnion) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1.SizeCached()))
		n65, err := m.field1.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.xxx_IsField2Set {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(m.field2.SizeCached()))
		n66, err := m.field2.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if m.xxx_IsField3Set {
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(m.field3.SizeCached()))
		n67, err := m.field3.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Tree) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Tree) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *Tree) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsOrSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.or.SizeCached()))
		n68, err := m.or.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	if m.xxx_IsAndSet {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(m.and.SizeCached()))
		n69, err := m.and.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	if m.xxx_IsLeafSet {
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(m.leaf.SizeCached()))
		n70, err := m.leaf.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *OrBranch) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OrBranch) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *OrBranch) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsLeftSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.left.SizeCached()))
		n71, err := m.left.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	if m.xxx_IsRightSet {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(m.right.SizeCached()))
		n72, err := m.right.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *AndBranch) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AndBranch) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *AndBranch) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsLeftSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.left.SizeCached()))
		n73, err := m.left.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	if m.xxx_IsRightSet {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(m.right.SizeCached()))
		n74, err := m.right.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Leaf) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Leaf) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *Leaf) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsValueSet {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.value))
	}
	if m.xxx_IsStrValueSet {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.strValue)))
		i += copy(data[i:], m.strValue)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *DeepTree) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeepTree) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *DeepTree) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsDownSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.down.SizeCached()))
		n75, err := m.down.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	if m.xxx_IsAndSet {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(m.and.SizeCached()))
		n76, err := m.and.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	if m.xxx_IsLeafSet {
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(m.leaf.SizeCached()))
		n77, err := m.leaf.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *ADeepBranch) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ADeepBranch) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *ADeepBranch) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsDownSet {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(m.down.SizeCached()))
		n78, err := m.down.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *AndDeepBranch) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AndDeepBranch) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *AndDeepBranch) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsLeftSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.left.SizeCached()))
		n79, err := m.left.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	if m.xxx_IsRightSet {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(m.right.SizeCached()))
		n80, err := m.right.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *DeepLeaf) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeepLeaf) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *DeepLeaf) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsTreeSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.tree.SizeCached()))
		n81, err := m.tree.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Nil) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Nil) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *Nil) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NidOptEnum) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidOptEnum) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidOptEnum) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinOptEnum) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinOptEnum) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinOptEnum) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NidRepEnum) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NidRepEnum) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NidRepEnum) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		for idx := 0; idx < m.xxx_LenField1; idx++ {
			num := m.field1[idx]
			data[i] = 0x8
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinRepEnum) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinRepEnum) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinRepEnum) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenField1 > 0 {
		for idx := 0; idx < m.xxx_LenField1; idx++ {
			num := m.field1[idx]
			data[i] = 0x8
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinOptEnumDefault) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinOptEnumDefault) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinOptEnumDefault) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *AnotherNinOptEnum) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AnotherNinOptEnum) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *AnotherNinOptEnum) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *AnotherNinOptEnumDefault) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AnotherNinOptEnumDefault) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *AnotherNinOptEnumDefault) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Timer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Timer) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *Timer) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsTime1Set {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.time1))
	}
	if m.xxx_IsTime2Set {
		data[i] = 0x11
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.time2))
	}
	if m.xxx_IsDataSet {
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.data)))
		i += copy(data[i:], m.data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *MyExtendable) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MyExtendable) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *MyExtendable) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1))
	}
	if len(m.XXX_extensions) > 0 {
		n, err := proto.EncodeExtensionMap(m.XXX_extensions, data[i:])
		if err != nil {
			return 0, err
		}
		i += n
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *OtherExtenable) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OtherExtenable) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *OtherExtenable) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField2Set {
		data[i] = 0x10
		i++
		i = encodeVarintThetest(data, i, uint64(m.field2))
	}
	if m.xxx_IsField13Set {
		data[i] = 0x68
		i++
		i = encodeVarintThetest(data, i, uint64(m.field13))
	}
	if m.xxx_IsMSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.m.SizeCached()))
		n82, err := m.m.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	if len(m.XXX_extensions) > 0 {
		n, err := proto.EncodeExtensionMap(m.XXX_extensions, data[i:])
		if err != nil {
			return 0, err
		}
		i += n
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NestedDefinition) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NestedDefinition) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NestedDefinition) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1))
	}
	if m.xxx_IsEnumFieldSet {
		data[i] = 0x10
		i++
		i = encodeVarintThetest(data, i, uint64(m.enumField))
	}
	if m.xxx_IsNNMSet {
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(m.nNM.SizeCached()))
		n83, err := m.nNM.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	if m.xxx_IsNMSet {
		data[i] = 0x22
		i++
		i = encodeVarintThetest(data, i, uint64(m.nM.SizeCached()))
		n84, err := m.nM.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NestedDefinition_NestedMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NestedDefinition_NestedMessage) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NestedDefinition_NestedMessage) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsNestedField1Set {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.nestedField1))
	}
	if m.xxx_IsNNMSet {
		data[i] = 0x12
		i++
		i = encodeVarintThetest(data, i, uint64(m.nNM.SizeCached()))
		n85, err := m.nNM.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NestedDefinition_NestedMessage_NestedNestedMsg) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NestedDefinition_NestedMessage_NestedNestedMsg) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NestedDefinition_NestedMessage_NestedNestedMsg) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsNestedNestedField1Set {
		data[i] = 0x52
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.nestedNestedField1)))
		i += copy(data[i:], m.nestedNestedField1)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NestedScope) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NestedScope) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NestedScope) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsASet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.a.SizeCached()))
		n86, err := m.a.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	if m.xxx_IsBSet {
		data[i] = 0x10
		i++
		i = encodeVarintThetest(data, i, uint64(m.b))
	}
	if m.xxx_IsCSet {
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(m.c.SizeCached()))
		n87, err := m.c.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NinOptNativeDefault) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NinOptNativeDefault) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NinOptNativeDefault) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.field1))))
	}
	if m.xxx_IsField2Set {
		data[i] = 0x15
		i++
		i = encodeFixed32Thetest(data, i, uint32(math.Float32bits(float32(m.field2))))
	}
	if m.xxx_IsField3Set {
		data[i] = 0x18
		i++
		i = encodeVarintThetest(data, i, uint64(uint32(m.field3)))
	}
	if m.xxx_IsField4Set {
		data[i] = 0x20
		i++
		i = encodeVarintThetest(data, i, uint64(m.field4))
	}
	if m.xxx_IsField5Set {
		data[i] = 0x28
		i++
		i = encodeVarintThetest(data, i, uint64(m.field5))
	}
	if m.xxx_IsField6Set {
		data[i] = 0x30
		i++
		i = encodeVarintThetest(data, i, uint64(m.field6))
	}
	if m.xxx_IsField7Set {
		data[i] = 0x38
		i++
		i = encodeVarintThetest(data, i, uint64((uint32(m.field7)<<1)^uint32((m.field7>>31))))
	}
	if m.xxx_IsField8Set {
		data[i] = 0x40
		i++
		i = encodeVarintThetest(data, i, uint64((uint64(m.field8)<<1)^uint64((m.field8>>63))))
	}
	if m.xxx_IsField9Set {
		data[i] = 0x4d
		i++
		i = encodeFixed32Thetest(data, i, uint32(m.field9))
	}
	if m.xxx_IsField10Set {
		data[i] = 0x55
		i++
		i = encodeFixed32Thetest(data, i, uint32(m.field10))
	}
	if m.xxx_IsField11Set {
		data[i] = 0x59
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.field11))
	}
	if m.xxx_IsField12Set {
		data[i] = 0x61
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.field12))
	}
	if m.xxx_IsField13Set {
		data[i] = 0x68
		i++
		if m.field13 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.xxx_IsField14Set {
		data[i] = 0x72
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field14)))
		i += copy(data[i:], m.field14)
	}
	if m.xxx_IsField15Set {
		data[i] = 0x7a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.field15)))
		i += copy(data[i:], m.field15)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *CustomContainer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomContainer) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *CustomContainer) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsCustomStructSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.customStruct.SizeCached()))
		n88, err := m.customStruct.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *CustomNameNidOptNative) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomNameNidOptNative) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *CustomNameNidOptNative) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsFieldASet {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.fieldA))))
	}
	if m.xxx_IsFieldBSet {
		data[i] = 0x15
		i++
		i = encodeFixed32Thetest(data, i, uint32(math.Float32bits(float32(m.fieldB))))
	}
	if m.xxx_IsFieldCSet {
		data[i] = 0x18
		i++
		i = encodeVarintThetest(data, i, uint64(uint32(m.fieldC)))
	}
	if m.xxx_IsFieldDSet {
		data[i] = 0x20
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldD))
	}
	if m.xxx_IsFieldESet {
		data[i] = 0x28
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldE))
	}
	if m.xxx_IsFieldFSet {
		data[i] = 0x30
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldF))
	}
	if m.xxx_IsFieldGSet {
		data[i] = 0x38
		i++
		i = encodeVarintThetest(data, i, uint64((uint32(m.fieldG)<<1)^uint32((m.fieldG>>31))))
	}
	if m.xxx_IsFieldHSet {
		data[i] = 0x40
		i++
		i = encodeVarintThetest(data, i, uint64((uint64(m.fieldH)<<1)^uint64((m.fieldH>>63))))
	}
	if m.xxx_IsFieldISet {
		data[i] = 0x4d
		i++
		i = encodeFixed32Thetest(data, i, uint32(m.fieldI))
	}
	if m.xxx_IsFieldJSet {
		data[i] = 0x55
		i++
		i = encodeFixed32Thetest(data, i, uint32(m.fieldJ))
	}
	if m.xxx_IsFieldKSet {
		data[i] = 0x59
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.fieldK))
	}
	if m.xxx_IsFieldLSet {
		data[i] = 0x61
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.fieldL))
	}
	if m.xxx_IsFieldMSet {
		data[i] = 0x68
		i++
		if m.fieldM {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.xxx_IsFieldNSet {
		data[i] = 0x72
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.fieldN)))
		i += copy(data[i:], m.fieldN)
	}
	if m.xxx_IsFieldOSet {
		data[i] = 0x7a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.fieldO)))
		i += copy(data[i:], m.fieldO)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *CustomNameNinOptNative) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomNameNinOptNative) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *CustomNameNinOptNative) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsFieldASet {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.fieldA))))
	}
	if m.xxx_IsFieldBSet {
		data[i] = 0x15
		i++
		i = encodeFixed32Thetest(data, i, uint32(math.Float32bits(float32(m.fieldB))))
	}
	if m.xxx_IsFieldCSet {
		data[i] = 0x18
		i++
		i = encodeVarintThetest(data, i, uint64(uint32(m.fieldC)))
	}
	if m.xxx_IsFieldDSet {
		data[i] = 0x20
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldD))
	}
	if m.xxx_IsFieldESet {
		data[i] = 0x28
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldE))
	}
	if m.xxx_IsFieldFSet {
		data[i] = 0x30
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldF))
	}
	if m.xxx_IsFieldGSet {
		data[i] = 0x38
		i++
		i = encodeVarintThetest(data, i, uint64((uint32(m.fieldG)<<1)^uint32((m.fieldG>>31))))
	}
	if m.xxx_IsFieldHSet {
		data[i] = 0x40
		i++
		i = encodeVarintThetest(data, i, uint64((uint64(m.fieldH)<<1)^uint64((m.fieldH>>63))))
	}
	if m.xxx_IsFieldISet {
		data[i] = 0x4d
		i++
		i = encodeFixed32Thetest(data, i, uint32(m.fieldI))
	}
	if m.xxx_IsFieldJSet {
		data[i] = 0x55
		i++
		i = encodeFixed32Thetest(data, i, uint32(m.fieldJ))
	}
	if m.xxx_IsFieldKSet {
		data[i] = 0x59
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.fieldK))
	}
	if m.xxx_IsFielLSet {
		data[i] = 0x61
		i++
		i = encodeFixed64Thetest(data, i, uint64(m.fielL))
	}
	if m.xxx_IsFieldMSet {
		data[i] = 0x68
		i++
		if m.fieldM {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.xxx_IsFieldNSet {
		data[i] = 0x72
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.fieldN)))
		i += copy(data[i:], m.fieldN)
	}
	if m.xxx_IsFieldOSet {
		data[i] = 0x7a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.fieldO)))
		i += copy(data[i:], m.fieldO)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *CustomNameNinRepNative) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomNameNinRepNative) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *CustomNameNinRepNative) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_LenFieldA > 0 {
		for idx := 0; idx < m.xxx_LenFieldA; idx++ {
			num := m.fieldA[idx]
			data[i] = 0x9
			i++
			f89 := math.Float64bits(float64(num))
			data[i] = uint8(f89)
			i++
			data[i] = uint8(f89 >> 8)
			i++
			data[i] = uint8(f89 >> 16)
			i++
			data[i] = uint8(f89 >> 24)
			i++
			data[i] = uint8(f89 >> 32)
			i++
			data[i] = uint8(f89 >> 40)
			i++
			data[i] = uint8(f89 >> 48)
			i++
			data[i] = uint8(f89 >> 56)
			i++
		}
	}
	if m.xxx_LenFieldB > 0 {
		for idx := 0; idx < m.xxx_LenFieldB; idx++ {
			num := m.fieldB[idx]
			data[i] = 0x15
			i++
			f90 := math.Float32bits(float32(num))
			data[i] = uint8(f90)
			i++
			data[i] = uint8(f90 >> 8)
			i++
			data[i] = uint8(f90 >> 16)
			i++
			data[i] = uint8(f90 >> 24)
			i++
		}
	}
	if m.xxx_LenFieldC > 0 {
		for idx := 0; idx < m.xxx_LenFieldC; idx++ {
			num := m.fieldC[idx]
			data[i] = 0x18
			i++
			i = encodeVarintThetest(data, i, uint64(uint32(num)))
		}
	}
	if m.xxx_LenFieldD > 0 {
		for idx := 0; idx < m.xxx_LenFieldD; idx++ {
			num := m.fieldD[idx]
			data[i] = 0x20
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenFieldE > 0 {
		for idx := 0; idx < m.xxx_LenFieldE; idx++ {
			num := m.fieldE[idx]
			data[i] = 0x28
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenFieldF > 0 {
		for idx := 0; idx < m.xxx_LenFieldF; idx++ {
			num := m.fieldF[idx]
			data[i] = 0x30
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenFieldG > 0 {
		for idx := 0; idx < m.xxx_LenFieldG; idx++ {
			num := m.fieldG[idx]
			data[i] = 0x38
			i++
			x91 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x91 >= 1<<7 {
				data[i] = uint8(uint64(x91)&0x7f | 0x80)
				x91 >>= 7
				i++
			}
			data[i] = uint8(x91)
			i++
		}
	}
	if m.xxx_LenFieldH > 0 {
		for idx := 0; idx < m.xxx_LenFieldH; idx++ {
			num := m.fieldH[idx]
			data[i] = 0x40
			i++
			x92 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x92 >= 1<<7 {
				data[i] = uint8(uint64(x92)&0x7f | 0x80)
				x92 >>= 7
				i++
			}
			data[i] = uint8(x92)
			i++
		}
	}
	if m.xxx_LenFieldI > 0 {
		for idx := 0; idx < m.xxx_LenFieldI; idx++ {
			num := m.fieldI[idx]
			data[i] = 0x4d
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
		}
	}
	if m.xxx_LenFieldJ > 0 {
		for idx := 0; idx < m.xxx_LenFieldJ; idx++ {
			num := m.fieldJ[idx]
			data[i] = 0x55
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
		}
	}
	if m.xxx_LenFieldK > 0 {
		for idx := 0; idx < m.xxx_LenFieldK; idx++ {
			num := m.fieldK[idx]
			data[i] = 0x59
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
			data[i] = uint8(num >> 32)
			i++
			data[i] = uint8(num >> 40)
			i++
			data[i] = uint8(num >> 48)
			i++
			data[i] = uint8(num >> 56)
			i++
		}
	}
	if m.xxx_LenFieldL > 0 {
		for idx := 0; idx < m.xxx_LenFieldL; idx++ {
			num := m.fieldL[idx]
			data[i] = 0x61
			i++
			data[i] = uint8(num)
			i++
			data[i] = uint8(num >> 8)
			i++
			data[i] = uint8(num >> 16)
			i++
			data[i] = uint8(num >> 24)
			i++
			data[i] = uint8(num >> 32)
			i++
			data[i] = uint8(num >> 40)
			i++
			data[i] = uint8(num >> 48)
			i++
			data[i] = uint8(num >> 56)
			i++
		}
	}
	if m.xxx_LenFieldM > 0 {
		for idx := 0; idx < m.xxx_LenFieldM; idx++ {
			b := m.fieldM[idx]
			data[i] = 0x68
			i++
			if b {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
		}
	}
	if m.xxx_LenFieldN > 0 {
		for idx := 0; idx < m.xxx_LenFieldN; idx++ {
			s := m.fieldN[idx]
			data[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.xxx_LenFieldO > 0 {
		for idx := 0; idx < m.xxx_LenFieldO; idx++ {
			b := m.fieldO[idx]
			data[i] = 0x7a
			i++
			i = encodeVarintThetest(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *CustomNameNinStruct) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomNameNinStruct) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *CustomNameNinStruct) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsFieldASet {
		data[i] = 0x9
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.fieldA))))
	}
	if m.xxx_IsFieldBSet {
		data[i] = 0x15
		i++
		i = encodeFixed32Thetest(data, i, uint32(math.Float32bits(float32(m.fieldB))))
	}
	if m.xxx_IsFieldCSet {
		data[i] = 0x1a
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldC.SizeCached()))
		n93, err := m.fieldC.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	if m.xxx_LenFieldD > 0 {
		for idx := 0; idx < m.xxx_LenFieldD; idx++ {
			msg := m.fieldD[idx]
			data[i] = 0x22
			i++
			i = encodeVarintThetest(data, i, uint64(msg.SizeCached()))
			n, err := msg.MarshalToUsingCachedSize(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.xxx_IsFieldESet {
		data[i] = 0x30
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldE))
	}
	if m.xxx_IsFieldFSet {
		data[i] = 0x38
		i++
		i = encodeVarintThetest(data, i, uint64((uint32(m.fieldF)<<1)^uint32((m.fieldF>>31))))
	}
	if m.xxx_IsFieldGSet {
		data[i] = 0x42
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldG.SizeCached()))
		n94, err := m.fieldG.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	if m.xxx_IsFieldHSet {
		data[i] = 0x68
		i++
		if m.fieldH {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.xxx_IsFieldISet {
		data[i] = 0x72
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.fieldI)))
		i += copy(data[i:], m.fieldI)
	}
	if m.xxx_IsFieldJSet {
		data[i] = 0x7a
		i++
		i = encodeVarintThetest(data, i, uint64(len(m.fieldJ)))
		i += copy(data[i:], m.fieldJ)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *CustomNameCustomType) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomNameCustomType) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *CustomNameCustomType) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsFieldASet {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldA))
	}
	if m.xxx_IsFieldBSet {
		data[i] = 0x11
		i++
		i = encodeFixed64Thetest(data, i, uint64(math.Float64bits(float64(m.fieldB))))
	}
	if m.xxx_LenFieldC > 0 {
		for idx := 0; idx < m.xxx_LenFieldC; idx++ {
			num := m.fieldC[idx]
			data[i] = 0x18
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.xxx_LenFieldD > 0 {
		for idx := 0; idx < m.xxx_LenFieldD; idx++ {
			num := m.fieldD[idx]
			data[i] = 0x21
			i++
			f95 := math.Float64bits(float64(num))
			data[i] = uint8(f95)
			i++
			data[i] = uint8(f95 >> 8)
			i++
			data[i] = uint8(f95 >> 16)
			i++
			data[i] = uint8(f95 >> 24)
			i++
			data[i] = uint8(f95 >> 32)
			i++
			data[i] = uint8(f95 >> 40)
			i++
			data[i] = uint8(f95 >> 48)
			i++
			data[i] = uint8(f95 >> 56)
			i++
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *CustomNameNinEmbeddedStructUnion) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomNameNinEmbeddedStructUnion) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *CustomNameNinEmbeddedStructUnion) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsNidOptNativeSet {
		data[i] = 0xa
		i++
		i = encodeVarintThetest(data, i, uint64(m.NidOptNative.SizeCached()))
		n96, err := m.NidOptNative.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	if m.xxx_IsFieldASet {
		data[i] = 0xc2
		i++
		data[i] = 0xc
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldA.SizeCached()))
		n97, err := m.fieldA.MarshalToUsingCachedSize(data[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	if m.xxx_IsFieldBSet {
		data[i] = 0x90
		i++
		data[i] = 0xd
		i++
		if m.fieldB {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *CustomNameEnum) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomNameEnum) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *CustomNameEnum) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsFieldASet {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.fieldA))
	}
	if m.xxx_LenFieldB > 0 {
		for idx := 0; idx < m.xxx_LenFieldB; idx++ {
			num := m.fieldB[idx]
			data[i] = 0x10
			i++
			i = encodeVarintThetest(data, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NoExtensionsMap) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalToUsingCachedSize(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NoExtensionsMap) MarshalTo(data []byte) (n int, err error) {
	m.Size()
	return m.MarshalToUsingCachedSize(data)
}

func (m *NoExtensionsMap) MarshalToUsingCachedSize(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.xxx_IsField1Set {
		data[i] = 0x8
		i++
		i = encodeVarintThetest(data, i, uint64(m.field1))
	}
	if m.XXX_extensions != nil {
		i += copy(data[i:], m.XXX_extensions)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func encodeFixed64Thetest(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Thetest(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintThetest(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *NidOptNative) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.field1 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_IsField2Set = true
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.field2 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_IsField3Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_IsField4Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field4 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field5", wireType)
			}
			m.xxx_IsField5Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field5 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_IsField6Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
			m.xxx_IsField7Set = true
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.field7 = int32(v)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
			m.xxx_IsField8Set = true
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.field8 = int64(int64(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field9", wireType)
			}
			m.xxx_IsField9Set = true
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field9 = uint32(data[i-4])
			m.field9 |= uint32(data[i-3]) << 8
			m.field9 |= uint32(data[i-2]) << 16
			m.field9 |= uint32(data[i-1]) << 24
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field10", wireType)
			}
			m.xxx_IsField10Set = true
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field10 = int32(data[i-4])
			m.field10 |= int32(data[i-3]) << 8
			m.field10 |= int32(data[i-2]) << 16
			m.field10 |= int32(data[i-1]) << 24
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field11", wireType)
			}
			m.xxx_IsField11Set = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field11 = uint64(data[i-8])
			m.field11 |= uint64(data[i-7]) << 8
			m.field11 |= uint64(data[i-6]) << 16
			m.field11 |= uint64(data[i-5]) << 24
			m.field11 |= uint64(data[i-4]) << 32
			m.field11 |= uint64(data[i-3]) << 40
			m.field11 |= uint64(data[i-2]) << 48
			m.field11 |= uint64(data[i-1]) << 56
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field12", wireType)
			}
			m.xxx_IsField12Set = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field12 = int64(data[i-8])
			m.field12 |= int64(data[i-7]) << 8
			m.field12 |= int64(data[i-6]) << 16
			m.field12 |= int64(data[i-5]) << 24
			m.field12 |= int64(data[i-4]) << 32
			m.field12 |= int64(data[i-3]) << 40
			m.field12 |= int64(data[i-2]) << 48
			m.field12 |= int64(data[i-1]) << 56
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_IsField13Set = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = bool(bool(v != 0))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_IsField14Set = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = string(data[index:postIndex])
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_IsField15Set = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinOptNative) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.field1 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_IsField2Set = true
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.field2 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_IsField3Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_IsField4Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field4 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field5", wireType)
			}
			m.xxx_IsField5Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field5 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_IsField6Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
			m.xxx_IsField7Set = true
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.field7 = int32(v)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
			m.xxx_IsField8Set = true
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.field8 = int64(int64(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field9", wireType)
			}
			m.xxx_IsField9Set = true
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field9 = uint32(data[i-4])
			m.field9 |= uint32(data[i-3]) << 8
			m.field9 |= uint32(data[i-2]) << 16
			m.field9 |= uint32(data[i-1]) << 24
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field10", wireType)
			}
			m.xxx_IsField10Set = true
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field10 = int32(data[i-4])
			m.field10 |= int32(data[i-3]) << 8
			m.field10 |= int32(data[i-2]) << 16
			m.field10 |= int32(data[i-1]) << 24
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field11", wireType)
			}
			m.xxx_IsField11Set = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field11 = uint64(data[i-8])
			m.field11 |= uint64(data[i-7]) << 8
			m.field11 |= uint64(data[i-6]) << 16
			m.field11 |= uint64(data[i-5]) << 24
			m.field11 |= uint64(data[i-4]) << 32
			m.field11 |= uint64(data[i-3]) << 40
			m.field11 |= uint64(data[i-2]) << 48
			m.field11 |= uint64(data[i-1]) << 56
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field12", wireType)
			}
			m.xxx_IsField12Set = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field12 = int64(data[i-8])
			m.field12 |= int64(data[i-7]) << 8
			m.field12 |= int64(data[i-6]) << 16
			m.field12 |= int64(data[i-5]) << 24
			m.field12 |= int64(data[i-4]) << 32
			m.field12 |= int64(data[i-3]) << 40
			m.field12 |= int64(data[i-2]) << 48
			m.field12 |= int64(data[i-1]) << 56
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_IsField13Set = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = bool(bool(v != 0))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_IsField14Set = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = string(data[index:postIndex])
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_IsField15Set = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NidRepNative) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_LenField1 += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			v2 := math.Float64frombits(v)
			m.field1 = append(m.field1, float64(v2))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_LenField2 += 1
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			v2 := math.Float32frombits(v)
			m.field2 = append(m.field2, float32(v2))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_LenField3 += 1
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field3 = append(m.field3, int32(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_LenField4 += 1
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field4 = append(m.field4, int64(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field5", wireType)
			}
			m.xxx_LenField5 += 1
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field5 = append(m.field5, uint32(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_LenField6 += 1
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field6 = append(m.field6, uint64(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
			m.xxx_LenField7 += 1
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.field7 = append(m.field7, int32(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
			m.xxx_LenField8 += 1
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.field8 = append(m.field8, int64(int64(v)))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field9", wireType)
			}
			m.xxx_LenField9 += 1
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.field9 = append(m.field9, uint32(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field10", wireType)
			}
			m.xxx_LenField10 += 1
			var v int32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = int32(data[i-4])
			v |= int32(data[i-3]) << 8
			v |= int32(data[i-2]) << 16
			v |= int32(data[i-1]) << 24
			m.field10 = append(m.field10, int32(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field11", wireType)
			}
			m.xxx_LenField11 += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.field11 = append(m.field11, uint64(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field12", wireType)
			}
			m.xxx_LenField12 += 1
			var v int64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = int64(data[i-8])
			v |= int64(data[i-7]) << 8
			v |= int64(data[i-6]) << 16
			v |= int64(data[i-5]) << 24
			v |= int64(data[i-4]) << 32
			v |= int64(data[i-3]) << 40
			v |= int64(data[i-2]) << 48
			v |= int64(data[i-1]) << 56
			m.field12 = append(m.field12, int64(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_LenField13 += 1
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = append(m.field13, bool(bool(v != 0)))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_LenField14 += 1
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = append(m.field14, string(data[index:postIndex]))
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_LenField15 += 1
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, make([]byte, postIndex-index))
			copy(m.field15[len(m.field15)-1], data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinRepNative) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_LenField1 += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			v2 := math.Float64frombits(v)
			m.field1 = append(m.field1, float64(v2))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_LenField2 += 1
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			v2 := math.Float32frombits(v)
			m.field2 = append(m.field2, float32(v2))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_LenField3 += 1
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field3 = append(m.field3, int32(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_LenField4 += 1
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field4 = append(m.field4, int64(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field5", wireType)
			}
			m.xxx_LenField5 += 1
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field5 = append(m.field5, uint32(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_LenField6 += 1
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field6 = append(m.field6, uint64(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
			m.xxx_LenField7 += 1
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.field7 = append(m.field7, int32(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
			m.xxx_LenField8 += 1
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.field8 = append(m.field8, int64(int64(v)))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field9", wireType)
			}
			m.xxx_LenField9 += 1
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.field9 = append(m.field9, uint32(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field10", wireType)
			}
			m.xxx_LenField10 += 1
			var v int32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = int32(data[i-4])
			v |= int32(data[i-3]) << 8
			v |= int32(data[i-2]) << 16
			v |= int32(data[i-1]) << 24
			m.field10 = append(m.field10, int32(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field11", wireType)
			}
			m.xxx_LenField11 += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.field11 = append(m.field11, uint64(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field12", wireType)
			}
			m.xxx_LenField12 += 1
			var v int64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = int64(data[i-8])
			v |= int64(data[i-7]) << 8
			v |= int64(data[i-6]) << 16
			v |= int64(data[i-5]) << 24
			v |= int64(data[i-4]) << 32
			v |= int64(data[i-3]) << 40
			v |= int64(data[i-2]) << 48
			v |= int64(data[i-1]) << 56
			m.field12 = append(m.field12, int64(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_LenField13 += 1
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = append(m.field13, bool(bool(v != 0)))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_LenField14 += 1
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = append(m.field14, string(data[index:postIndex]))
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_LenField15 += 1
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, make([]byte, postIndex-index))
			copy(m.field15[len(m.field15)-1], data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NidRepPackedNative) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField1 += 1
					var v uint64
					i := index + 8
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = uint64(data[i-8])
					v |= uint64(data[i-7]) << 8
					v |= uint64(data[i-6]) << 16
					v |= uint64(data[i-5]) << 24
					v |= uint64(data[i-4]) << 32
					v |= uint64(data[i-3]) << 40
					v |= uint64(data[i-2]) << 48
					v |= uint64(data[i-1]) << 56
					v2 := math.Float64frombits(v)
					m.field1 = append(m.field1, float64(v2))
				}
			} else if wireType == 1 {
				m.xxx_LenField1 += 1
				var v uint64
				i := index + 8
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = uint64(data[i-8])
				v |= uint64(data[i-7]) << 8
				v |= uint64(data[i-6]) << 16
				v |= uint64(data[i-5]) << 24
				v |= uint64(data[i-4]) << 32
				v |= uint64(data[i-3]) << 40
				v |= uint64(data[i-2]) << 48
				v |= uint64(data[i-1]) << 56
				v2 := math.Float64frombits(v)
				m.field1 = append(m.field1, float64(v2))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
		case 2:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField2 += 1
					var v uint32
					i := index + 4
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = uint32(data[i-4])
					v |= uint32(data[i-3]) << 8
					v |= uint32(data[i-2]) << 16
					v |= uint32(data[i-1]) << 24
					v2 := math.Float32frombits(v)
					m.field2 = append(m.field2, float32(v2))
				}
			} else if wireType == 5 {
				m.xxx_LenField2 += 1
				var v uint32
				i := index + 4
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = uint32(data[i-4])
				v |= uint32(data[i-3]) << 8
				v |= uint32(data[i-2]) << 16
				v |= uint32(data[i-1]) << 24
				v2 := math.Float32frombits(v)
				m.field2 = append(m.field2, float32(v2))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
		case 3:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField3 += 1
					var v int32
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.field3 = append(m.field3, int32(v))
				}
			} else if wireType == 0 {
				m.xxx_LenField3 += 1
				var v int32
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.field3 = append(m.field3, int32(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
		case 4:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField4 += 1
					var v int64
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.field4 = append(m.field4, int64(v))
				}
			} else if wireType == 0 {
				m.xxx_LenField4 += 1
				var v int64
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.field4 = append(m.field4, int64(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
		case 5:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField5 += 1
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.field5 = append(m.field5, uint32(v))
				}
			} else if wireType == 0 {
				m.xxx_LenField5 += 1
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.field5 = append(m.field5, uint32(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field5", wireType)
			}
		case 6:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField6 += 1
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.field6 = append(m.field6, uint64(v))
				}
			} else if wireType == 0 {
				m.xxx_LenField6 += 1
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.field6 = append(m.field6, uint64(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
		case 7:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField7 += 1
					var v int32
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.field7 = append(m.field7, int32(v))
				}
			} else if wireType == 0 {
				m.xxx_LenField7 += 1
				var v int32
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.field7 = append(m.field7, int32(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
		case 8:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField8 += 1
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.field8 = append(m.field8, int64(int64(v)))
				}
			} else if wireType == 0 {
				m.xxx_LenField8 += 1
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.field8 = append(m.field8, int64(int64(v)))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
		case 9:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField9 += 1
					var v uint32
					i := index + 4
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = uint32(data[i-4])
					v |= uint32(data[i-3]) << 8
					v |= uint32(data[i-2]) << 16
					v |= uint32(data[i-1]) << 24
					m.field9 = append(m.field9, uint32(v))
				}
			} else if wireType == 5 {
				m.xxx_LenField9 += 1
				var v uint32
				i := index + 4
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = uint32(data[i-4])
				v |= uint32(data[i-3]) << 8
				v |= uint32(data[i-2]) << 16
				v |= uint32(data[i-1]) << 24
				m.field9 = append(m.field9, uint32(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field9", wireType)
			}
		case 10:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField10 += 1
					var v int32
					i := index + 4
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = int32(data[i-4])
					v |= int32(data[i-3]) << 8
					v |= int32(data[i-2]) << 16
					v |= int32(data[i-1]) << 24
					m.field10 = append(m.field10, int32(v))
				}
			} else if wireType == 5 {
				m.xxx_LenField10 += 1
				var v int32
				i := index + 4
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = int32(data[i-4])
				v |= int32(data[i-3]) << 8
				v |= int32(data[i-2]) << 16
				v |= int32(data[i-1]) << 24
				m.field10 = append(m.field10, int32(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field10", wireType)
			}
		case 11:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField11 += 1
					var v uint64
					i := index + 8
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = uint64(data[i-8])
					v |= uint64(data[i-7]) << 8
					v |= uint64(data[i-6]) << 16
					v |= uint64(data[i-5]) << 24
					v |= uint64(data[i-4]) << 32
					v |= uint64(data[i-3]) << 40
					v |= uint64(data[i-2]) << 48
					v |= uint64(data[i-1]) << 56
					m.field11 = append(m.field11, uint64(v))
				}
			} else if wireType == 1 {
				m.xxx_LenField11 += 1
				var v uint64
				i := index + 8
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = uint64(data[i-8])
				v |= uint64(data[i-7]) << 8
				v |= uint64(data[i-6]) << 16
				v |= uint64(data[i-5]) << 24
				v |= uint64(data[i-4]) << 32
				v |= uint64(data[i-3]) << 40
				v |= uint64(data[i-2]) << 48
				v |= uint64(data[i-1]) << 56
				m.field11 = append(m.field11, uint64(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field11", wireType)
			}
		case 12:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField12 += 1
					var v int64
					i := index + 8
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = int64(data[i-8])
					v |= int64(data[i-7]) << 8
					v |= int64(data[i-6]) << 16
					v |= int64(data[i-5]) << 24
					v |= int64(data[i-4]) << 32
					v |= int64(data[i-3]) << 40
					v |= int64(data[i-2]) << 48
					v |= int64(data[i-1]) << 56
					m.field12 = append(m.field12, int64(v))
				}
			} else if wireType == 1 {
				m.xxx_LenField12 += 1
				var v int64
				i := index + 8
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = int64(data[i-8])
				v |= int64(data[i-7]) << 8
				v |= int64(data[i-6]) << 16
				v |= int64(data[i-5]) << 24
				v |= int64(data[i-4]) << 32
				v |= int64(data[i-3]) << 40
				v |= int64(data[i-2]) << 48
				v |= int64(data[i-1]) << 56
				m.field12 = append(m.field12, int64(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field12", wireType)
			}
		case 13:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField13 += 1
					var v int
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.field13 = append(m.field13, bool(bool(v != 0)))
				}
			} else if wireType == 0 {
				m.xxx_LenField13 += 1
				var v int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.field13 = append(m.field13, bool(bool(v != 0)))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinRepPackedNative) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField1 += 1
					var v uint64
					i := index + 8
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = uint64(data[i-8])
					v |= uint64(data[i-7]) << 8
					v |= uint64(data[i-6]) << 16
					v |= uint64(data[i-5]) << 24
					v |= uint64(data[i-4]) << 32
					v |= uint64(data[i-3]) << 40
					v |= uint64(data[i-2]) << 48
					v |= uint64(data[i-1]) << 56
					v2 := math.Float64frombits(v)
					m.field1 = append(m.field1, float64(v2))
				}
			} else if wireType == 1 {
				m.xxx_LenField1 += 1
				var v uint64
				i := index + 8
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = uint64(data[i-8])
				v |= uint64(data[i-7]) << 8
				v |= uint64(data[i-6]) << 16
				v |= uint64(data[i-5]) << 24
				v |= uint64(data[i-4]) << 32
				v |= uint64(data[i-3]) << 40
				v |= uint64(data[i-2]) << 48
				v |= uint64(data[i-1]) << 56
				v2 := math.Float64frombits(v)
				m.field1 = append(m.field1, float64(v2))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
		case 2:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField2 += 1
					var v uint32
					i := index + 4
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = uint32(data[i-4])
					v |= uint32(data[i-3]) << 8
					v |= uint32(data[i-2]) << 16
					v |= uint32(data[i-1]) << 24
					v2 := math.Float32frombits(v)
					m.field2 = append(m.field2, float32(v2))
				}
			} else if wireType == 5 {
				m.xxx_LenField2 += 1
				var v uint32
				i := index + 4
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = uint32(data[i-4])
				v |= uint32(data[i-3]) << 8
				v |= uint32(data[i-2]) << 16
				v |= uint32(data[i-1]) << 24
				v2 := math.Float32frombits(v)
				m.field2 = append(m.field2, float32(v2))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
		case 3:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField3 += 1
					var v int32
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.field3 = append(m.field3, int32(v))
				}
			} else if wireType == 0 {
				m.xxx_LenField3 += 1
				var v int32
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.field3 = append(m.field3, int32(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
		case 4:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField4 += 1
					var v int64
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.field4 = append(m.field4, int64(v))
				}
			} else if wireType == 0 {
				m.xxx_LenField4 += 1
				var v int64
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.field4 = append(m.field4, int64(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
		case 5:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField5 += 1
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.field5 = append(m.field5, uint32(v))
				}
			} else if wireType == 0 {
				m.xxx_LenField5 += 1
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.field5 = append(m.field5, uint32(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field5", wireType)
			}
		case 6:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField6 += 1
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.field6 = append(m.field6, uint64(v))
				}
			} else if wireType == 0 {
				m.xxx_LenField6 += 1
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.field6 = append(m.field6, uint64(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
		case 7:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField7 += 1
					var v int32
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.field7 = append(m.field7, int32(v))
				}
			} else if wireType == 0 {
				m.xxx_LenField7 += 1
				var v int32
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.field7 = append(m.field7, int32(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
		case 8:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField8 += 1
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.field8 = append(m.field8, int64(int64(v)))
				}
			} else if wireType == 0 {
				m.xxx_LenField8 += 1
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.field8 = append(m.field8, int64(int64(v)))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
		case 9:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField9 += 1
					var v uint32
					i := index + 4
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = uint32(data[i-4])
					v |= uint32(data[i-3]) << 8
					v |= uint32(data[i-2]) << 16
					v |= uint32(data[i-1]) << 24
					m.field9 = append(m.field9, uint32(v))
				}
			} else if wireType == 5 {
				m.xxx_LenField9 += 1
				var v uint32
				i := index + 4
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = uint32(data[i-4])
				v |= uint32(data[i-3]) << 8
				v |= uint32(data[i-2]) << 16
				v |= uint32(data[i-1]) << 24
				m.field9 = append(m.field9, uint32(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field9", wireType)
			}
		case 10:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField10 += 1
					var v int32
					i := index + 4
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = int32(data[i-4])
					v |= int32(data[i-3]) << 8
					v |= int32(data[i-2]) << 16
					v |= int32(data[i-1]) << 24
					m.field10 = append(m.field10, int32(v))
				}
			} else if wireType == 5 {
				m.xxx_LenField10 += 1
				var v int32
				i := index + 4
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = int32(data[i-4])
				v |= int32(data[i-3]) << 8
				v |= int32(data[i-2]) << 16
				v |= int32(data[i-1]) << 24
				m.field10 = append(m.field10, int32(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field10", wireType)
			}
		case 11:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField11 += 1
					var v uint64
					i := index + 8
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = uint64(data[i-8])
					v |= uint64(data[i-7]) << 8
					v |= uint64(data[i-6]) << 16
					v |= uint64(data[i-5]) << 24
					v |= uint64(data[i-4]) << 32
					v |= uint64(data[i-3]) << 40
					v |= uint64(data[i-2]) << 48
					v |= uint64(data[i-1]) << 56
					m.field11 = append(m.field11, uint64(v))
				}
			} else if wireType == 1 {
				m.xxx_LenField11 += 1
				var v uint64
				i := index + 8
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = uint64(data[i-8])
				v |= uint64(data[i-7]) << 8
				v |= uint64(data[i-6]) << 16
				v |= uint64(data[i-5]) << 24
				v |= uint64(data[i-4]) << 32
				v |= uint64(data[i-3]) << 40
				v |= uint64(data[i-2]) << 48
				v |= uint64(data[i-1]) << 56
				m.field11 = append(m.field11, uint64(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field11", wireType)
			}
		case 12:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField12 += 1
					var v int64
					i := index + 8
					if i > l {
						return io.ErrUnexpectedEOF
					}
					index = i
					v = int64(data[i-8])
					v |= int64(data[i-7]) << 8
					v |= int64(data[i-6]) << 16
					v |= int64(data[i-5]) << 24
					v |= int64(data[i-4]) << 32
					v |= int64(data[i-3]) << 40
					v |= int64(data[i-2]) << 48
					v |= int64(data[i-1]) << 56
					m.field12 = append(m.field12, int64(v))
				}
			} else if wireType == 1 {
				m.xxx_LenField12 += 1
				var v int64
				i := index + 8
				if i > l {
					return io.ErrUnexpectedEOF
				}
				index = i
				v = int64(data[i-8])
				v |= int64(data[i-7]) << 8
				v |= int64(data[i-6]) << 16
				v |= int64(data[i-5]) << 24
				v |= int64(data[i-4]) << 32
				v |= int64(data[i-3]) << 40
				v |= int64(data[i-2]) << 48
				v |= int64(data[i-1]) << 56
				m.field12 = append(m.field12, int64(v))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field12", wireType)
			}
		case 13:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				postIndex := index + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for index < postIndex {
					m.xxx_LenField13 += 1
					var v int
					for shift := uint(0); ; shift += 7 {
						if index >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[index]
						index++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.field13 = append(m.field13, bool(bool(v != 0)))
				}
			} else if wireType == 0 {
				m.xxx_LenField13 += 1
				var v int
				for shift := uint(0); ; shift += 7 {
					if index >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[index]
					index++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.field13 = append(m.field13, bool(bool(v != 0)))
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NidOptStruct) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.field1 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_IsField2Set = true
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.field2 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_IsField3Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field3 = &NidOptNative{}
			if err := m.field3.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_IsField4Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field4 = &NinOptNative{}
			if err := m.field4.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_IsField6Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
			m.xxx_IsField7Set = true
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.field7 = int32(v)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
			m.xxx_IsField8Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field8 = &NidOptNative{}
			if err := m.field8.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_IsField13Set = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = bool(bool(v != 0))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_IsField14Set = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = string(data[index:postIndex])
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_IsField15Set = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinOptStruct) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.field1 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_IsField2Set = true
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.field2 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_IsField3Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field3 = &NidOptNative{}
			if err := m.field3.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_IsField4Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field4 = &NinOptNative{}
			if err := m.field4.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_IsField6Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
			m.xxx_IsField7Set = true
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.field7 = int32(v)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
			m.xxx_IsField8Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field8 = &NidOptNative{}
			if err := m.field8.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_IsField13Set = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = bool(bool(v != 0))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_IsField14Set = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = string(data[index:postIndex])
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_IsField15Set = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NidRepStruct) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_LenField1 += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			v2 := math.Float64frombits(v)
			m.field1 = append(m.field1, float64(v2))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_LenField2 += 1
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			v2 := math.Float32frombits(v)
			m.field2 = append(m.field2, float32(v2))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_LenField3 += 1
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field3 = append(m.field3, &NidOptNative{})
			m.field3[len(m.field3)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_LenField4 += 1
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field4 = append(m.field4, &NinOptNative{})
			m.field4[len(m.field4)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_LenField6 += 1
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field6 = append(m.field6, uint64(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
			m.xxx_LenField7 += 1
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.field7 = append(m.field7, int32(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
			m.xxx_LenField8 += 1
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field8 = append(m.field8, &NidOptNative{})
			m.field8[len(m.field8)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_LenField13 += 1
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = append(m.field13, bool(bool(v != 0)))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_LenField14 += 1
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = append(m.field14, string(data[index:postIndex]))
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_LenField15 += 1
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, make([]byte, postIndex-index))
			copy(m.field15[len(m.field15)-1], data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinRepStruct) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_LenField1 += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			v2 := math.Float64frombits(v)
			m.field1 = append(m.field1, float64(v2))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_LenField2 += 1
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			v2 := math.Float32frombits(v)
			m.field2 = append(m.field2, float32(v2))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_LenField3 += 1
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field3 = append(m.field3, &NidOptNative{})
			m.field3[len(m.field3)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_LenField4 += 1
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field4 = append(m.field4, &NinOptNative{})
			m.field4[len(m.field4)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_LenField6 += 1
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field6 = append(m.field6, uint64(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
			m.xxx_LenField7 += 1
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.field7 = append(m.field7, int32(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
			m.xxx_LenField8 += 1
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field8 = append(m.field8, &NidOptNative{})
			m.field8[len(m.field8)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_LenField13 += 1
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = append(m.field13, bool(bool(v != 0)))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_LenField14 += 1
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = append(m.field14, string(data[index:postIndex]))
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_LenField15 += 1
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, make([]byte, postIndex-index))
			copy(m.field15[len(m.field15)-1], data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NidEmbeddedStruct) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NidOptNative", wireType)
			}
			m.xxx_IsNidOptNativeSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NidOptNative = &NidOptNative{}
			if err := m.NidOptNative.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field200", wireType)
			}
			m.xxx_IsField200Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field200 = &NidOptNative{}
			if err := m.field200.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 210:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field210", wireType)
			}
			m.xxx_IsField210Set = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field210 = bool(bool(v != 0))
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinEmbeddedStruct) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NidOptNative", wireType)
			}
			m.xxx_IsNidOptNativeSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NidOptNative = &NidOptNative{}
			if err := m.NidOptNative.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field200", wireType)
			}
			m.xxx_IsField200Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field200 = &NidOptNative{}
			if err := m.field200.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 210:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field210", wireType)
			}
			m.xxx_IsField210Set = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field210 = bool(bool(v != 0))
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NidNestedStruct) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field1 = &NidOptStruct{}
			if err := m.field1.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_LenField2 += 1
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field2 = append(m.field2, &NidRepStruct{})
			m.field2[len(m.field2)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinNestedStruct) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field1 = &NinOptStruct{}
			if err := m.field1.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_LenField2 += 1
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field2 = append(m.field2, &NinRepStruct{})
			m.field2[len(m.field2)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NidOptCustom) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field id", wireType)
			}
			m.xxx_IsIdSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.id |= (Id(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field value", wireType)
			}
			m.xxx_IsValueSet = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.value = Weight(math.Float64frombits(v))
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinOptCustom) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field id", wireType)
			}
			m.xxx_IsIdSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.id |= (Id(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field value", wireType)
			}
			m.xxx_IsValueSet = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.value = Weight(math.Float64frombits(v))
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NidRepCustom) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field id", wireType)
			}
			m.xxx_LenId += 1
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.id = append(m.id, Id(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field value", wireType)
			}
			m.xxx_LenValue += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			v2 := math.Float64frombits(v)
			m.value = append(m.value, Weight(v2))
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinRepCustom) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field id", wireType)
			}
			m.xxx_LenId += 1
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.id = append(m.id, Id(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field value", wireType)
			}
			m.xxx_LenValue += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			v2 := math.Float64frombits(v)
			m.value = append(m.value, Weight(v2))
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinOptNativeUnion) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.field1 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_IsField2Set = true
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.field2 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_IsField3Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_IsField4Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field4 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field5", wireType)
			}
			m.xxx_IsField5Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field5 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_IsField6Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_IsField13Set = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = bool(bool(v != 0))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_IsField14Set = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = string(data[index:postIndex])
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_IsField15Set = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinOptStructUnion) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.field1 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_IsField2Set = true
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.field2 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_IsField3Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field3 = &NidOptNative{}
			if err := m.field3.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_IsField4Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field4 = &NinOptNative{}
			if err := m.field4.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_IsField6Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
			m.xxx_IsField7Set = true
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.field7 = int32(v)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_IsField13Set = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = bool(bool(v != 0))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_IsField14Set = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = string(data[index:postIndex])
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_IsField15Set = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinEmbeddedStructUnion) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NidOptNative", wireType)
			}
			m.xxx_IsNidOptNativeSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NidOptNative = &NidOptNative{}
			if err := m.NidOptNative.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field200", wireType)
			}
			m.xxx_IsField200Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field200 = &NinOptNative{}
			if err := m.field200.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 210:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field210", wireType)
			}
			m.xxx_IsField210Set = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field210 = bool(bool(v != 0))
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinNestedStructUnion) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field1 = &NinOptNativeUnion{}
			if err := m.field1.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_IsField2Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field2 = &NinOptStructUnion{}
			if err := m.field2.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_IsField3Set = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field3 = &NinEmbeddedStructUnion{}
			if err := m.field3.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Tree) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field or", wireType)
			}
			m.xxx_IsOrSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.or = &OrBranch{}
			if err := m.or.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field and", wireType)
			}
			m.xxx_IsAndSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.and = &AndBranch{}
			if err := m.and.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field leaf", wireType)
			}
			m.xxx_IsLeafSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.leaf = &Leaf{}
			if err := m.leaf.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *OrBranch) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field left", wireType)
			}
			m.xxx_IsLeftSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.left = &Tree{}
			if err := m.left.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field right", wireType)
			}
			m.xxx_IsRightSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.right = &Tree{}
			if err := m.right.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *AndBranch) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field left", wireType)
			}
			m.xxx_IsLeftSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.left = &Tree{}
			if err := m.left.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field right", wireType)
			}
			m.xxx_IsRightSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.right = &Tree{}
			if err := m.right.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Leaf) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field value", wireType)
			}
			m.xxx_IsValueSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field strValue", wireType)
			}
			m.xxx_IsStrValueSet = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.strValue = string(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *DeepTree) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field down", wireType)
			}
			m.xxx_IsDownSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.down = &ADeepBranch{}
			if err := m.down.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field and", wireType)
			}
			m.xxx_IsAndSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.and = &AndDeepBranch{}
			if err := m.and.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field leaf", wireType)
			}
			m.xxx_IsLeafSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.leaf = &DeepLeaf{}
			if err := m.leaf.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *ADeepBranch) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field down", wireType)
			}
			m.xxx_IsDownSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.down = &DeepTree{}
			if err := m.down.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *AndDeepBranch) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field left", wireType)
			}
			m.xxx_IsLeftSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.left = &DeepTree{}
			if err := m.left.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field right", wireType)
			}
			m.xxx_IsRightSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.right = &DeepTree{}
			if err := m.right.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *DeepLeaf) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field tree", wireType)
			}
			m.xxx_IsTreeSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.tree = &Tree{}
			if err := m.tree.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Nil) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NidOptEnum) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field1 |= (TheTestEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinOptEnum) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field1 |= (TheTestEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NidRepEnum) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_LenField1 += 1
			var v TheTestEnum
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (TheTestEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field1 = append(m.field1, v)
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinRepEnum) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_LenField1 += 1
			var v TheTestEnum
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (TheTestEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field1 = append(m.field1, v)
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinOptEnumDefault) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field1 |= (TheTestEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *AnotherNinOptEnum) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field1 |= (AnotherTestEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *AnotherNinOptEnumDefault) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field1 |= (AnotherTestEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Timer) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field time1", wireType)
			}
			m.xxx_IsTime1Set = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.time1 = int64(data[i-8])
			m.time1 |= int64(data[i-7]) << 8
			m.time1 |= int64(data[i-6]) << 16
			m.time1 |= int64(data[i-5]) << 24
			m.time1 |= int64(data[i-4]) << 32
			m.time1 |= int64(data[i-3]) << 40
			m.time1 |= int64(data[i-2]) << 48
			m.time1 |= int64(data[i-1]) << 56
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field time2", wireType)
			}
			m.xxx_IsTime2Set = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.time2 = int64(data[i-8])
			m.time2 |= int64(data[i-7]) << 8
			m.time2 |= int64(data[i-6]) << 16
			m.time2 |= int64(data[i-5]) << 24
			m.time2 |= int64(data[i-4]) << 32
			m.time2 |= int64(data[i-3]) << 40
			m.time2 |= int64(data[i-2]) << 48
			m.time2 |= int64(data[i-1]) << 56
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field data", wireType)
			}
			m.xxx_IsDataSet = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.data = append(m.data, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *MyExtendable) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			if (fieldNum >= 100) && (fieldNum < 200) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				index -= sizeOfWire
				skippy, err := proto.Skip(data[index:])
				if err != nil {
					return err
				}
				if (index + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				if m.XXX_extensions == nil {
					m.XXX_extensions = make(map[int32]proto.Extension)
				}
				m.XXX_extensions[int32(fieldNum)] = proto.NewExtension(data[index : index+skippy])
				index += skippy
			} else {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				index -= sizeOfWire
				skippy, err := proto.Skip(data[index:])
				if err != nil {
					return err
				}
				if (index + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
				index += skippy
			}
		}
	}
	return nil
}
func (m *OtherExtenable) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_IsField2Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_IsField13Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field13 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field m", wireType)
			}
			m.xxx_IsMSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.m = &MyExtendable{}
			if err := m.m.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			if ((fieldNum >= 14) && (fieldNum < 17)) || ((fieldNum >= 10) && (fieldNum < 13)) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				index -= sizeOfWire
				skippy, err := proto.Skip(data[index:])
				if err != nil {
					return err
				}
				if (index + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				if m.XXX_extensions == nil {
					m.XXX_extensions = make(map[int32]proto.Extension)
				}
				m.XXX_extensions[int32(fieldNum)] = proto.NewExtension(data[index : index+skippy])
				index += skippy
			} else {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				index -= sizeOfWire
				skippy, err := proto.Skip(data[index:])
				if err != nil {
					return err
				}
				if (index + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
				index += skippy
			}
		}
	}
	return nil
}
func (m *NestedDefinition) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field enumField", wireType)
			}
			m.xxx_IsEnumFieldSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.enumField |= (NestedDefinition_NestedEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field nNM", wireType)
			}
			m.xxx_IsNNMSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.nNM = &NestedDefinition_NestedMessage_NestedNestedMsg{}
			if err := m.nNM.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field nM", wireType)
			}
			m.xxx_IsNMSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.nM = &NestedDefinition_NestedMessage{}
			if err := m.nM.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NestedDefinition_NestedMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field nestedField1", wireType)
			}
			m.xxx_IsNestedField1Set = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.nestedField1 = uint64(data[i-8])
			m.nestedField1 |= uint64(data[i-7]) << 8
			m.nestedField1 |= uint64(data[i-6]) << 16
			m.nestedField1 |= uint64(data[i-5]) << 24
			m.nestedField1 |= uint64(data[i-4]) << 32
			m.nestedField1 |= uint64(data[i-3]) << 40
			m.nestedField1 |= uint64(data[i-2]) << 48
			m.nestedField1 |= uint64(data[i-1]) << 56
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field nNM", wireType)
			}
			m.xxx_IsNNMSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.nNM = &NestedDefinition_NestedMessage_NestedNestedMsg{}
			if err := m.nNM.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NestedDefinition_NestedMessage_NestedNestedMsg) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field nestedNestedField1", wireType)
			}
			m.xxx_IsNestedNestedField1Set = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.nestedNestedField1 = string(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NestedScope) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field a", wireType)
			}
			m.xxx_IsASet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.a = &NestedDefinition_NestedMessage_NestedNestedMsg{}
			if err := m.a.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field b", wireType)
			}
			m.xxx_IsBSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.b |= (NestedDefinition_NestedEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field c", wireType)
			}
			m.xxx_IsCSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.c = &NestedDefinition_NestedMessage{}
			if err := m.c.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NinOptNativeDefault) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.field1 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field2", wireType)
			}
			m.xxx_IsField2Set = true
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.field2 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field3", wireType)
			}
			m.xxx_IsField3Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field4", wireType)
			}
			m.xxx_IsField4Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field4 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field5", wireType)
			}
			m.xxx_IsField5Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field5 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field6", wireType)
			}
			m.xxx_IsField6Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field7", wireType)
			}
			m.xxx_IsField7Set = true
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.field7 = int32(v)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field8", wireType)
			}
			m.xxx_IsField8Set = true
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.field8 = int64(int64(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field9", wireType)
			}
			m.xxx_IsField9Set = true
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field9 = uint32(data[i-4])
			m.field9 |= uint32(data[i-3]) << 8
			m.field9 |= uint32(data[i-2]) << 16
			m.field9 |= uint32(data[i-1]) << 24
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field field10", wireType)
			}
			m.xxx_IsField10Set = true
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field10 = int32(data[i-4])
			m.field10 |= int32(data[i-3]) << 8
			m.field10 |= int32(data[i-2]) << 16
			m.field10 |= int32(data[i-1]) << 24
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field11", wireType)
			}
			m.xxx_IsField11Set = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field11 = uint64(data[i-8])
			m.field11 |= uint64(data[i-7]) << 8
			m.field11 |= uint64(data[i-6]) << 16
			m.field11 |= uint64(data[i-5]) << 24
			m.field11 |= uint64(data[i-4]) << 32
			m.field11 |= uint64(data[i-3]) << 40
			m.field11 |= uint64(data[i-2]) << 48
			m.field11 |= uint64(data[i-1]) << 56
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field field12", wireType)
			}
			m.xxx_IsField12Set = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.field12 = int64(data[i-8])
			m.field12 |= int64(data[i-7]) << 8
			m.field12 |= int64(data[i-6]) << 16
			m.field12 |= int64(data[i-5]) << 24
			m.field12 |= int64(data[i-4]) << 32
			m.field12 |= int64(data[i-3]) << 40
			m.field12 |= int64(data[i-2]) << 48
			m.field12 |= int64(data[i-1]) << 56
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field13", wireType)
			}
			m.xxx_IsField13Set = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.field13 = bool(bool(v != 0))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field14", wireType)
			}
			m.xxx_IsField14Set = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field14 = string(data[index:postIndex])
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field field15", wireType)
			}
			m.xxx_IsField15Set = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.field15 = append(m.field15, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *CustomContainer) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field customStruct", wireType)
			}
			m.xxx_IsCustomStructSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.customStruct = &NidOptCustom{}
			if err := m.customStruct.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *CustomNameNidOptNative) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldA", wireType)
			}
			m.xxx_IsFieldASet = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.fieldA = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldB", wireType)
			}
			m.xxx_IsFieldBSet = true
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.fieldB = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldC", wireType)
			}
			m.xxx_IsFieldCSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldC |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldD", wireType)
			}
			m.xxx_IsFieldDSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldD |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldE", wireType)
			}
			m.xxx_IsFieldESet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldE |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldF", wireType)
			}
			m.xxx_IsFieldFSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldF |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldG", wireType)
			}
			m.xxx_IsFieldGSet = true
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.fieldG = int32(v)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldH", wireType)
			}
			m.xxx_IsFieldHSet = true
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.fieldH = int64(int64(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldI", wireType)
			}
			m.xxx_IsFieldISet = true
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.fieldI = uint32(data[i-4])
			m.fieldI |= uint32(data[i-3]) << 8
			m.fieldI |= uint32(data[i-2]) << 16
			m.fieldI |= uint32(data[i-1]) << 24
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldJ", wireType)
			}
			m.xxx_IsFieldJSet = true
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.fieldJ = int32(data[i-4])
			m.fieldJ |= int32(data[i-3]) << 8
			m.fieldJ |= int32(data[i-2]) << 16
			m.fieldJ |= int32(data[i-1]) << 24
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldK", wireType)
			}
			m.xxx_IsFieldKSet = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.fieldK = uint64(data[i-8])
			m.fieldK |= uint64(data[i-7]) << 8
			m.fieldK |= uint64(data[i-6]) << 16
			m.fieldK |= uint64(data[i-5]) << 24
			m.fieldK |= uint64(data[i-4]) << 32
			m.fieldK |= uint64(data[i-3]) << 40
			m.fieldK |= uint64(data[i-2]) << 48
			m.fieldK |= uint64(data[i-1]) << 56
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldL", wireType)
			}
			m.xxx_IsFieldLSet = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.fieldL = int64(data[i-8])
			m.fieldL |= int64(data[i-7]) << 8
			m.fieldL |= int64(data[i-6]) << 16
			m.fieldL |= int64(data[i-5]) << 24
			m.fieldL |= int64(data[i-4]) << 32
			m.fieldL |= int64(data[i-3]) << 40
			m.fieldL |= int64(data[i-2]) << 48
			m.fieldL |= int64(data[i-1]) << 56
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldM", wireType)
			}
			m.xxx_IsFieldMSet = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldM = bool(bool(v != 0))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldN", wireType)
			}
			m.xxx_IsFieldNSet = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldN = string(data[index:postIndex])
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldO", wireType)
			}
			m.xxx_IsFieldOSet = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldO = append(m.fieldO, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *CustomNameNinOptNative) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldA", wireType)
			}
			m.xxx_IsFieldASet = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.fieldA = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldB", wireType)
			}
			m.xxx_IsFieldBSet = true
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.fieldB = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldC", wireType)
			}
			m.xxx_IsFieldCSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldC |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldD", wireType)
			}
			m.xxx_IsFieldDSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldD |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldE", wireType)
			}
			m.xxx_IsFieldESet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldE |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldF", wireType)
			}
			m.xxx_IsFieldFSet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldF |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldG", wireType)
			}
			m.xxx_IsFieldGSet = true
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.fieldG = int32(v)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldH", wireType)
			}
			m.xxx_IsFieldHSet = true
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.fieldH = int64(int64(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldI", wireType)
			}
			m.xxx_IsFieldISet = true
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.fieldI = uint32(data[i-4])
			m.fieldI |= uint32(data[i-3]) << 8
			m.fieldI |= uint32(data[i-2]) << 16
			m.fieldI |= uint32(data[i-1]) << 24
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldJ", wireType)
			}
			m.xxx_IsFieldJSet = true
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.fieldJ = int32(data[i-4])
			m.fieldJ |= int32(data[i-3]) << 8
			m.fieldJ |= int32(data[i-2]) << 16
			m.fieldJ |= int32(data[i-1]) << 24
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldK", wireType)
			}
			m.xxx_IsFieldKSet = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.fieldK = uint64(data[i-8])
			m.fieldK |= uint64(data[i-7]) << 8
			m.fieldK |= uint64(data[i-6]) << 16
			m.fieldK |= uint64(data[i-5]) << 24
			m.fieldK |= uint64(data[i-4]) << 32
			m.fieldK |= uint64(data[i-3]) << 40
			m.fieldK |= uint64(data[i-2]) << 48
			m.fieldK |= uint64(data[i-1]) << 56
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fielL", wireType)
			}
			m.xxx_IsFielLSet = true
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			m.fielL = int64(data[i-8])
			m.fielL |= int64(data[i-7]) << 8
			m.fielL |= int64(data[i-6]) << 16
			m.fielL |= int64(data[i-5]) << 24
			m.fielL |= int64(data[i-4]) << 32
			m.fielL |= int64(data[i-3]) << 40
			m.fielL |= int64(data[i-2]) << 48
			m.fielL |= int64(data[i-1]) << 56
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldM", wireType)
			}
			m.xxx_IsFieldMSet = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldM = bool(bool(v != 0))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldN", wireType)
			}
			m.xxx_IsFieldNSet = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldN = string(data[index:postIndex])
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldO", wireType)
			}
			m.xxx_IsFieldOSet = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldO = append(m.fieldO, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *CustomNameNinRepNative) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldA", wireType)
			}
			m.xxx_LenFieldA += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			v2 := math.Float64frombits(v)
			m.fieldA = append(m.fieldA, float64(v2))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldB", wireType)
			}
			m.xxx_LenFieldB += 1
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			v2 := math.Float32frombits(v)
			m.fieldB = append(m.fieldB, float32(v2))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldC", wireType)
			}
			m.xxx_LenFieldC += 1
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldC = append(m.fieldC, int32(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldD", wireType)
			}
			m.xxx_LenFieldD += 1
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldD = append(m.fieldD, int64(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldE", wireType)
			}
			m.xxx_LenFieldE += 1
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldE = append(m.fieldE, uint32(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldF", wireType)
			}
			m.xxx_LenFieldF += 1
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldF = append(m.fieldF, uint64(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldG", wireType)
			}
			m.xxx_LenFieldG += 1
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.fieldG = append(m.fieldG, int32(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldH", wireType)
			}
			m.xxx_LenFieldH += 1
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.fieldH = append(m.fieldH, int64(int64(v)))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldI", wireType)
			}
			m.xxx_LenFieldI += 1
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.fieldI = append(m.fieldI, uint32(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldJ", wireType)
			}
			m.xxx_LenFieldJ += 1
			var v int32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = int32(data[i-4])
			v |= int32(data[i-3]) << 8
			v |= int32(data[i-2]) << 16
			v |= int32(data[i-1]) << 24
			m.fieldJ = append(m.fieldJ, int32(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldK", wireType)
			}
			m.xxx_LenFieldK += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.fieldK = append(m.fieldK, uint64(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldL", wireType)
			}
			m.xxx_LenFieldL += 1
			var v int64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = int64(data[i-8])
			v |= int64(data[i-7]) << 8
			v |= int64(data[i-6]) << 16
			v |= int64(data[i-5]) << 24
			v |= int64(data[i-4]) << 32
			v |= int64(data[i-3]) << 40
			v |= int64(data[i-2]) << 48
			v |= int64(data[i-1]) << 56
			m.fieldL = append(m.fieldL, int64(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldM", wireType)
			}
			m.xxx_LenFieldM += 1
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldM = append(m.fieldM, bool(bool(v != 0)))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldN", wireType)
			}
			m.xxx_LenFieldN += 1
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldN = append(m.fieldN, string(data[index:postIndex]))
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldO", wireType)
			}
			m.xxx_LenFieldO += 1
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldO = append(m.fieldO, make([]byte, postIndex-index))
			copy(m.fieldO[len(m.fieldO)-1], data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *CustomNameNinStruct) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldA", wireType)
			}
			m.xxx_IsFieldASet = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.fieldA = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldB", wireType)
			}
			m.xxx_IsFieldBSet = true
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			m.fieldB = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldC", wireType)
			}
			m.xxx_IsFieldCSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldC = &NidOptNative{}
			if err := m.fieldC.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldD", wireType)
			}
			m.xxx_LenFieldD += 1
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldD = append(m.fieldD, &NinOptNative{})
			m.fieldD[len(m.fieldD)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldE", wireType)
			}
			m.xxx_IsFieldESet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldE |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldF", wireType)
			}
			m.xxx_IsFieldFSet = true
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.fieldF = int32(v)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldG", wireType)
			}
			m.xxx_IsFieldGSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldG = &NidOptNative{}
			if err := m.fieldG.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldH", wireType)
			}
			m.xxx_IsFieldHSet = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldH = bool(bool(v != 0))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldI", wireType)
			}
			m.xxx_IsFieldISet = true
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldI = string(data[index:postIndex])
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldJ", wireType)
			}
			m.xxx_IsFieldJSet = true
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldJ = append(m.fieldJ, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *CustomNameCustomType) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldA", wireType)
			}
			m.xxx_IsFieldASet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldA |= (Id(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldB", wireType)
			}
			m.xxx_IsFieldBSet = true
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			m.fieldB = Weight(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldC", wireType)
			}
			m.xxx_LenFieldC += 1
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldC = append(m.fieldC, Id(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldD", wireType)
			}
			m.xxx_LenFieldD += 1
			var v uint64
			i := index + 8
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			v2 := math.Float64frombits(v)
			m.fieldD = append(m.fieldD, Weight(v2))
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *CustomNameNinEmbeddedStructUnion) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NidOptNative", wireType)
			}
			m.xxx_IsNidOptNativeSet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NidOptNative = &NidOptNative{}
			if err := m.NidOptNative.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldA", wireType)
			}
			m.xxx_IsFieldASet = true
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.fieldA = &NinOptNative{}
			if err := m.fieldA.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 210:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldB", wireType)
			}
			m.xxx_IsFieldBSet = true
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldB = bool(bool(v != 0))
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *CustomNameEnum) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldA", wireType)
			}
			m.xxx_IsFieldASet = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.fieldA |= (TheTestEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field fieldB", wireType)
			}
			m.xxx_LenFieldB += 1
			var v TheTestEnum
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (TheTestEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.fieldB = append(m.fieldB, v)
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NoExtensionsMap) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field field1", wireType)
			}
			m.xxx_IsField1Set = true
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.field1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			if (fieldNum >= 100) && (fieldNum < 200) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				index -= sizeOfWire
				skippy, err := proto.Skip(data[index:])
				if err != nil {
					return err
				}
				if (index + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_extensions = append(m.XXX_extensions, data[index:index+skippy]...)
				index += skippy
			} else {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				index -= sizeOfWire
				skippy, err := proto.Skip(data[index:])
				if err != nil {
					return err
				}
				if (index + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
				index += skippy
			}
		}
	}
	return nil
}

var E_FieldA = &proto.ExtensionDesc{
	ExtendedType:  (*MyExtendable)(nil),
	ExtensionType: (*float64)(nil),
	Field:         100,
	Name:          "test.FieldA",
}

var E_FieldB = &proto.ExtensionDesc{
	ExtendedType:  (*MyExtendable)(nil),
	ExtensionType: (**NinOptNative)(nil),
	Field:         101,
	Name:          "test.FieldB",
}

var E_FieldC = &proto.ExtensionDesc{
	ExtendedType:  (*MyExtendable)(nil),
	ExtensionType: (**NinEmbeddedStruct)(nil),
	Field:         102,
	Name:          "test.FieldC",
}

var E_FieldA1 = &proto.ExtensionDesc{
	ExtendedType:  (*NoExtensionsMap)(nil),
	ExtensionType: (*float64)(nil),
	Field:         100,
	Name:          "test.FieldA1",
}

var E_FieldB1 = &proto.ExtensionDesc{
	ExtendedType:  (*NoExtensionsMap)(nil),
	ExtensionType: (**NinOptNative)(nil),
	Field:         101,
	Name:          "test.FieldB1",
}

var E_FieldC1 = &proto.ExtensionDesc{
	ExtendedType:  (*NoExtensionsMap)(nil),
	ExtensionType: (**NinEmbeddedStruct)(nil),
	Field:         102,
	Name:          "test.FieldC1",
}

func init() {
	proto.RegisterEnum("test.TheTestEnum", TheTestEnum_name, TheTestEnum_value)
	proto.RegisterEnum("test.AnotherTestEnum", AnotherTestEnum_name, AnotherTestEnum_value)
	proto.RegisterEnum("test.NestedDefinition_NestedEnum", NestedDefinition_NestedEnum_name, NestedDefinition_NestedEnum_value)
	proto.RegisterExtension(E_FieldA)
	proto.RegisterExtension(E_FieldB)
	proto.RegisterExtension(E_FieldC)
	proto.RegisterExtension(E_FieldA1)
	proto.RegisterExtension(E_FieldB1)
	proto.RegisterExtension(E_FieldC1)
	if m := new(NidOptCustom); reflect.ValueOf(m.id).Kind() != reflect.Int64 {
		panic("Cannot cast m.id to int64")
	}
	if m := new(NidOptCustom); reflect.ValueOf(m.value).Kind() != reflect.Float64 {
		panic("Cannot cast m.value to float64")
	}
	if m := new(NinOptCustom); reflect.ValueOf(m.id).Kind() != reflect.Int64 {
		panic("Cannot cast m.id to int64")
	}
	if m := new(NinOptCustom); reflect.ValueOf(m.value).Kind() != reflect.Float64 {
		panic("Cannot cast m.value to float64")
	}
	if elem := Id(0); reflect.ValueOf(elem).Kind() != reflect.Int64 {
		panic("Cannot cast m.id to int64")
	}
	if elem := Weight(0.0); reflect.ValueOf(elem).Kind() != reflect.Float64 {
		panic("Cannot cast m.value to float64")
	}
	if elem := Id(0); reflect.ValueOf(elem).Kind() != reflect.Int64 {
		panic("Cannot cast m.id to int64")
	}
	if elem := Weight(0.0); reflect.ValueOf(elem).Kind() != reflect.Float64 {
		panic("Cannot cast m.value to float64")
	}
	if m := new(CustomNameCustomType); reflect.ValueOf(m.fieldA).Kind() != reflect.Int64 {
		panic("Cannot cast m.fieldA to int64")
	}
	if m := new(CustomNameCustomType); reflect.ValueOf(m.fieldB).Kind() != reflect.Float64 {
		panic("Cannot cast m.fieldB to float64")
	}
	if elem := Id(0); reflect.ValueOf(elem).Kind() != reflect.Int64 {
		panic("Cannot cast m.fieldC to int64")
	}
	if elem := Weight(0.0); reflect.ValueOf(elem).Kind() != reflect.Float64 {
		panic("Cannot cast m.fieldD to float64")
	}
}
func (this *NinOptNativeUnion) GetValue() interface{} {
	if this.xxx_IsField1Set == true {
		return this.field1
	}
	if this.xxx_IsField2Set == true {
		return this.field2
	}
	if this.xxx_IsField3Set == true {
		return this.field3
	}
	if this.xxx_IsField4Set == true {
		return this.field4
	}
	if this.xxx_IsField5Set == true {
		return this.field5
	}
	if this.xxx_IsField6Set == true {
		return this.field6
	}
	if this.xxx_IsField13Set == true {
		return this.field13
	}
	if this.xxx_IsField14Set == true {
		return this.field14
	}
	if this.xxx_IsField15Set == true {
		return this.field15
	}
	return nil
}

func (this *NinOptNativeUnion) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case float64:
		this.xxx_IsField1Set = true
		this.field1 = vt
	case float32:
		this.xxx_IsField2Set = true
		this.field2 = vt
	case int32:
		this.xxx_IsField3Set = true
		this.field3 = vt
	case int64:
		this.xxx_IsField4Set = true
		this.field4 = vt
	case uint32:
		this.xxx_IsField5Set = true
		this.field5 = vt
	case uint64:
		this.xxx_IsField6Set = true
		this.field6 = vt
	case bool:
		this.xxx_IsField13Set = true
		this.field13 = vt
	case string:
		this.xxx_IsField14Set = true
		this.field14 = vt
	case []byte:
		this.xxx_IsField15Set = true
		this.field15 = vt
	default:
		return false
	}
	return true
}
func (this *NinOptStructUnion) GetValue() interface{} {
	if this.xxx_IsField1Set == true {
		return this.field1
	}
	if this.xxx_IsField2Set == true {
		return this.field2
	}
	if this.xxx_IsField3Set == true {
		return this.field3
	}
	if this.xxx_IsField4Set == true {
		return this.field4
	}
	if this.xxx_IsField6Set == true {
		return this.field6
	}
	if this.xxx_IsField7Set == true {
		return this.field7
	}
	if this.xxx_IsField13Set == true {
		return this.field13
	}
	if this.xxx_IsField14Set == true {
		return this.field14
	}
	if this.xxx_IsField15Set == true {
		return this.field15
	}
	return nil
}

func (this *NinOptStructUnion) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case float64:
		this.xxx_IsField1Set = true
		this.field1 = vt
	case float32:
		this.xxx_IsField2Set = true
		this.field2 = vt
	case *NidOptNative:
		this.xxx_IsField3Set = true
		this.field3 = vt
	case *NinOptNative:
		this.xxx_IsField4Set = true
		this.field4 = vt
	case uint64:
		this.xxx_IsField6Set = true
		this.field6 = vt
	case int32:
		this.xxx_IsField7Set = true
		this.field7 = vt
	case bool:
		this.xxx_IsField13Set = true
		this.field13 = vt
	case string:
		this.xxx_IsField14Set = true
		this.field14 = vt
	case []byte:
		this.xxx_IsField15Set = true
		this.field15 = vt
	default:
		return false
	}
	return true
}
func (this *NinEmbeddedStructUnion) GetValue() interface{} {
	if this.xxx_IsNidOptNativeSet == true {
		return this.NidOptNative
	}
	if this.xxx_IsField200Set == true {
		return this.field200
	}
	if this.xxx_IsField210Set == true {
		return this.field210
	}
	return nil
}

func (this *NinEmbeddedStructUnion) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *NidOptNative:
		this.xxx_IsNidOptNativeSet = true
		this.NidOptNative = vt
	case *NinOptNative:
		this.xxx_IsField200Set = true
		this.field200 = vt
	case bool:
		this.xxx_IsField210Set = true
		this.field210 = vt
	default:
		return false
	}
	return true
}
func (this *NinNestedStructUnion) GetValue() interface{} {
	if this.xxx_IsField1Set == true {
		return this.field1
	}
	if this.xxx_IsField2Set == true {
		return this.field2
	}
	if this.xxx_IsField3Set == true {
		return this.field3
	}
	return nil
}

func (this *NinNestedStructUnion) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *NinOptNativeUnion:
		this.xxx_IsField1Set = true
		this.field1 = vt
	case *NinOptStructUnion:
		this.xxx_IsField2Set = true
		this.field2 = vt
	case *NinEmbeddedStructUnion:
		this.xxx_IsField3Set = true
		this.field3 = vt
	default:
		this.field1 = new(NinOptNativeUnion)
		if set := this.field1.SetValue(value); set {
			return true
		}
		this.field1 = nil
		this.field2 = new(NinOptStructUnion)
		if set := this.field2.SetValue(value); set {
			return true
		}
		this.field2 = nil
		this.field3 = new(NinEmbeddedStructUnion)
		if set := this.field3.SetValue(value); set {
			return true
		}
		this.field3 = nil
		return false
	}
	return true
}
func (this *Tree) GetValue() interface{} {
	if this.xxx_IsOrSet == true {
		return this.or
	}
	if this.xxx_IsAndSet == true {
		return this.and
	}
	if this.xxx_IsLeafSet == true {
		return this.leaf
	}
	return nil
}

func (this *Tree) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *OrBranch:
		this.xxx_IsOrSet = true
		this.or = vt
	case *AndBranch:
		this.xxx_IsAndSet = true
		this.and = vt
	case *Leaf:
		this.xxx_IsLeafSet = true
		this.leaf = vt
	default:
		return false
	}
	return true
}
func (this *DeepTree) GetValue() interface{} {
	if this.xxx_IsDownSet == true {
		return this.down
	}
	if this.xxx_IsAndSet == true {
		return this.and
	}
	if this.xxx_IsLeafSet == true {
		return this.leaf
	}
	return nil
}

func (this *DeepTree) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *ADeepBranch:
		this.xxx_IsDownSet = true
		this.down = vt
	case *AndDeepBranch:
		this.xxx_IsAndSet = true
		this.and = vt
	case *DeepLeaf:
		this.xxx_IsLeafSet = true
		this.leaf = vt
	default:
		return false
	}
	return true
}
func (this *CustomNameNinEmbeddedStructUnion) GetValue() interface{} {
	if this.xxx_IsNidOptNativeSet == true {
		return this.NidOptNative
	}
	if this.xxx_IsFieldASet == true {
		return this.fieldA
	}
	if this.xxx_IsFieldBSet == true {
		return this.fieldB
	}
	return nil
}

func (this *CustomNameNinEmbeddedStructUnion) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *NidOptNative:
		this.xxx_IsNidOptNativeSet = true
		this.NidOptNative = vt
	case *NinOptNative:
		this.xxx_IsFieldASet = true
		this.fieldA = vt
	case bool:
		this.xxx_IsFieldBSet = true
		this.fieldB = vt
	default:
		return false
	}
	return true
}
func (this *NidOptNative) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidOptNative{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`field2:` + fmt.Sprintf("%v", this.GetField2()) + `,`,
		`field3:` + fmt.Sprintf("%v", this.GetField3()) + `,`,
		`field4:` + fmt.Sprintf("%v", this.GetField4()) + `,`,
		`field5:` + fmt.Sprintf("%v", this.GetField5()) + `,`,
		`field6:` + fmt.Sprintf("%v", this.GetField6()) + `,`,
		`field7:` + fmt.Sprintf("%v", this.GetField7()) + `,`,
		`field8:` + fmt.Sprintf("%v", this.GetField8()) + `,`,
		`field9:` + fmt.Sprintf("%v", this.GetField9()) + `,`,
		`field10:` + fmt.Sprintf("%v", this.GetField10()) + `,`,
		`field11:` + fmt.Sprintf("%v", this.GetField11()) + `,`,
		`field12:` + fmt.Sprintf("%v", this.GetField12()) + `,`,
		`field13:` + fmt.Sprintf("%v", this.GetField13()) + `,`,
		`field14:` + fmt.Sprintf("%v", this.GetField14()) + `,`,
		`field15:` + fmt.Sprintf("%v", this.GetField15()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinOptNative) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinOptNative{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`field2:` + fmt.Sprintf("%v", this.GetField2()) + `,`,
		`field3:` + fmt.Sprintf("%v", this.GetField3()) + `,`,
		`field4:` + fmt.Sprintf("%v", this.GetField4()) + `,`,
		`field5:` + fmt.Sprintf("%v", this.GetField5()) + `,`,
		`field6:` + fmt.Sprintf("%v", this.GetField6()) + `,`,
		`field7:` + fmt.Sprintf("%v", this.GetField7()) + `,`,
		`field8:` + fmt.Sprintf("%v", this.GetField8()) + `,`,
		`field9:` + fmt.Sprintf("%v", this.GetField9()) + `,`,
		`field10:` + fmt.Sprintf("%v", this.GetField10()) + `,`,
		`field11:` + fmt.Sprintf("%v", this.GetField11()) + `,`,
		`field12:` + fmt.Sprintf("%v", this.GetField12()) + `,`,
		`field13:` + fmt.Sprintf("%v", this.GetField13()) + `,`,
		`field14:` + fmt.Sprintf("%v", this.GetField14()) + `,`,
		`field15:` + fmt.Sprintf("%v", this.GetField15()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NidRepNative) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidRepNative{`,
		`field1:` + fmt.Sprintf("%v", this.field1[:this.xxx_LenField1]) + `,`,
		`field2:` + fmt.Sprintf("%v", this.field2[:this.xxx_LenField2]) + `,`,
		`field3:` + fmt.Sprintf("%v", this.field3[:this.xxx_LenField3]) + `,`,
		`field4:` + fmt.Sprintf("%v", this.field4[:this.xxx_LenField4]) + `,`,
		`field5:` + fmt.Sprintf("%v", this.field5[:this.xxx_LenField5]) + `,`,
		`field6:` + fmt.Sprintf("%v", this.field6[:this.xxx_LenField6]) + `,`,
		`field7:` + fmt.Sprintf("%v", this.field7[:this.xxx_LenField7]) + `,`,
		`field8:` + fmt.Sprintf("%v", this.field8[:this.xxx_LenField8]) + `,`,
		`field9:` + fmt.Sprintf("%v", this.field9[:this.xxx_LenField9]) + `,`,
		`field10:` + fmt.Sprintf("%v", this.field10[:this.xxx_LenField10]) + `,`,
		`field11:` + fmt.Sprintf("%v", this.field11[:this.xxx_LenField11]) + `,`,
		`field12:` + fmt.Sprintf("%v", this.field12[:this.xxx_LenField12]) + `,`,
		`field13:` + fmt.Sprintf("%v", this.field13[:this.xxx_LenField13]) + `,`,
		`field14:` + fmt.Sprintf("%v", this.field14[:this.xxx_LenField14]) + `,`,
		`field15:` + fmt.Sprintf("%v", this.field15[:this.xxx_LenField15]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinRepNative) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinRepNative{`,
		`field1:` + fmt.Sprintf("%v", this.field1[:this.xxx_LenField1]) + `,`,
		`field2:` + fmt.Sprintf("%v", this.field2[:this.xxx_LenField2]) + `,`,
		`field3:` + fmt.Sprintf("%v", this.field3[:this.xxx_LenField3]) + `,`,
		`field4:` + fmt.Sprintf("%v", this.field4[:this.xxx_LenField4]) + `,`,
		`field5:` + fmt.Sprintf("%v", this.field5[:this.xxx_LenField5]) + `,`,
		`field6:` + fmt.Sprintf("%v", this.field6[:this.xxx_LenField6]) + `,`,
		`field7:` + fmt.Sprintf("%v", this.field7[:this.xxx_LenField7]) + `,`,
		`field8:` + fmt.Sprintf("%v", this.field8[:this.xxx_LenField8]) + `,`,
		`field9:` + fmt.Sprintf("%v", this.field9[:this.xxx_LenField9]) + `,`,
		`field10:` + fmt.Sprintf("%v", this.field10[:this.xxx_LenField10]) + `,`,
		`field11:` + fmt.Sprintf("%v", this.field11[:this.xxx_LenField11]) + `,`,
		`field12:` + fmt.Sprintf("%v", this.field12[:this.xxx_LenField12]) + `,`,
		`field13:` + fmt.Sprintf("%v", this.field13[:this.xxx_LenField13]) + `,`,
		`field14:` + fmt.Sprintf("%v", this.field14[:this.xxx_LenField14]) + `,`,
		`field15:` + fmt.Sprintf("%v", this.field15[:this.xxx_LenField15]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NidRepPackedNative) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidRepPackedNative{`,
		`field1:` + fmt.Sprintf("%v", this.field1[:this.xxx_LenField1]) + `,`,
		`field2:` + fmt.Sprintf("%v", this.field2[:this.xxx_LenField2]) + `,`,
		`field3:` + fmt.Sprintf("%v", this.field3[:this.xxx_LenField3]) + `,`,
		`field4:` + fmt.Sprintf("%v", this.field4[:this.xxx_LenField4]) + `,`,
		`field5:` + fmt.Sprintf("%v", this.field5[:this.xxx_LenField5]) + `,`,
		`field6:` + fmt.Sprintf("%v", this.field6[:this.xxx_LenField6]) + `,`,
		`field7:` + fmt.Sprintf("%v", this.field7[:this.xxx_LenField7]) + `,`,
		`field8:` + fmt.Sprintf("%v", this.field8[:this.xxx_LenField8]) + `,`,
		`field9:` + fmt.Sprintf("%v", this.field9[:this.xxx_LenField9]) + `,`,
		`field10:` + fmt.Sprintf("%v", this.field10[:this.xxx_LenField10]) + `,`,
		`field11:` + fmt.Sprintf("%v", this.field11[:this.xxx_LenField11]) + `,`,
		`field12:` + fmt.Sprintf("%v", this.field12[:this.xxx_LenField12]) + `,`,
		`field13:` + fmt.Sprintf("%v", this.field13[:this.xxx_LenField13]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinRepPackedNative) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinRepPackedNative{`,
		`field1:` + fmt.Sprintf("%v", this.field1[:this.xxx_LenField1]) + `,`,
		`field2:` + fmt.Sprintf("%v", this.field2[:this.xxx_LenField2]) + `,`,
		`field3:` + fmt.Sprintf("%v", this.field3[:this.xxx_LenField3]) + `,`,
		`field4:` + fmt.Sprintf("%v", this.field4[:this.xxx_LenField4]) + `,`,
		`field5:` + fmt.Sprintf("%v", this.field5[:this.xxx_LenField5]) + `,`,
		`field6:` + fmt.Sprintf("%v", this.field6[:this.xxx_LenField6]) + `,`,
		`field7:` + fmt.Sprintf("%v", this.field7[:this.xxx_LenField7]) + `,`,
		`field8:` + fmt.Sprintf("%v", this.field8[:this.xxx_LenField8]) + `,`,
		`field9:` + fmt.Sprintf("%v", this.field9[:this.xxx_LenField9]) + `,`,
		`field10:` + fmt.Sprintf("%v", this.field10[:this.xxx_LenField10]) + `,`,
		`field11:` + fmt.Sprintf("%v", this.field11[:this.xxx_LenField11]) + `,`,
		`field12:` + fmt.Sprintf("%v", this.field12[:this.xxx_LenField12]) + `,`,
		`field13:` + fmt.Sprintf("%v", this.field13[:this.xxx_LenField13]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NidOptStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidOptStruct{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`field2:` + fmt.Sprintf("%v", this.GetField2()) + `,`,
		`field3:` + strings1.Replace(fmt.Sprintf("%v", this.GetField3()), "NidOptNative", "NidOptNative", 1) + `,`,
		`field4:` + strings1.Replace(fmt.Sprintf("%v", this.GetField4()), "NinOptNative", "NinOptNative", 1) + `,`,
		`field6:` + fmt.Sprintf("%v", this.GetField6()) + `,`,
		`field7:` + fmt.Sprintf("%v", this.GetField7()) + `,`,
		`field8:` + strings1.Replace(fmt.Sprintf("%v", this.GetField8()), "NidOptNative", "NidOptNative", 1) + `,`,
		`field13:` + fmt.Sprintf("%v", this.GetField13()) + `,`,
		`field14:` + fmt.Sprintf("%v", this.GetField14()) + `,`,
		`field15:` + fmt.Sprintf("%v", this.GetField15()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinOptStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinOptStruct{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`field2:` + fmt.Sprintf("%v", this.GetField2()) + `,`,
		`field3:` + strings1.Replace(fmt.Sprintf("%v", this.GetField3()), "NidOptNative", "NidOptNative", 1) + `,`,
		`field4:` + strings1.Replace(fmt.Sprintf("%v", this.GetField4()), "NinOptNative", "NinOptNative", 1) + `,`,
		`field6:` + fmt.Sprintf("%v", this.GetField6()) + `,`,
		`field7:` + fmt.Sprintf("%v", this.GetField7()) + `,`,
		`field8:` + strings1.Replace(fmt.Sprintf("%v", this.GetField8()), "NidOptNative", "NidOptNative", 1) + `,`,
		`field13:` + fmt.Sprintf("%v", this.GetField13()) + `,`,
		`field14:` + fmt.Sprintf("%v", this.GetField14()) + `,`,
		`field15:` + fmt.Sprintf("%v", this.GetField15()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NidRepStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidRepStruct{`,
		`field1:` + fmt.Sprintf("%v", this.field1[:this.xxx_LenField1]) + `,`,
		`field2:` + fmt.Sprintf("%v", this.field2[:this.xxx_LenField2]) + `,`,
		`field3:` + strings1.Replace(fmt.Sprintf("%v", this.field3[:this.xxx_LenField3]), "NidOptNative", "NidOptNative", 1) + `,`,
		`field4:` + strings1.Replace(fmt.Sprintf("%v", this.field4[:this.xxx_LenField4]), "NinOptNative", "NinOptNative", 1) + `,`,
		`field6:` + fmt.Sprintf("%v", this.field6[:this.xxx_LenField6]) + `,`,
		`field7:` + fmt.Sprintf("%v", this.field7[:this.xxx_LenField7]) + `,`,
		`field8:` + strings1.Replace(fmt.Sprintf("%v", this.field8[:this.xxx_LenField8]), "NidOptNative", "NidOptNative", 1) + `,`,
		`field13:` + fmt.Sprintf("%v", this.field13[:this.xxx_LenField13]) + `,`,
		`field14:` + fmt.Sprintf("%v", this.field14[:this.xxx_LenField14]) + `,`,
		`field15:` + fmt.Sprintf("%v", this.field15[:this.xxx_LenField15]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinRepStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinRepStruct{`,
		`field1:` + fmt.Sprintf("%v", this.field1[:this.xxx_LenField1]) + `,`,
		`field2:` + fmt.Sprintf("%v", this.field2[:this.xxx_LenField2]) + `,`,
		`field3:` + strings1.Replace(fmt.Sprintf("%v", this.field3[:this.xxx_LenField3]), "NidOptNative", "NidOptNative", 1) + `,`,
		`field4:` + strings1.Replace(fmt.Sprintf("%v", this.field4[:this.xxx_LenField4]), "NinOptNative", "NinOptNative", 1) + `,`,
		`field6:` + fmt.Sprintf("%v", this.field6[:this.xxx_LenField6]) + `,`,
		`field7:` + fmt.Sprintf("%v", this.field7[:this.xxx_LenField7]) + `,`,
		`field8:` + strings1.Replace(fmt.Sprintf("%v", this.field8[:this.xxx_LenField8]), "NidOptNative", "NidOptNative", 1) + `,`,
		`field13:` + fmt.Sprintf("%v", this.field13[:this.xxx_LenField13]) + `,`,
		`field14:` + fmt.Sprintf("%v", this.field14[:this.xxx_LenField14]) + `,`,
		`field15:` + fmt.Sprintf("%v", this.field15[:this.xxx_LenField15]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NidEmbeddedStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidEmbeddedStruct{`,
		`NidOptNative:` + strings1.Replace(fmt.Sprintf("%v", this.NidOptNative), "NidOptNative", "NidOptNative", 1) + `,`,
		`field200:` + strings1.Replace(fmt.Sprintf("%v", this.GetField200()), "NidOptNative", "NidOptNative", 1) + `,`,
		`field210:` + fmt.Sprintf("%v", this.GetField210()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinEmbeddedStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinEmbeddedStruct{`,
		`NidOptNative:` + strings1.Replace(fmt.Sprintf("%v", this.NidOptNative), "NidOptNative", "NidOptNative", 1) + `,`,
		`field200:` + strings1.Replace(fmt.Sprintf("%v", this.GetField200()), "NidOptNative", "NidOptNative", 1) + `,`,
		`field210:` + fmt.Sprintf("%v", this.GetField210()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NidNestedStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidNestedStruct{`,
		`field1:` + strings1.Replace(fmt.Sprintf("%v", this.GetField1()), "NidOptStruct", "NidOptStruct", 1) + `,`,
		`field2:` + strings1.Replace(fmt.Sprintf("%v", this.field2[:this.xxx_LenField2]), "NidRepStruct", "NidRepStruct", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinNestedStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinNestedStruct{`,
		`field1:` + strings1.Replace(fmt.Sprintf("%v", this.GetField1()), "NinOptStruct", "NinOptStruct", 1) + `,`,
		`field2:` + strings1.Replace(fmt.Sprintf("%v", this.field2[:this.xxx_LenField2]), "NinRepStruct", "NinRepStruct", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NidOptCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidOptCustom{`,
		`id:` + fmt.Sprintf("%v", this.id) + `,`,
		`value:` + fmt.Sprintf("%v", this.value) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinOptCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinOptCustom{`,
		`id:` + fmt.Sprintf("%v", this.id) + `,`,
		`value:` + fmt.Sprintf("%v", this.value) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NidRepCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidRepCustom{`,
		`id:` + fmt.Sprintf("%v", this.id[:this.xxx_LenId]) + `,`,
		`value:` + fmt.Sprintf("%v", this.value[:this.xxx_LenValue]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinRepCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinRepCustom{`,
		`id:` + fmt.Sprintf("%v", this.id[:this.xxx_LenId]) + `,`,
		`value:` + fmt.Sprintf("%v", this.value[:this.xxx_LenValue]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinOptNativeUnion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinOptNativeUnion{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`field2:` + fmt.Sprintf("%v", this.GetField2()) + `,`,
		`field3:` + fmt.Sprintf("%v", this.GetField3()) + `,`,
		`field4:` + fmt.Sprintf("%v", this.GetField4()) + `,`,
		`field5:` + fmt.Sprintf("%v", this.GetField5()) + `,`,
		`field6:` + fmt.Sprintf("%v", this.GetField6()) + `,`,
		`field13:` + fmt.Sprintf("%v", this.GetField13()) + `,`,
		`field14:` + fmt.Sprintf("%v", this.GetField14()) + `,`,
		`field15:` + fmt.Sprintf("%v", this.GetField15()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinOptStructUnion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinOptStructUnion{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`field2:` + fmt.Sprintf("%v", this.GetField2()) + `,`,
		`field3:` + strings1.Replace(fmt.Sprintf("%v", this.GetField3()), "NidOptNative", "NidOptNative", 1) + `,`,
		`field4:` + strings1.Replace(fmt.Sprintf("%v", this.GetField4()), "NinOptNative", "NinOptNative", 1) + `,`,
		`field6:` + fmt.Sprintf("%v", this.GetField6()) + `,`,
		`field7:` + fmt.Sprintf("%v", this.GetField7()) + `,`,
		`field13:` + fmt.Sprintf("%v", this.GetField13()) + `,`,
		`field14:` + fmt.Sprintf("%v", this.GetField14()) + `,`,
		`field15:` + fmt.Sprintf("%v", this.GetField15()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinEmbeddedStructUnion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinEmbeddedStructUnion{`,
		`NidOptNative:` + strings1.Replace(fmt.Sprintf("%v", this.NidOptNative), "NidOptNative", "NidOptNative", 1) + `,`,
		`field200:` + strings1.Replace(fmt.Sprintf("%v", this.GetField200()), "NinOptNative", "NinOptNative", 1) + `,`,
		`field210:` + fmt.Sprintf("%v", this.GetField210()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinNestedStructUnion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinNestedStructUnion{`,
		`field1:` + strings1.Replace(fmt.Sprintf("%v", this.GetField1()), "NinOptNativeUnion", "NinOptNativeUnion", 1) + `,`,
		`field2:` + strings1.Replace(fmt.Sprintf("%v", this.GetField2()), "NinOptStructUnion", "NinOptStructUnion", 1) + `,`,
		`field3:` + strings1.Replace(fmt.Sprintf("%v", this.GetField3()), "NinEmbeddedStructUnion", "NinEmbeddedStructUnion", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tree) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&Tree{`,
		`or:` + strings1.Replace(fmt.Sprintf("%v", this.GetOr()), "OrBranch", "OrBranch", 1) + `,`,
		`and:` + strings1.Replace(fmt.Sprintf("%v", this.GetAnd()), "AndBranch", "AndBranch", 1) + `,`,
		`leaf:` + strings1.Replace(fmt.Sprintf("%v", this.GetLeaf()), "Leaf", "Leaf", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrBranch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&OrBranch{`,
		`left:` + strings1.Replace(fmt.Sprintf("%v", this.GetLeft()), "Tree", "Tree", 1) + `,`,
		`right:` + strings1.Replace(fmt.Sprintf("%v", this.GetRight()), "Tree", "Tree", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AndBranch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&AndBranch{`,
		`left:` + strings1.Replace(fmt.Sprintf("%v", this.GetLeft()), "Tree", "Tree", 1) + `,`,
		`right:` + strings1.Replace(fmt.Sprintf("%v", this.GetRight()), "Tree", "Tree", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Leaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&Leaf{`,
		`value:` + fmt.Sprintf("%v", this.GetValue()) + `,`,
		`strValue:` + fmt.Sprintf("%v", this.GetStrValue()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeepTree) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&DeepTree{`,
		`down:` + strings1.Replace(fmt.Sprintf("%v", this.GetDown()), "ADeepBranch", "ADeepBranch", 1) + `,`,
		`and:` + strings1.Replace(fmt.Sprintf("%v", this.GetAnd()), "AndDeepBranch", "AndDeepBranch", 1) + `,`,
		`leaf:` + strings1.Replace(fmt.Sprintf("%v", this.GetLeaf()), "DeepLeaf", "DeepLeaf", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ADeepBranch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&ADeepBranch{`,
		`down:` + strings1.Replace(fmt.Sprintf("%v", this.GetDown()), "DeepTree", "DeepTree", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AndDeepBranch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&AndDeepBranch{`,
		`left:` + strings1.Replace(fmt.Sprintf("%v", this.GetLeft()), "DeepTree", "DeepTree", 1) + `,`,
		`right:` + strings1.Replace(fmt.Sprintf("%v", this.GetRight()), "DeepTree", "DeepTree", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeepLeaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&DeepLeaf{`,
		`tree:` + strings1.Replace(fmt.Sprintf("%v", this.GetTree()), "Tree", "Tree", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Nil) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&Nil{`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NidOptEnum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidOptEnum{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinOptEnum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinOptEnum{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NidRepEnum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NidRepEnum{`,
		`field1:` + fmt.Sprintf("%v", this.field1[:this.xxx_LenField1]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinRepEnum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinRepEnum{`,
		`field1:` + fmt.Sprintf("%v", this.field1[:this.xxx_LenField1]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinOptEnumDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinOptEnumDefault{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnotherNinOptEnum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&AnotherNinOptEnum{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnotherNinOptEnumDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&AnotherNinOptEnumDefault{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Timer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&Timer{`,
		`time1:` + fmt.Sprintf("%v", this.GetTime1()) + `,`,
		`time2:` + fmt.Sprintf("%v", this.GetTime2()) + `,`,
		`data:` + fmt.Sprintf("%v", this.GetData()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MyExtendable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&MyExtendable{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`XXX_extensions:` + proto.StringFromExtensionsMap(this.XXX_extensions) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OtherExtenable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&OtherExtenable{`,
		`field2:` + fmt.Sprintf("%v", this.GetField2()) + `,`,
		`field13:` + fmt.Sprintf("%v", this.GetField13()) + `,`,
		`m:` + strings1.Replace(fmt.Sprintf("%v", this.GetM()), "MyExtendable", "MyExtendable", 1) + `,`,
		`XXX_extensions:` + proto.StringFromExtensionsMap(this.XXX_extensions) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NestedDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NestedDefinition{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`enumField:` + fmt.Sprintf("%v", this.GetEnumField()) + `,`,
		`nNM:` + strings1.Replace(fmt.Sprintf("%v", this.GetNNM()), "NestedDefinition_NestedMessage_NestedNestedMsg", "NestedDefinition_NestedMessage_NestedNestedMsg", 1) + `,`,
		`nM:` + strings1.Replace(fmt.Sprintf("%v", this.GetNM()), "NestedDefinition_NestedMessage", "NestedDefinition_NestedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NestedDefinition_NestedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NestedDefinition_NestedMessage{`,
		`nestedField1:` + fmt.Sprintf("%v", this.GetNestedField1()) + `,`,
		`nNM:` + strings1.Replace(fmt.Sprintf("%v", this.GetNNM()), "NestedDefinition_NestedMessage_NestedNestedMsg", "NestedDefinition_NestedMessage_NestedNestedMsg", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NestedDefinition_NestedMessage_NestedNestedMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NestedDefinition_NestedMessage_NestedNestedMsg{`,
		`nestedNestedField1:` + fmt.Sprintf("%v", this.GetNestedNestedField1()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NestedScope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NestedScope{`,
		`a:` + strings1.Replace(fmt.Sprintf("%v", this.GetA()), "NestedDefinition_NestedMessage_NestedNestedMsg", "NestedDefinition_NestedMessage_NestedNestedMsg", 1) + `,`,
		`b:` + fmt.Sprintf("%v", this.GetB()) + `,`,
		`c:` + strings1.Replace(fmt.Sprintf("%v", this.GetC()), "NestedDefinition_NestedMessage", "NestedDefinition_NestedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NinOptNativeDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NinOptNativeDefault{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`field2:` + fmt.Sprintf("%v", this.GetField2()) + `,`,
		`field3:` + fmt.Sprintf("%v", this.GetField3()) + `,`,
		`field4:` + fmt.Sprintf("%v", this.GetField4()) + `,`,
		`field5:` + fmt.Sprintf("%v", this.GetField5()) + `,`,
		`field6:` + fmt.Sprintf("%v", this.GetField6()) + `,`,
		`field7:` + fmt.Sprintf("%v", this.GetField7()) + `,`,
		`field8:` + fmt.Sprintf("%v", this.GetField8()) + `,`,
		`field9:` + fmt.Sprintf("%v", this.GetField9()) + `,`,
		`field10:` + fmt.Sprintf("%v", this.GetField10()) + `,`,
		`field11:` + fmt.Sprintf("%v", this.GetField11()) + `,`,
		`field12:` + fmt.Sprintf("%v", this.GetField12()) + `,`,
		`field13:` + fmt.Sprintf("%v", this.GetField13()) + `,`,
		`field14:` + fmt.Sprintf("%v", this.GetField14()) + `,`,
		`field15:` + fmt.Sprintf("%v", this.GetField15()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomContainer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&CustomContainer{`,
		`customStruct:` + strings1.Replace(fmt.Sprintf("%v", this.GetCustomStruct()), "NidOptCustom", "NidOptCustom", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomNameNidOptNative) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&CustomNameNidOptNative{`,
		`fieldA:` + fmt.Sprintf("%v", this.GetFieldA()) + `,`,
		`fieldB:` + fmt.Sprintf("%v", this.GetFieldB()) + `,`,
		`fieldC:` + fmt.Sprintf("%v", this.GetFieldC()) + `,`,
		`fieldD:` + fmt.Sprintf("%v", this.GetFieldD()) + `,`,
		`fieldE:` + fmt.Sprintf("%v", this.GetFieldE()) + `,`,
		`fieldF:` + fmt.Sprintf("%v", this.GetFieldF()) + `,`,
		`fieldG:` + fmt.Sprintf("%v", this.GetFieldG()) + `,`,
		`fieldH:` + fmt.Sprintf("%v", this.GetFieldH()) + `,`,
		`fieldI:` + fmt.Sprintf("%v", this.GetFieldI()) + `,`,
		`fieldJ:` + fmt.Sprintf("%v", this.GetFieldJ()) + `,`,
		`fieldK:` + fmt.Sprintf("%v", this.GetFieldK()) + `,`,
		`fieldL:` + fmt.Sprintf("%v", this.GetFieldL()) + `,`,
		`fieldM:` + fmt.Sprintf("%v", this.GetFieldM()) + `,`,
		`fieldN:` + fmt.Sprintf("%v", this.GetFieldN()) + `,`,
		`fieldO:` + fmt.Sprintf("%v", this.GetFieldO()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomNameNinOptNative) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&CustomNameNinOptNative{`,
		`fieldA:` + fmt.Sprintf("%v", this.GetFieldA()) + `,`,
		`fieldB:` + fmt.Sprintf("%v", this.GetFieldB()) + `,`,
		`fieldC:` + fmt.Sprintf("%v", this.GetFieldC()) + `,`,
		`fieldD:` + fmt.Sprintf("%v", this.GetFieldD()) + `,`,
		`fieldE:` + fmt.Sprintf("%v", this.GetFieldE()) + `,`,
		`fieldF:` + fmt.Sprintf("%v", this.GetFieldF()) + `,`,
		`fieldG:` + fmt.Sprintf("%v", this.GetFieldG()) + `,`,
		`fieldH:` + fmt.Sprintf("%v", this.GetFieldH()) + `,`,
		`fieldI:` + fmt.Sprintf("%v", this.GetFieldI()) + `,`,
		`fieldJ:` + fmt.Sprintf("%v", this.GetFieldJ()) + `,`,
		`fieldK:` + fmt.Sprintf("%v", this.GetFieldK()) + `,`,
		`fielL:` + fmt.Sprintf("%v", this.GetFielL()) + `,`,
		`fieldM:` + fmt.Sprintf("%v", this.GetFieldM()) + `,`,
		`fieldN:` + fmt.Sprintf("%v", this.GetFieldN()) + `,`,
		`fieldO:` + fmt.Sprintf("%v", this.GetFieldO()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomNameNinRepNative) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&CustomNameNinRepNative{`,
		`fieldA:` + fmt.Sprintf("%v", this.fieldA[:this.xxx_LenFieldA]) + `,`,
		`fieldB:` + fmt.Sprintf("%v", this.fieldB[:this.xxx_LenFieldB]) + `,`,
		`fieldC:` + fmt.Sprintf("%v", this.fieldC[:this.xxx_LenFieldC]) + `,`,
		`fieldD:` + fmt.Sprintf("%v", this.fieldD[:this.xxx_LenFieldD]) + `,`,
		`fieldE:` + fmt.Sprintf("%v", this.fieldE[:this.xxx_LenFieldE]) + `,`,
		`fieldF:` + fmt.Sprintf("%v", this.fieldF[:this.xxx_LenFieldF]) + `,`,
		`fieldG:` + fmt.Sprintf("%v", this.fieldG[:this.xxx_LenFieldG]) + `,`,
		`fieldH:` + fmt.Sprintf("%v", this.fieldH[:this.xxx_LenFieldH]) + `,`,
		`fieldI:` + fmt.Sprintf("%v", this.fieldI[:this.xxx_LenFieldI]) + `,`,
		`fieldJ:` + fmt.Sprintf("%v", this.fieldJ[:this.xxx_LenFieldJ]) + `,`,
		`fieldK:` + fmt.Sprintf("%v", this.fieldK[:this.xxx_LenFieldK]) + `,`,
		`fieldL:` + fmt.Sprintf("%v", this.fieldL[:this.xxx_LenFieldL]) + `,`,
		`fieldM:` + fmt.Sprintf("%v", this.fieldM[:this.xxx_LenFieldM]) + `,`,
		`fieldN:` + fmt.Sprintf("%v", this.fieldN[:this.xxx_LenFieldN]) + `,`,
		`fieldO:` + fmt.Sprintf("%v", this.fieldO[:this.xxx_LenFieldO]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomNameNinStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&CustomNameNinStruct{`,
		`fieldA:` + fmt.Sprintf("%v", this.GetFieldA()) + `,`,
		`fieldB:` + fmt.Sprintf("%v", this.GetFieldB()) + `,`,
		`fieldC:` + strings1.Replace(fmt.Sprintf("%v", this.GetFieldC()), "NidOptNative", "NidOptNative", 1) + `,`,
		`fieldD:` + strings1.Replace(fmt.Sprintf("%v", this.fieldD[:this.xxx_LenFieldD]), "NinOptNative", "NinOptNative", 1) + `,`,
		`fieldE:` + fmt.Sprintf("%v", this.GetFieldE()) + `,`,
		`fieldF:` + fmt.Sprintf("%v", this.GetFieldF()) + `,`,
		`fieldG:` + strings1.Replace(fmt.Sprintf("%v", this.GetFieldG()), "NidOptNative", "NidOptNative", 1) + `,`,
		`fieldH:` + fmt.Sprintf("%v", this.GetFieldH()) + `,`,
		`fieldI:` + fmt.Sprintf("%v", this.GetFieldI()) + `,`,
		`fieldJ:` + fmt.Sprintf("%v", this.GetFieldJ()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomNameCustomType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&CustomNameCustomType{`,
		`fieldA:` + fmt.Sprintf("%v", this.fieldA) + `,`,
		`fieldB:` + fmt.Sprintf("%v", this.fieldB) + `,`,
		`fieldC:` + fmt.Sprintf("%v", this.fieldC[:this.xxx_LenFieldC]) + `,`,
		`fieldD:` + fmt.Sprintf("%v", this.fieldD[:this.xxx_LenFieldD]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomNameNinEmbeddedStructUnion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&CustomNameNinEmbeddedStructUnion{`,
		`NidOptNative:` + strings1.Replace(fmt.Sprintf("%v", this.NidOptNative), "NidOptNative", "NidOptNative", 1) + `,`,
		`fieldA:` + strings1.Replace(fmt.Sprintf("%v", this.GetFieldA()), "NinOptNative", "NinOptNative", 1) + `,`,
		`fieldB:` + fmt.Sprintf("%v", this.GetFieldB()) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomNameEnum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&CustomNameEnum{`,
		`fieldA:` + fmt.Sprintf("%v", this.GetFieldA()) + `,`,
		`fieldB:` + fmt.Sprintf("%v", this.fieldB[:this.xxx_LenFieldB]) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NoExtensionsMap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&NoExtensionsMap{`,
		`field1:` + fmt.Sprintf("%v", this.GetField1()) + `,`,
		`XXX_extensions:` + proto.StringFromExtensionsBytes(this.XXX_extensions) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func NewPopulatedNidOptNative(r randyThetest, easy bool) *NidOptNative {
	this := &NidOptNative{}
	this.xxx_IsField1Set = true
	this.field1 = (r.Float64())
	if r.Intn(2) == 0 {
		this.field1 *= (-1)
	}
	this.xxx_IsField2Set = true
	this.field2 = (r.Float32())
	if r.Intn(2) == 0 {
		this.field2 *= (-1)
	}
	this.xxx_IsField3Set = true
	this.field3 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field3 *= (-1)
	}
	this.xxx_IsField4Set = true
	this.field4 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field4 *= (-1)
	}
	this.xxx_IsField5Set = true
	this.field5 = (r.Uint32())
	this.xxx_IsField6Set = true
	this.field6 = (uint64(r.Uint32()))
	this.xxx_IsField7Set = true
	this.field7 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field7 *= (-1)
	}
	this.xxx_IsField8Set = true
	this.field8 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field8 *= (-1)
	}
	this.xxx_IsField9Set = true
	this.field9 = (r.Uint32())
	this.xxx_IsField10Set = true
	this.field10 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field10 *= (-1)
	}
	this.xxx_IsField11Set = true
	this.field11 = (uint64(r.Uint32()))
	this.xxx_IsField12Set = true
	this.field12 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field12 *= (-1)
	}
	this.xxx_IsField13Set = true
	this.field13 = (bool(r.Intn(2) == 0))
	this.xxx_IsField14Set = true
	this.field14 = randStringThetest(r)
	v1 := r.Intn(100)
	this.field15 = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.xxx_IsField15Set = true
		this.field15[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedNinOptNative(r randyThetest, easy bool) *NinOptNative {
	this := &NinOptNative{}
	this.xxx_IsField1Set = true
	this.field1 = (r.Float64())
	if r.Intn(2) == 0 {
		this.field1 *= (-1)
	}
	this.xxx_IsField2Set = true
	this.field2 = (r.Float32())
	if r.Intn(2) == 0 {
		this.field2 *= (-1)
	}
	this.xxx_IsField3Set = true
	this.field3 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field3 *= (-1)
	}
	this.xxx_IsField4Set = true
	this.field4 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field4 *= (-1)
	}
	this.xxx_IsField5Set = true
	this.field5 = (r.Uint32())
	this.xxx_IsField6Set = true
	this.field6 = (uint64(r.Uint32()))
	this.xxx_IsField7Set = true
	this.field7 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field7 *= (-1)
	}
	this.xxx_IsField8Set = true
	this.field8 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field8 *= (-1)
	}
	this.xxx_IsField9Set = true
	this.field9 = (r.Uint32())
	this.xxx_IsField10Set = true
	this.field10 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field10 *= (-1)
	}
	this.xxx_IsField11Set = true
	this.field11 = (uint64(r.Uint32()))
	this.xxx_IsField12Set = true
	this.field12 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field12 *= (-1)
	}
	this.xxx_IsField13Set = true
	this.field13 = (bool(r.Intn(2) == 0))
	this.xxx_IsField14Set = true
	this.field14 = randStringThetest(r)
	v2 := r.Intn(100)
	this.field15 = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.xxx_IsField15Set = true
		this.field15[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedNidRepNative(r randyThetest, easy bool) *NidRepNative {
	this := &NidRepNative{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(100)
		this.field1 = make([]float64, v3)
		for i := 0; i < v3; i++ {
			this.xxx_LenField1 += 1
			this.field1[i] = (r.Float64())
			if r.Intn(2) == 0 {
				this.field1[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(100)
		this.field2 = make([]float32, v4)
		for i := 0; i < v4; i++ {
			this.xxx_LenField2 += 1
			this.field2[i] = (r.Float32())
			if r.Intn(2) == 0 {
				this.field2[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(100)
		this.field3 = make([]int32, v5)
		for i := 0; i < v5; i++ {
			this.xxx_LenField3 += 1
			this.field3[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field3[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(100)
		this.field4 = make([]int64, v6)
		for i := 0; i < v6; i++ {
			this.xxx_LenField4 += 1
			this.field4[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field4[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(100)
		this.field5 = make([]uint32, v7)
		for i := 0; i < v7; i++ {
			this.xxx_LenField5 += 1
			this.field5[i] = (r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(100)
		this.field6 = make([]uint64, v8)
		for i := 0; i < v8; i++ {
			this.xxx_LenField6 += 1
			this.field6[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(100)
		this.field7 = make([]int32, v9)
		for i := 0; i < v9; i++ {
			this.xxx_LenField7 += 1
			this.field7[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field7[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(100)
		this.field8 = make([]int64, v10)
		for i := 0; i < v10; i++ {
			this.xxx_LenField8 += 1
			this.field8[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field8[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(100)
		this.field9 = make([]uint32, v11)
		for i := 0; i < v11; i++ {
			this.xxx_LenField9 += 1
			this.field9[i] = (r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(100)
		this.field10 = make([]int32, v12)
		for i := 0; i < v12; i++ {
			this.xxx_LenField10 += 1
			this.field10[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field10[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(100)
		this.field11 = make([]uint64, v13)
		for i := 0; i < v13; i++ {
			this.xxx_LenField11 += 1
			this.field11[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v14 := r.Intn(100)
		this.field12 = make([]int64, v14)
		for i := 0; i < v14; i++ {
			this.xxx_LenField12 += 1
			this.field12[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field12[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(100)
		this.field13 = make([]bool, v15)
		for i := 0; i < v15; i++ {
			this.xxx_LenField13 += 1
			this.field13[i] = (bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(10)
		this.field14 = make([]string, v16)
		for i := 0; i < v16; i++ {
			this.xxx_LenField14 += 1
			this.field14[i] = randStringThetest(r)
		}
	}
	if r.Intn(10) != 0 {
		v17 := r.Intn(100)
		this.field15 = make([][]byte, v17)
		for i := 0; i < v17; i++ {
			v18 := r.Intn(100)
			this.xxx_LenField15 += 1
			this.field15[i] = make([]byte, v18)
			for j := 0; j < v18; j++ {
				this.field15[i][j] = byte(r.Intn(256))
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedNinRepNative(r randyThetest, easy bool) *NinRepNative {
	this := &NinRepNative{}
	if r.Intn(10) != 0 {
		v19 := r.Intn(100)
		this.field1 = make([]float64, v19)
		for i := 0; i < v19; i++ {
			this.xxx_LenField1 += 1
			this.field1[i] = (r.Float64())
			if r.Intn(2) == 0 {
				this.field1[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(100)
		this.field2 = make([]float32, v20)
		for i := 0; i < v20; i++ {
			this.xxx_LenField2 += 1
			this.field2[i] = (r.Float32())
			if r.Intn(2) == 0 {
				this.field2[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(100)
		this.field3 = make([]int32, v21)
		for i := 0; i < v21; i++ {
			this.xxx_LenField3 += 1
			this.field3[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field3[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v22 := r.Intn(100)
		this.field4 = make([]int64, v22)
		for i := 0; i < v22; i++ {
			this.xxx_LenField4 += 1
			this.field4[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field4[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v23 := r.Intn(100)
		this.field5 = make([]uint32, v23)
		for i := 0; i < v23; i++ {
			this.xxx_LenField5 += 1
			this.field5[i] = (r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v24 := r.Intn(100)
		this.field6 = make([]uint64, v24)
		for i := 0; i < v24; i++ {
			this.xxx_LenField6 += 1
			this.field6[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v25 := r.Intn(100)
		this.field7 = make([]int32, v25)
		for i := 0; i < v25; i++ {
			this.xxx_LenField7 += 1
			this.field7[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field7[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(100)
		this.field8 = make([]int64, v26)
		for i := 0; i < v26; i++ {
			this.xxx_LenField8 += 1
			this.field8[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field8[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v27 := r.Intn(100)
		this.field9 = make([]uint32, v27)
		for i := 0; i < v27; i++ {
			this.xxx_LenField9 += 1
			this.field9[i] = (r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v28 := r.Intn(100)
		this.field10 = make([]int32, v28)
		for i := 0; i < v28; i++ {
			this.xxx_LenField10 += 1
			this.field10[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field10[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v29 := r.Intn(100)
		this.field11 = make([]uint64, v29)
		for i := 0; i < v29; i++ {
			this.xxx_LenField11 += 1
			this.field11[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v30 := r.Intn(100)
		this.field12 = make([]int64, v30)
		for i := 0; i < v30; i++ {
			this.xxx_LenField12 += 1
			this.field12[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field12[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v31 := r.Intn(100)
		this.field13 = make([]bool, v31)
		for i := 0; i < v31; i++ {
			this.xxx_LenField13 += 1
			this.field13[i] = (bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v32 := r.Intn(10)
		this.field14 = make([]string, v32)
		for i := 0; i < v32; i++ {
			this.xxx_LenField14 += 1
			this.field14[i] = randStringThetest(r)
		}
	}
	if r.Intn(10) != 0 {
		v33 := r.Intn(100)
		this.field15 = make([][]byte, v33)
		for i := 0; i < v33; i++ {
			v34 := r.Intn(100)
			this.xxx_LenField15 += 1
			this.field15[i] = make([]byte, v34)
			for j := 0; j < v34; j++ {
				this.field15[i][j] = byte(r.Intn(256))
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedNidRepPackedNative(r randyThetest, easy bool) *NidRepPackedNative {
	this := &NidRepPackedNative{}
	if r.Intn(10) != 0 {
		v35 := r.Intn(100)
		this.field1 = make([]float64, v35)
		for i := 0; i < v35; i++ {
			this.xxx_LenField1 += 1
			this.field1[i] = (r.Float64())
			if r.Intn(2) == 0 {
				this.field1[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v36 := r.Intn(100)
		this.field2 = make([]float32, v36)
		for i := 0; i < v36; i++ {
			this.xxx_LenField2 += 1
			this.field2[i] = (r.Float32())
			if r.Intn(2) == 0 {
				this.field2[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v37 := r.Intn(100)
		this.field3 = make([]int32, v37)
		for i := 0; i < v37; i++ {
			this.xxx_LenField3 += 1
			this.field3[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field3[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v38 := r.Intn(100)
		this.field4 = make([]int64, v38)
		for i := 0; i < v38; i++ {
			this.xxx_LenField4 += 1
			this.field4[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field4[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v39 := r.Intn(100)
		this.field5 = make([]uint32, v39)
		for i := 0; i < v39; i++ {
			this.xxx_LenField5 += 1
			this.field5[i] = (r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v40 := r.Intn(100)
		this.field6 = make([]uint64, v40)
		for i := 0; i < v40; i++ {
			this.xxx_LenField6 += 1
			this.field6[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v41 := r.Intn(100)
		this.field7 = make([]int32, v41)
		for i := 0; i < v41; i++ {
			this.xxx_LenField7 += 1
			this.field7[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field7[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v42 := r.Intn(100)
		this.field8 = make([]int64, v42)
		for i := 0; i < v42; i++ {
			this.xxx_LenField8 += 1
			this.field8[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field8[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v43 := r.Intn(100)
		this.field9 = make([]uint32, v43)
		for i := 0; i < v43; i++ {
			this.xxx_LenField9 += 1
			this.field9[i] = (r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v44 := r.Intn(100)
		this.field10 = make([]int32, v44)
		for i := 0; i < v44; i++ {
			this.xxx_LenField10 += 1
			this.field10[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field10[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v45 := r.Intn(100)
		this.field11 = make([]uint64, v45)
		for i := 0; i < v45; i++ {
			this.xxx_LenField11 += 1
			this.field11[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v46 := r.Intn(100)
		this.field12 = make([]int64, v46)
		for i := 0; i < v46; i++ {
			this.xxx_LenField12 += 1
			this.field12[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field12[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v47 := r.Intn(100)
		this.field13 = make([]bool, v47)
		for i := 0; i < v47; i++ {
			this.xxx_LenField13 += 1
			this.field13[i] = (bool(r.Intn(2) == 0))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 14)
	}
	return this
}

func NewPopulatedNinRepPackedNative(r randyThetest, easy bool) *NinRepPackedNative {
	this := &NinRepPackedNative{}
	if r.Intn(10) != 0 {
		v48 := r.Intn(100)
		this.field1 = make([]float64, v48)
		for i := 0; i < v48; i++ {
			this.xxx_LenField1 += 1
			this.field1[i] = (r.Float64())
			if r.Intn(2) == 0 {
				this.field1[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v49 := r.Intn(100)
		this.field2 = make([]float32, v49)
		for i := 0; i < v49; i++ {
			this.xxx_LenField2 += 1
			this.field2[i] = (r.Float32())
			if r.Intn(2) == 0 {
				this.field2[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v50 := r.Intn(100)
		this.field3 = make([]int32, v50)
		for i := 0; i < v50; i++ {
			this.xxx_LenField3 += 1
			this.field3[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field3[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v51 := r.Intn(100)
		this.field4 = make([]int64, v51)
		for i := 0; i < v51; i++ {
			this.xxx_LenField4 += 1
			this.field4[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field4[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v52 := r.Intn(100)
		this.field5 = make([]uint32, v52)
		for i := 0; i < v52; i++ {
			this.xxx_LenField5 += 1
			this.field5[i] = (r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v53 := r.Intn(100)
		this.field6 = make([]uint64, v53)
		for i := 0; i < v53; i++ {
			this.xxx_LenField6 += 1
			this.field6[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v54 := r.Intn(100)
		this.field7 = make([]int32, v54)
		for i := 0; i < v54; i++ {
			this.xxx_LenField7 += 1
			this.field7[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field7[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v55 := r.Intn(100)
		this.field8 = make([]int64, v55)
		for i := 0; i < v55; i++ {
			this.xxx_LenField8 += 1
			this.field8[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field8[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v56 := r.Intn(100)
		this.field9 = make([]uint32, v56)
		for i := 0; i < v56; i++ {
			this.xxx_LenField9 += 1
			this.field9[i] = (r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v57 := r.Intn(100)
		this.field10 = make([]int32, v57)
		for i := 0; i < v57; i++ {
			this.xxx_LenField10 += 1
			this.field10[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field10[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v58 := r.Intn(100)
		this.field11 = make([]uint64, v58)
		for i := 0; i < v58; i++ {
			this.xxx_LenField11 += 1
			this.field11[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v59 := r.Intn(100)
		this.field12 = make([]int64, v59)
		for i := 0; i < v59; i++ {
			this.xxx_LenField12 += 1
			this.field12[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.field12[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v60 := r.Intn(100)
		this.field13 = make([]bool, v60)
		for i := 0; i < v60; i++ {
			this.xxx_LenField13 += 1
			this.field13[i] = (bool(r.Intn(2) == 0))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 14)
	}
	return this
}

func NewPopulatedNidOptStruct(r randyThetest, easy bool) *NidOptStruct {
	this := &NidOptStruct{}
	this.xxx_IsField1Set = true
	this.field1 = (r.Float64())
	if r.Intn(2) == 0 {
		this.field1 *= (-1)
	}
	this.xxx_IsField2Set = true
	this.field2 = (r.Float32())
	if r.Intn(2) == 0 {
		this.field2 *= (-1)
	}
	v61 := NewPopulatedNidOptNative(r, easy)
	this.xxx_IsField3Set = true
	this.field3 = v61
	v62 := NewPopulatedNinOptNative(r, easy)
	this.xxx_IsField4Set = true
	this.field4 = v62
	this.xxx_IsField6Set = true
	this.field6 = (uint64(r.Uint32()))
	this.xxx_IsField7Set = true
	this.field7 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field7 *= (-1)
	}
	v63 := NewPopulatedNidOptNative(r, easy)
	this.xxx_IsField8Set = true
	this.field8 = v63
	this.xxx_IsField13Set = true
	this.field13 = (bool(r.Intn(2) == 0))
	this.xxx_IsField14Set = true
	this.field14 = randStringThetest(r)
	v64 := r.Intn(100)
	this.field15 = make([]byte, v64)
	for i := 0; i < v64; i++ {
		this.xxx_IsField15Set = true
		this.field15[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedNinOptStruct(r randyThetest, easy bool) *NinOptStruct {
	this := &NinOptStruct{}
	this.xxx_IsField1Set = true
	this.field1 = (r.Float64())
	if r.Intn(2) == 0 {
		this.field1 *= (-1)
	}
	this.xxx_IsField2Set = true
	this.field2 = (r.Float32())
	if r.Intn(2) == 0 {
		this.field2 *= (-1)
	}
	v65 := NewPopulatedNidOptNative(r, easy)
	this.xxx_IsField3Set = true
	this.field3 = v65
	v66 := NewPopulatedNinOptNative(r, easy)
	this.xxx_IsField4Set = true
	this.field4 = v66
	this.xxx_IsField6Set = true
	this.field6 = (uint64(r.Uint32()))
	this.xxx_IsField7Set = true
	this.field7 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field7 *= (-1)
	}
	v67 := NewPopulatedNidOptNative(r, easy)
	this.xxx_IsField8Set = true
	this.field8 = v67
	this.xxx_IsField13Set = true
	this.field13 = (bool(r.Intn(2) == 0))
	this.xxx_IsField14Set = true
	this.field14 = randStringThetest(r)
	v68 := r.Intn(100)
	this.field15 = make([]byte, v68)
	for i := 0; i < v68; i++ {
		this.xxx_IsField15Set = true
		this.field15[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedNidRepStruct(r randyThetest, easy bool) *NidRepStruct {
	this := &NidRepStruct{}
	if r.Intn(10) != 0 {
		v69 := r.Intn(100)
		this.field1 = make([]float64, v69)
		for i := 0; i < v69; i++ {
			this.xxx_LenField1 += 1
			this.field1[i] = (r.Float64())
			if r.Intn(2) == 0 {
				this.field1[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v70 := r.Intn(100)
		this.field2 = make([]float32, v70)
		for i := 0; i < v70; i++ {
			this.xxx_LenField2 += 1
			this.field2[i] = (r.Float32())
			if r.Intn(2) == 0 {
				this.field2[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v71 := r.Intn(10)
		this.field3 = make([]*NidOptNative, v71)
		for i := 0; i < v71; i++ {
			v72 := NewPopulatedNidOptNative(r, easy)
			this.xxx_LenField3 += 1
			this.field3[i] = v72
		}
	}
	if r.Intn(10) != 0 {
		v73 := r.Intn(10)
		this.field4 = make([]*NinOptNative, v73)
		for i := 0; i < v73; i++ {
			v74 := NewPopulatedNinOptNative(r, easy)
			this.xxx_LenField4 += 1
			this.field4[i] = v74
		}
	}
	if r.Intn(10) != 0 {
		v75 := r.Intn(100)
		this.field6 = make([]uint64, v75)
		for i := 0; i < v75; i++ {
			this.xxx_LenField6 += 1
			this.field6[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v76 := r.Intn(100)
		this.field7 = make([]int32, v76)
		for i := 0; i < v76; i++ {
			this.xxx_LenField7 += 1
			this.field7[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field7[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v77 := r.Intn(10)
		this.field8 = make([]*NidOptNative, v77)
		for i := 0; i < v77; i++ {
			v78 := NewPopulatedNidOptNative(r, easy)
			this.xxx_LenField8 += 1
			this.field8[i] = v78
		}
	}
	if r.Intn(10) != 0 {
		v79 := r.Intn(100)
		this.field13 = make([]bool, v79)
		for i := 0; i < v79; i++ {
			this.xxx_LenField13 += 1
			this.field13[i] = (bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v80 := r.Intn(10)
		this.field14 = make([]string, v80)
		for i := 0; i < v80; i++ {
			this.xxx_LenField14 += 1
			this.field14[i] = randStringThetest(r)
		}
	}
	if r.Intn(10) != 0 {
		v81 := r.Intn(100)
		this.field15 = make([][]byte, v81)
		for i := 0; i < v81; i++ {
			v82 := r.Intn(100)
			this.xxx_LenField15 += 1
			this.field15[i] = make([]byte, v82)
			for j := 0; j < v82; j++ {
				this.field15[i][j] = byte(r.Intn(256))
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedNinRepStruct(r randyThetest, easy bool) *NinRepStruct {
	this := &NinRepStruct{}
	if r.Intn(10) != 0 {
		v83 := r.Intn(100)
		this.field1 = make([]float64, v83)
		for i := 0; i < v83; i++ {
			this.xxx_LenField1 += 1
			this.field1[i] = (r.Float64())
			if r.Intn(2) == 0 {
				this.field1[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v84 := r.Intn(100)
		this.field2 = make([]float32, v84)
		for i := 0; i < v84; i++ {
			this.xxx_LenField2 += 1
			this.field2[i] = (r.Float32())
			if r.Intn(2) == 0 {
				this.field2[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v85 := r.Intn(10)
		this.field3 = make([]*NidOptNative, v85)
		for i := 0; i < v85; i++ {
			v86 := NewPopulatedNidOptNative(r, easy)
			this.xxx_LenField3 += 1
			this.field3[i] = v86
		}
	}
	if r.Intn(10) != 0 {
		v87 := r.Intn(10)
		this.field4 = make([]*NinOptNative, v87)
		for i := 0; i < v87; i++ {
			v88 := NewPopulatedNinOptNative(r, easy)
			this.xxx_LenField4 += 1
			this.field4[i] = v88
		}
	}
	if r.Intn(10) != 0 {
		v89 := r.Intn(100)
		this.field6 = make([]uint64, v89)
		for i := 0; i < v89; i++ {
			this.xxx_LenField6 += 1
			this.field6[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v90 := r.Intn(100)
		this.field7 = make([]int32, v90)
		for i := 0; i < v90; i++ {
			this.xxx_LenField7 += 1
			this.field7[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.field7[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v91 := r.Intn(10)
		this.field8 = make([]*NidOptNative, v91)
		for i := 0; i < v91; i++ {
			v92 := NewPopulatedNidOptNative(r, easy)
			this.xxx_LenField8 += 1
			this.field8[i] = v92
		}
	}
	if r.Intn(10) != 0 {
		v93 := r.Intn(100)
		this.field13 = make([]bool, v93)
		for i := 0; i < v93; i++ {
			this.xxx_LenField13 += 1
			this.field13[i] = (bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v94 := r.Intn(10)
		this.field14 = make([]string, v94)
		for i := 0; i < v94; i++ {
			this.xxx_LenField14 += 1
			this.field14[i] = randStringThetest(r)
		}
	}
	if r.Intn(10) != 0 {
		v95 := r.Intn(100)
		this.field15 = make([][]byte, v95)
		for i := 0; i < v95; i++ {
			v96 := r.Intn(100)
			this.xxx_LenField15 += 1
			this.field15[i] = make([]byte, v96)
			for j := 0; j < v96; j++ {
				this.field15[i][j] = byte(r.Intn(256))
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedNidEmbeddedStruct(r randyThetest, easy bool) *NidEmbeddedStruct {
	this := &NidEmbeddedStruct{}
	v97 := NewPopulatedNidOptNative(r, easy)
	this.xxx_IsNidOptNativeSet = true
	this.NidOptNative = v97
	v98 := NewPopulatedNidOptNative(r, easy)
	this.xxx_IsField200Set = true
	this.field200 = v98
	this.xxx_IsField210Set = true
	this.field210 = (bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 211)
	}
	return this
}

func NewPopulatedNinEmbeddedStruct(r randyThetest, easy bool) *NinEmbeddedStruct {
	this := &NinEmbeddedStruct{}
	v99 := NewPopulatedNidOptNative(r, easy)
	this.xxx_IsNidOptNativeSet = true
	this.NidOptNative = v99
	v100 := NewPopulatedNidOptNative(r, easy)
	this.xxx_IsField200Set = true
	this.field200 = v100
	this.xxx_IsField210Set = true
	this.field210 = (bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 211)
	}
	return this
}

func NewPopulatedNidNestedStruct(r randyThetest, easy bool) *NidNestedStruct {
	this := &NidNestedStruct{}
	v101 := NewPopulatedNidOptStruct(r, easy)
	this.xxx_IsField1Set = true
	this.field1 = v101
	if r.Intn(10) != 0 {
		v102 := r.Intn(10)
		this.field2 = make([]*NidRepStruct, v102)
		for i := 0; i < v102; i++ {
			v103 := NewPopulatedNidRepStruct(r, easy)
			this.xxx_LenField2 += 1
			this.field2[i] = v103
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedNinNestedStruct(r randyThetest, easy bool) *NinNestedStruct {
	this := &NinNestedStruct{}
	v104 := NewPopulatedNinOptStruct(r, easy)
	this.xxx_IsField1Set = true
	this.field1 = v104
	if r.Intn(10) != 0 {
		v105 := r.Intn(10)
		this.field2 = make([]*NinRepStruct, v105)
		for i := 0; i < v105; i++ {
			v106 := NewPopulatedNinRepStruct(r, easy)
			this.xxx_LenField2 += 1
			this.field2[i] = v106
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedNidOptCustom(r randyThetest, easy bool) *NidOptCustom {
	this := &NidOptCustom{}
	this.xxx_IsIdSet = true
	this.id = Id(r.Int63())
	if r.Intn(2) == 0 {
		this.id *= Id(-1)
	}
	this.xxx_IsValueSet = true
	this.value = Weight(r.Float64())
	if r.Intn(2) == 0 {
		this.value *= Weight(-1)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedNinOptCustom(r randyThetest, easy bool) *NinOptCustom {
	this := &NinOptCustom{}
	this.xxx_IsIdSet = true
	this.id = Id(r.Int63())
	if r.Intn(2) == 0 {
		this.id *= Id(-1)
	}
	this.xxx_IsValueSet = true
	this.value = Weight(r.Float64())
	if r.Intn(2) == 0 {
		this.value *= Weight(-1)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedNidRepCustom(r randyThetest, easy bool) *NidRepCustom {
	this := &NidRepCustom{}
	if r.Intn(10) != 0 {
		v107 := r.Intn(100)
		this.id = make([]Id, v107)
		for i := 0; i < v107; i++ {
			this.xxx_LenId += 1
			this.id[i] = Id(r.Int63())
			if r.Intn(2) == 0 {
				this.id[i] *= Id(-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v108 := r.Intn(100)
		this.value = make([]Weight, v108)
		for i := 0; i < v108; i++ {
			this.xxx_LenValue += 1
			this.value[i] = Weight(r.Float64())
			if r.Intn(2) == 0 {
				this.value[i] *= Weight(-1)
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedNinRepCustom(r randyThetest, easy bool) *NinRepCustom {
	this := &NinRepCustom{}
	if r.Intn(10) != 0 {
		v109 := r.Intn(100)
		this.id = make([]Id, v109)
		for i := 0; i < v109; i++ {
			this.xxx_LenId += 1
			this.id[i] = Id(r.Int63())
			if r.Intn(2) == 0 {
				this.id[i] *= Id(-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v110 := r.Intn(100)
		this.value = make([]Weight, v110)
		for i := 0; i < v110; i++ {
			this.xxx_LenValue += 1
			this.value[i] = Weight(r.Float64())
			if r.Intn(2) == 0 {
				this.value[i] *= Weight(-1)
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedNinOptNativeUnion(r randyThetest, easy bool) *NinOptNativeUnion {
	this := &NinOptNativeUnion{}
	fieldNum := r.Intn(9)
	switch fieldNum {
	case 0:
		this.xxx_IsField1Set = true
		this.field1 = (r.Float64())
		if r.Intn(2) == 0 {
			this.field1 *= (-1)
		}
	case 1:
		this.xxx_IsField2Set = true
		this.field2 = (r.Float32())
		if r.Intn(2) == 0 {
			this.field2 *= (-1)
		}
	case 2:
		this.xxx_IsField3Set = true
		this.field3 = (r.Int31())
		if r.Intn(2) == 0 {
			this.field3 *= (-1)
		}
	case 3:
		this.xxx_IsField4Set = true
		this.field4 = (r.Int63())
		if r.Intn(2) == 0 {
			this.field4 *= (-1)
		}
	case 4:
		this.xxx_IsField5Set = true
		this.field5 = (r.Uint32())
	case 5:
		this.xxx_IsField6Set = true
		this.field6 = (uint64(r.Uint32()))
	case 6:
		this.xxx_IsField13Set = true
		this.field13 = (bool(r.Intn(2) == 0))
	case 7:
		this.xxx_IsField14Set = true
		this.field14 = randStringThetest(r)
	case 8:
		v111 := r.Intn(100)
		this.field15 = make([]byte, v111)
		for i := 0; i < v111; i++ {
			this.xxx_IsField15Set = true
			this.field15[i] = byte(r.Intn(256))
		}
	}
	return this
}

func NewPopulatedNinOptStructUnion(r randyThetest, easy bool) *NinOptStructUnion {
	this := &NinOptStructUnion{}
	fieldNum := r.Intn(9)
	switch fieldNum {
	case 0:
		this.xxx_IsField1Set = true
		this.field1 = (r.Float64())
		if r.Intn(2) == 0 {
			this.field1 *= (-1)
		}
	case 1:
		this.xxx_IsField2Set = true
		this.field2 = (r.Float32())
		if r.Intn(2) == 0 {
			this.field2 *= (-1)
		}
	case 2:
		v112 := NewPopulatedNidOptNative(r, easy)
		this.xxx_IsField3Set = true
		this.field3 = v112
	case 3:
		v113 := NewPopulatedNinOptNative(r, easy)
		this.xxx_IsField4Set = true
		this.field4 = v113
	case 4:
		this.xxx_IsField6Set = true
		this.field6 = (uint64(r.Uint32()))
	case 5:
		this.xxx_IsField7Set = true
		this.field7 = (r.Int31())
		if r.Intn(2) == 0 {
			this.field7 *= (-1)
		}
	case 6:
		this.xxx_IsField13Set = true
		this.field13 = (bool(r.Intn(2) == 0))
	case 7:
		this.xxx_IsField14Set = true
		this.field14 = randStringThetest(r)
	case 8:
		v114 := r.Intn(100)
		this.field15 = make([]byte, v114)
		for i := 0; i < v114; i++ {
			this.xxx_IsField15Set = true
			this.field15[i] = byte(r.Intn(256))
		}
	}
	return this
}

func NewPopulatedNinEmbeddedStructUnion(r randyThetest, easy bool) *NinEmbeddedStructUnion {
	this := &NinEmbeddedStructUnion{}
	fieldNum := r.Intn(3)
	switch fieldNum {
	case 0:
		v115 := NewPopulatedNidOptNative(r, easy)
		this.xxx_IsNidOptNativeSet = true
		this.NidOptNative = v115
	case 1:
		v116 := NewPopulatedNinOptNative(r, easy)
		this.xxx_IsField200Set = true
		this.field200 = v116
	case 2:
		this.xxx_IsField210Set = true
		this.field210 = (bool(r.Intn(2) == 0))
	}
	return this
}

func NewPopulatedNinNestedStructUnion(r randyThetest, easy bool) *NinNestedStructUnion {
	this := &NinNestedStructUnion{}
	fieldNum := r.Intn(3)
	switch fieldNum {
	case 0:
		v117 := NewPopulatedNinOptNativeUnion(r, easy)
		this.xxx_IsField1Set = true
		this.field1 = v117
	case 1:
		v118 := NewPopulatedNinOptStructUnion(r, easy)
		this.xxx_IsField2Set = true
		this.field2 = v118
	case 2:
		v119 := NewPopulatedNinEmbeddedStructUnion(r, easy)
		this.xxx_IsField3Set = true
		this.field3 = v119
	}
	return this
}

func NewPopulatedTree(r randyThetest, easy bool) *Tree {
	this := &Tree{}
	fieldNum := r.Intn(102)
	switch fieldNum {
	case 0:
		v120 := NewPopulatedOrBranch(r, easy)
		this.xxx_IsOrSet = true
		this.or = v120
	case 1:
		v121 := NewPopulatedAndBranch(r, easy)
		this.xxx_IsAndSet = true
		this.and = v121
	case 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101:
		v122 := NewPopulatedLeaf(r, easy)
		this.xxx_IsLeafSet = true
		this.leaf = v122
	}
	return this
}

func NewPopulatedOrBranch(r randyThetest, easy bool) *OrBranch {
	this := &OrBranch{}
	v123 := NewPopulatedTree(r, easy)
	this.xxx_IsLeftSet = true
	this.left = v123
	v124 := NewPopulatedTree(r, easy)
	this.xxx_IsRightSet = true
	this.right = v124
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedAndBranch(r randyThetest, easy bool) *AndBranch {
	this := &AndBranch{}
	v125 := NewPopulatedTree(r, easy)
	this.xxx_IsLeftSet = true
	this.left = v125
	v126 := NewPopulatedTree(r, easy)
	this.xxx_IsRightSet = true
	this.right = v126
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedLeaf(r randyThetest, easy bool) *Leaf {
	this := &Leaf{}
	this.xxx_IsValueSet = true
	this.value = (r.Int63())
	if r.Intn(2) == 0 {
		this.value *= (-1)
	}
	this.xxx_IsStrValueSet = true
	this.strValue = randStringThetest(r)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedDeepTree(r randyThetest, easy bool) *DeepTree {
	this := &DeepTree{}
	fieldNum := r.Intn(102)
	switch fieldNum {
	case 0:
		v127 := NewPopulatedADeepBranch(r, easy)
		this.xxx_IsDownSet = true
		this.down = v127
	case 1:
		v128 := NewPopulatedAndDeepBranch(r, easy)
		this.xxx_IsAndSet = true
		this.and = v128
	case 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101:
		v129 := NewPopulatedDeepLeaf(r, easy)
		this.xxx_IsLeafSet = true
		this.leaf = v129
	}
	return this
}

func NewPopulatedADeepBranch(r randyThetest, easy bool) *ADeepBranch {
	this := &ADeepBranch{}
	v130 := NewPopulatedDeepTree(r, easy)
	this.xxx_IsDownSet = true
	this.down = v130
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedAndDeepBranch(r randyThetest, easy bool) *AndDeepBranch {
	this := &AndDeepBranch{}
	v131 := NewPopulatedDeepTree(r, easy)
	this.xxx_IsLeftSet = true
	this.left = v131
	v132 := NewPopulatedDeepTree(r, easy)
	this.xxx_IsRightSet = true
	this.right = v132
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedDeepLeaf(r randyThetest, easy bool) *DeepLeaf {
	this := &DeepLeaf{}
	v133 := NewPopulatedTree(r, easy)
	this.xxx_IsTreeSet = true
	this.tree = v133
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 2)
	}
	return this
}

func NewPopulatedNil(r randyThetest, easy bool) *Nil {
	this := &Nil{}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 1)
	}
	return this
}

func NewPopulatedNidOptEnum(r randyThetest, easy bool) *NidOptEnum {
	this := &NidOptEnum{}
	this.xxx_IsField1Set = true
	this.field1 = TheTestEnum([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 2)
	}
	return this
}

func NewPopulatedNinOptEnum(r randyThetest, easy bool) *NinOptEnum {
	this := &NinOptEnum{}
	this.xxx_IsField1Set = true
	this.field1 = TheTestEnum([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 2)
	}
	return this
}

func NewPopulatedNidRepEnum(r randyThetest, easy bool) *NidRepEnum {
	this := &NidRepEnum{}
	if r.Intn(10) != 0 {
		v134 := r.Intn(10)
		this.field1 = make([]TheTestEnum, v134)
		for i := 0; i < v134; i++ {
			this.xxx_LenField1 += 1
			this.field1[i] = TheTestEnum([]int32{0, 1, 2}[r.Intn(3)])
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 2)
	}
	return this
}

func NewPopulatedNinRepEnum(r randyThetest, easy bool) *NinRepEnum {
	this := &NinRepEnum{}
	if r.Intn(10) != 0 {
		v135 := r.Intn(10)
		this.field1 = make([]TheTestEnum, v135)
		for i := 0; i < v135; i++ {
			this.xxx_LenField1 += 1
			this.field1[i] = TheTestEnum([]int32{0, 1, 2}[r.Intn(3)])
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 2)
	}
	return this
}

func NewPopulatedNinOptEnumDefault(r randyThetest, easy bool) *NinOptEnumDefault {
	this := &NinOptEnumDefault{}
	this.xxx_IsField1Set = true
	this.field1 = TheTestEnum([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 2)
	}
	return this
}

func NewPopulatedAnotherNinOptEnum(r randyThetest, easy bool) *AnotherNinOptEnum {
	this := &AnotherNinOptEnum{}
	this.xxx_IsField1Set = true
	this.field1 = AnotherTestEnum([]int32{10, 11}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 2)
	}
	return this
}

func NewPopulatedAnotherNinOptEnumDefault(r randyThetest, easy bool) *AnotherNinOptEnumDefault {
	this := &AnotherNinOptEnumDefault{}
	this.xxx_IsField1Set = true
	this.field1 = AnotherTestEnum([]int32{10, 11}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 2)
	}
	return this
}

func NewPopulatedTimer(r randyThetest, easy bool) *Timer {
	this := &Timer{}
	this.xxx_IsTime1Set = true
	this.time1 = (r.Int63())
	if r.Intn(2) == 0 {
		this.time1 *= (-1)
	}
	this.xxx_IsTime2Set = true
	this.time2 = (r.Int63())
	if r.Intn(2) == 0 {
		this.time2 *= (-1)
	}
	v136 := r.Intn(100)
	this.data = make([]byte, v136)
	for i := 0; i < v136; i++ {
		this.xxx_IsDataSet = true
		this.data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 4)
	}
	return this
}

func NewPopulatedMyExtendable(r randyThetest, easy bool) *MyExtendable {
	this := &MyExtendable{}
	this.xxx_IsField1Set = true
	this.field1 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field1 *= (-1)
	}
	if !easy && r.Intn(10) != 0 {
		l := r.Intn(5)
		for i := 0; i < l; i++ {
			fieldNumber := r.Intn(100) + 100
			wire := r.Intn(4)
			if wire == 3 {
				wire = 5
			}
			data := randFieldThetest(nil, r, fieldNumber, wire)
			github_com_dropbox_goprotoc_proto.SetRawExtension(this, int32(fieldNumber), data)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 201)
	}
	return this
}

func NewPopulatedOtherExtenable(r randyThetest, easy bool) *OtherExtenable {
	this := &OtherExtenable{}
	this.xxx_IsField2Set = true
	this.field2 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field2 *= (-1)
	}
	this.xxx_IsField13Set = true
	this.field13 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field13 *= (-1)
	}
	v137 := NewPopulatedMyExtendable(r, easy)
	this.xxx_IsMSet = true
	this.m = v137
	if !easy && r.Intn(10) != 0 {
		l := r.Intn(5)
		for i := 0; i < l; i++ {
			eIndex := r.Intn(2)
			fieldNumber := 0
			switch eIndex {
			case 0:
				fieldNumber = r.Intn(3) + 14
			case 1:
				fieldNumber = r.Intn(3) + 10
			}
			wire := r.Intn(4)
			if wire == 3 {
				wire = 5
			}
			data := randFieldThetest(nil, r, fieldNumber, wire)
			github_com_dropbox_goprotoc_proto.SetRawExtension(this, int32(fieldNumber), data)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 18)
	}
	return this
}

func NewPopulatedNestedDefinition(r randyThetest, easy bool) *NestedDefinition {
	this := &NestedDefinition{}
	this.xxx_IsField1Set = true
	this.field1 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field1 *= (-1)
	}
	this.xxx_IsEnumFieldSet = true
	this.enumField = NestedDefinition_NestedEnum([]int32{1}[r.Intn(1)])
	v138 := NewPopulatedNestedDefinition_NestedMessage_NestedNestedMsg(r, easy)
	this.xxx_IsNNMSet = true
	this.nNM = v138
	v139 := NewPopulatedNestedDefinition_NestedMessage(r, easy)
	this.xxx_IsNMSet = true
	this.nM = v139
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 5)
	}
	return this
}

func NewPopulatedNestedDefinition_NestedMessage(r randyThetest, easy bool) *NestedDefinition_NestedMessage {
	this := &NestedDefinition_NestedMessage{}
	this.xxx_IsNestedField1Set = true
	this.nestedField1 = (uint64(r.Uint32()))
	v140 := NewPopulatedNestedDefinition_NestedMessage_NestedNestedMsg(r, easy)
	this.xxx_IsNNMSet = true
	this.nNM = v140
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedNestedDefinition_NestedMessage_NestedNestedMsg(r randyThetest, easy bool) *NestedDefinition_NestedMessage_NestedNestedMsg {
	this := &NestedDefinition_NestedMessage_NestedNestedMsg{}
	this.xxx_IsNestedNestedField1Set = true
	this.nestedNestedField1 = randStringThetest(r)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 11)
	}
	return this
}

func NewPopulatedNestedScope(r randyThetest, easy bool) *NestedScope {
	this := &NestedScope{}
	v141 := NewPopulatedNestedDefinition_NestedMessage_NestedNestedMsg(r, easy)
	this.xxx_IsASet = true
	this.a = v141
	this.xxx_IsBSet = true
	this.b = NestedDefinition_NestedEnum([]int32{1}[r.Intn(1)])
	v142 := NewPopulatedNestedDefinition_NestedMessage(r, easy)
	this.xxx_IsCSet = true
	this.c = v142
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 4)
	}
	return this
}

func NewPopulatedNinOptNativeDefault(r randyThetest, easy bool) *NinOptNativeDefault {
	this := &NinOptNativeDefault{}
	this.xxx_IsField1Set = true
	this.field1 = (r.Float64())
	if r.Intn(2) == 0 {
		this.field1 *= (-1)
	}
	this.xxx_IsField2Set = true
	this.field2 = (r.Float32())
	if r.Intn(2) == 0 {
		this.field2 *= (-1)
	}
	this.xxx_IsField3Set = true
	this.field3 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field3 *= (-1)
	}
	this.xxx_IsField4Set = true
	this.field4 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field4 *= (-1)
	}
	this.xxx_IsField5Set = true
	this.field5 = (r.Uint32())
	this.xxx_IsField6Set = true
	this.field6 = (uint64(r.Uint32()))
	this.xxx_IsField7Set = true
	this.field7 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field7 *= (-1)
	}
	this.xxx_IsField8Set = true
	this.field8 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field8 *= (-1)
	}
	this.xxx_IsField9Set = true
	this.field9 = (r.Uint32())
	this.xxx_IsField10Set = true
	this.field10 = (r.Int31())
	if r.Intn(2) == 0 {
		this.field10 *= (-1)
	}
	this.xxx_IsField11Set = true
	this.field11 = (uint64(r.Uint32()))
	this.xxx_IsField12Set = true
	this.field12 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field12 *= (-1)
	}
	this.xxx_IsField13Set = true
	this.field13 = (bool(r.Intn(2) == 0))
	this.xxx_IsField14Set = true
	this.field14 = randStringThetest(r)
	v143 := r.Intn(100)
	this.field15 = make([]byte, v143)
	for i := 0; i < v143; i++ {
		this.xxx_IsField15Set = true
		this.field15[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedCustomContainer(r randyThetest, easy bool) *CustomContainer {
	this := &CustomContainer{}
	v144 := NewPopulatedNidOptCustom(r, easy)
	this.xxx_IsCustomStructSet = true
	this.customStruct = v144
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 2)
	}
	return this
}

func NewPopulatedCustomNameNidOptNative(r randyThetest, easy bool) *CustomNameNidOptNative {
	this := &CustomNameNidOptNative{}
	this.xxx_IsFieldASet = true
	this.fieldA = (r.Float64())
	if r.Intn(2) == 0 {
		this.fieldA *= (-1)
	}
	this.xxx_IsFieldBSet = true
	this.fieldB = (r.Float32())
	if r.Intn(2) == 0 {
		this.fieldB *= (-1)
	}
	this.xxx_IsFieldCSet = true
	this.fieldC = (r.Int31())
	if r.Intn(2) == 0 {
		this.fieldC *= (-1)
	}
	this.xxx_IsFieldDSet = true
	this.fieldD = (r.Int63())
	if r.Intn(2) == 0 {
		this.fieldD *= (-1)
	}
	this.xxx_IsFieldESet = true
	this.fieldE = (r.Uint32())
	this.xxx_IsFieldFSet = true
	this.fieldF = (uint64(r.Uint32()))
	this.xxx_IsFieldGSet = true
	this.fieldG = (r.Int31())
	if r.Intn(2) == 0 {
		this.fieldG *= (-1)
	}
	this.xxx_IsFieldHSet = true
	this.fieldH = (r.Int63())
	if r.Intn(2) == 0 {
		this.fieldH *= (-1)
	}
	this.xxx_IsFieldISet = true
	this.fieldI = (r.Uint32())
	this.xxx_IsFieldJSet = true
	this.fieldJ = (r.Int31())
	if r.Intn(2) == 0 {
		this.fieldJ *= (-1)
	}
	this.xxx_IsFieldKSet = true
	this.fieldK = (uint64(r.Uint32()))
	this.xxx_IsFieldLSet = true
	this.fieldL = (r.Int63())
	if r.Intn(2) == 0 {
		this.fieldL *= (-1)
	}
	this.xxx_IsFieldMSet = true
	this.fieldM = (bool(r.Intn(2) == 0))
	this.xxx_IsFieldNSet = true
	this.fieldN = randStringThetest(r)
	v145 := r.Intn(100)
	this.fieldO = make([]byte, v145)
	for i := 0; i < v145; i++ {
		this.xxx_IsFieldOSet = true
		this.fieldO[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedCustomNameNinOptNative(r randyThetest, easy bool) *CustomNameNinOptNative {
	this := &CustomNameNinOptNative{}
	this.xxx_IsFieldASet = true
	this.fieldA = (r.Float64())
	if r.Intn(2) == 0 {
		this.fieldA *= (-1)
	}
	this.xxx_IsFieldBSet = true
	this.fieldB = (r.Float32())
	if r.Intn(2) == 0 {
		this.fieldB *= (-1)
	}
	this.xxx_IsFieldCSet = true
	this.fieldC = (r.Int31())
	if r.Intn(2) == 0 {
		this.fieldC *= (-1)
	}
	this.xxx_IsFieldDSet = true
	this.fieldD = (r.Int63())
	if r.Intn(2) == 0 {
		this.fieldD *= (-1)
	}
	this.xxx_IsFieldESet = true
	this.fieldE = (r.Uint32())
	this.xxx_IsFieldFSet = true
	this.fieldF = (uint64(r.Uint32()))
	this.xxx_IsFieldGSet = true
	this.fieldG = (r.Int31())
	if r.Intn(2) == 0 {
		this.fieldG *= (-1)
	}
	this.xxx_IsFieldHSet = true
	this.fieldH = (r.Int63())
	if r.Intn(2) == 0 {
		this.fieldH *= (-1)
	}
	this.xxx_IsFieldISet = true
	this.fieldI = (r.Uint32())
	this.xxx_IsFieldJSet = true
	this.fieldJ = (r.Int31())
	if r.Intn(2) == 0 {
		this.fieldJ *= (-1)
	}
	this.xxx_IsFieldKSet = true
	this.fieldK = (uint64(r.Uint32()))
	this.xxx_IsFielLSet = true
	this.fielL = (r.Int63())
	if r.Intn(2) == 0 {
		this.fielL *= (-1)
	}
	this.xxx_IsFieldMSet = true
	this.fieldM = (bool(r.Intn(2) == 0))
	this.xxx_IsFieldNSet = true
	this.fieldN = randStringThetest(r)
	v146 := r.Intn(100)
	this.fieldO = make([]byte, v146)
	for i := 0; i < v146; i++ {
		this.xxx_IsFieldOSet = true
		this.fieldO[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedCustomNameNinRepNative(r randyThetest, easy bool) *CustomNameNinRepNative {
	this := &CustomNameNinRepNative{}
	if r.Intn(10) != 0 {
		v147 := r.Intn(100)
		this.fieldA = make([]float64, v147)
		for i := 0; i < v147; i++ {
			this.xxx_LenFieldA += 1
			this.fieldA[i] = (r.Float64())
			if r.Intn(2) == 0 {
				this.fieldA[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v148 := r.Intn(100)
		this.fieldB = make([]float32, v148)
		for i := 0; i < v148; i++ {
			this.xxx_LenFieldB += 1
			this.fieldB[i] = (r.Float32())
			if r.Intn(2) == 0 {
				this.fieldB[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v149 := r.Intn(100)
		this.fieldC = make([]int32, v149)
		for i := 0; i < v149; i++ {
			this.xxx_LenFieldC += 1
			this.fieldC[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.fieldC[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v150 := r.Intn(100)
		this.fieldD = make([]int64, v150)
		for i := 0; i < v150; i++ {
			this.xxx_LenFieldD += 1
			this.fieldD[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.fieldD[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v151 := r.Intn(100)
		this.fieldE = make([]uint32, v151)
		for i := 0; i < v151; i++ {
			this.xxx_LenFieldE += 1
			this.fieldE[i] = (r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v152 := r.Intn(100)
		this.fieldF = make([]uint64, v152)
		for i := 0; i < v152; i++ {
			this.xxx_LenFieldF += 1
			this.fieldF[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v153 := r.Intn(100)
		this.fieldG = make([]int32, v153)
		for i := 0; i < v153; i++ {
			this.xxx_LenFieldG += 1
			this.fieldG[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.fieldG[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v154 := r.Intn(100)
		this.fieldH = make([]int64, v154)
		for i := 0; i < v154; i++ {
			this.xxx_LenFieldH += 1
			this.fieldH[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.fieldH[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v155 := r.Intn(100)
		this.fieldI = make([]uint32, v155)
		for i := 0; i < v155; i++ {
			this.xxx_LenFieldI += 1
			this.fieldI[i] = (r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v156 := r.Intn(100)
		this.fieldJ = make([]int32, v156)
		for i := 0; i < v156; i++ {
			this.xxx_LenFieldJ += 1
			this.fieldJ[i] = (r.Int31())
			if r.Intn(2) == 0 {
				this.fieldJ[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v157 := r.Intn(100)
		this.fieldK = make([]uint64, v157)
		for i := 0; i < v157; i++ {
			this.xxx_LenFieldK += 1
			this.fieldK[i] = (uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v158 := r.Intn(100)
		this.fieldL = make([]int64, v158)
		for i := 0; i < v158; i++ {
			this.xxx_LenFieldL += 1
			this.fieldL[i] = (r.Int63())
			if r.Intn(2) == 0 {
				this.fieldL[i] *= (-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v159 := r.Intn(100)
		this.fieldM = make([]bool, v159)
		for i := 0; i < v159; i++ {
			this.xxx_LenFieldM += 1
			this.fieldM[i] = (bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v160 := r.Intn(10)
		this.fieldN = make([]string, v160)
		for i := 0; i < v160; i++ {
			this.xxx_LenFieldN += 1
			this.fieldN[i] = randStringThetest(r)
		}
	}
	if r.Intn(10) != 0 {
		v161 := r.Intn(100)
		this.fieldO = make([][]byte, v161)
		for i := 0; i < v161; i++ {
			v162 := r.Intn(100)
			this.xxx_LenFieldO += 1
			this.fieldO[i] = make([]byte, v162)
			for j := 0; j < v162; j++ {
				this.fieldO[i][j] = byte(r.Intn(256))
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedCustomNameNinStruct(r randyThetest, easy bool) *CustomNameNinStruct {
	this := &CustomNameNinStruct{}
	this.xxx_IsFieldASet = true
	this.fieldA = (r.Float64())
	if r.Intn(2) == 0 {
		this.fieldA *= (-1)
	}
	this.xxx_IsFieldBSet = true
	this.fieldB = (r.Float32())
	if r.Intn(2) == 0 {
		this.fieldB *= (-1)
	}
	v163 := NewPopulatedNidOptNative(r, easy)
	this.xxx_IsFieldCSet = true
	this.fieldC = v163
	if r.Intn(10) != 0 {
		v164 := r.Intn(10)
		this.fieldD = make([]*NinOptNative, v164)
		for i := 0; i < v164; i++ {
			v165 := NewPopulatedNinOptNative(r, easy)
			this.xxx_LenFieldD += 1
			this.fieldD[i] = v165
		}
	}
	this.xxx_IsFieldESet = true
	this.fieldE = (uint64(r.Uint32()))
	this.xxx_IsFieldFSet = true
	this.fieldF = (r.Int31())
	if r.Intn(2) == 0 {
		this.fieldF *= (-1)
	}
	v166 := NewPopulatedNidOptNative(r, easy)
	this.xxx_IsFieldGSet = true
	this.fieldG = v166
	this.xxx_IsFieldHSet = true
	this.fieldH = (bool(r.Intn(2) == 0))
	this.xxx_IsFieldISet = true
	this.fieldI = randStringThetest(r)
	v167 := r.Intn(100)
	this.fieldJ = make([]byte, v167)
	for i := 0; i < v167; i++ {
		this.xxx_IsFieldJSet = true
		this.fieldJ[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 16)
	}
	return this
}

func NewPopulatedCustomNameCustomType(r randyThetest, easy bool) *CustomNameCustomType {
	this := &CustomNameCustomType{}
	this.xxx_IsFieldASet = true
	this.fieldA = Id(r.Int63())
	if r.Intn(2) == 0 {
		this.fieldA *= Id(-1)
	}
	this.xxx_IsFieldBSet = true
	this.fieldB = Weight(r.Float64())
	if r.Intn(2) == 0 {
		this.fieldB *= Weight(-1)
	}
	if r.Intn(10) != 0 {
		v168 := r.Intn(100)
		this.fieldC = make([]Id, v168)
		for i := 0; i < v168; i++ {
			this.xxx_LenFieldC += 1
			this.fieldC[i] = Id(r.Int63())
			if r.Intn(2) == 0 {
				this.fieldC[i] *= Id(-1)
			}
		}
	}
	if r.Intn(10) != 0 {
		v169 := r.Intn(100)
		this.fieldD = make([]Weight, v169)
		for i := 0; i < v169; i++ {
			this.xxx_LenFieldD += 1
			this.fieldD[i] = Weight(r.Float64())
			if r.Intn(2) == 0 {
				this.fieldD[i] *= Weight(-1)
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 5)
	}
	return this
}

func NewPopulatedCustomNameNinEmbeddedStructUnion(r randyThetest, easy bool) *CustomNameNinEmbeddedStructUnion {
	this := &CustomNameNinEmbeddedStructUnion{}
	fieldNum := r.Intn(3)
	switch fieldNum {
	case 0:
		v170 := NewPopulatedNidOptNative(r, easy)
		this.xxx_IsNidOptNativeSet = true
		this.NidOptNative = v170
	case 1:
		v171 := NewPopulatedNinOptNative(r, easy)
		this.xxx_IsFieldASet = true
		this.fieldA = v171
	case 2:
		this.xxx_IsFieldBSet = true
		this.fieldB = (bool(r.Intn(2) == 0))
	}
	return this
}

func NewPopulatedCustomNameEnum(r randyThetest, easy bool) *CustomNameEnum {
	this := &CustomNameEnum{}
	this.xxx_IsFieldASet = true
	this.fieldA = TheTestEnum([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		v172 := r.Intn(10)
		this.fieldB = make([]TheTestEnum, v172)
		for i := 0; i < v172; i++ {
			this.xxx_LenFieldB += 1
			this.fieldB[i] = TheTestEnum([]int32{0, 1, 2}[r.Intn(3)])
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 3)
	}
	return this
}

func NewPopulatedNoExtensionsMap(r randyThetest, easy bool) *NoExtensionsMap {
	this := &NoExtensionsMap{}
	this.xxx_IsField1Set = true
	this.field1 = (r.Int63())
	if r.Intn(2) == 0 {
		this.field1 *= (-1)
	}
	if !easy && r.Intn(10) != 0 {
		l := r.Intn(5)
		for i := 0; i < l; i++ {
			fieldNumber := r.Intn(100) + 100
			wire := r.Intn(4)
			if wire == 3 {
				wire = 5
			}
			data := randFieldThetest(nil, r, fieldNumber, wire)
			github_com_dropbox_goprotoc_proto.SetRawExtension(this, int32(fieldNumber), data)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedThetest(r, 201)
	}
	return this
}

type randyThetest interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneThetest(r randyThetest) rune {
	res := rune(r.Uint32() % 1112064)
	if 55296 <= res {
		res += 2047
	}
	return res
}
func randStringThetest(r randyThetest) string {
	v173 := r.Intn(100)
	tmps := make([]rune, v173)
	for i := 0; i < v173; i++ {
		tmps[i] = randUTF8RuneThetest(r)
	}
	return string(tmps)
}
func randUnrecognizedThetest(r randyThetest, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldThetest(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldThetest(data []byte, r randyThetest, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateThetest(data, uint64(key))
		v174 := r.Int63()
		if r.Intn(2) == 0 {
			v174 *= -1
		}
		data = encodeVarintPopulateThetest(data, uint64(v174))
	case 1:
		data = encodeVarintPopulateThetest(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateThetest(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateThetest(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateThetest(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateThetest(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}

type NidOptNativeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() float64
	Getfield2() float32
	Getfield3() int32
	Getfield4() int64
	Getfield5() uint32
	Getfield6() uint64
	Getfield7() int32
	Getfield8() int64
	Getfield9() uint32
	Getfield10() int32
	Getfield11() uint64
	Getfield12() int64
	Getfield13() bool
	Getfield14() string
	Getfield15() []byte
}
type NinOptNativeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() float64
	Getfield2() float32
	Getfield3() int32
	Getfield4() int64
	Getfield5() uint32
	Getfield6() uint64
	Getfield7() int32
	Getfield8() int64
	Getfield9() uint32
	Getfield10() int32
	Getfield11() uint64
	Getfield12() int64
	Getfield13() bool
	Getfield14() string
	Getfield15() []byte
}
type NidRepNativeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() []float64
	Getfield2() []float32
	Getfield3() []int32
	Getfield4() []int64
	Getfield5() []uint32
	Getfield6() []uint64
	Getfield7() []int32
	Getfield8() []int64
	Getfield9() []uint32
	Getfield10() []int32
	Getfield11() []uint64
	Getfield12() []int64
	Getfield13() []bool
	Getfield14() []string
	Getfield15() [][]byte
}
type NinRepNativeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() []float64
	Getfield2() []float32
	Getfield3() []int32
	Getfield4() []int64
	Getfield5() []uint32
	Getfield6() []uint64
	Getfield7() []int32
	Getfield8() []int64
	Getfield9() []uint32
	Getfield10() []int32
	Getfield11() []uint64
	Getfield12() []int64
	Getfield13() []bool
	Getfield14() []string
	Getfield15() [][]byte
}
type NidRepPackedNativeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() []float64
	Getfield2() []float32
	Getfield3() []int32
	Getfield4() []int64
	Getfield5() []uint32
	Getfield6() []uint64
	Getfield7() []int32
	Getfield8() []int64
	Getfield9() []uint32
	Getfield10() []int32
	Getfield11() []uint64
	Getfield12() []int64
	Getfield13() []bool
}
type NinRepPackedNativeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() []float64
	Getfield2() []float32
	Getfield3() []int32
	Getfield4() []int64
	Getfield5() []uint32
	Getfield6() []uint64
	Getfield7() []int32
	Getfield8() []int64
	Getfield9() []uint32
	Getfield10() []int32
	Getfield11() []uint64
	Getfield12() []int64
	Getfield13() []bool
}
type NidOptStructFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() float64
	Getfield2() float32
	Getfield3() *NidOptNative
	Getfield4() *NinOptNative
	Getfield6() uint64
	Getfield7() int32
	Getfield8() *NidOptNative
	Getfield13() bool
	Getfield14() string
	Getfield15() []byte
}
type NinOptStructFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() float64
	Getfield2() float32
	Getfield3() *NidOptNative
	Getfield4() *NinOptNative
	Getfield6() uint64
	Getfield7() int32
	Getfield8() *NidOptNative
	Getfield13() bool
	Getfield14() string
	Getfield15() []byte
}
type NidRepStructFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() []float64
	Getfield2() []float32
	Getfield3() []*NidOptNative
	Getfield4() []*NinOptNative
	Getfield6() []uint64
	Getfield7() []int32
	Getfield8() []*NidOptNative
	Getfield13() []bool
	Getfield14() []string
	Getfield15() [][]byte
}
type NinRepStructFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() []float64
	Getfield2() []float32
	Getfield3() []*NidOptNative
	Getfield4() []*NinOptNative
	Getfield6() []uint64
	Getfield7() []int32
	Getfield8() []*NidOptNative
	Getfield13() []bool
	Getfield14() []string
	Getfield15() [][]byte
}
type NidEmbeddedStructFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetNidOptNative() *NidOptNative
	Getfield200() *NidOptNative
	Getfield210() bool
}
type NinEmbeddedStructFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetNidOptNative() *NidOptNative
	Getfield200() *NidOptNative
	Getfield210() bool
}
type NidNestedStructFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() *NidOptStruct
	Getfield2() []*NidRepStruct
}
type NinNestedStructFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() *NinOptStruct
	Getfield2() []*NinRepStruct
}
type NidOptCustomFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getid() Id
	Getvalue() Weight
}
type NinOptCustomFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getid() Id
	Getvalue() Weight
}
type NidRepCustomFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getid() []Id
	Getvalue() []Weight
}
type NinRepCustomFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getid() []Id
	Getvalue() []Weight
}
type NinOptNativeUnionFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() float64
	Getfield2() float32
	Getfield3() int32
	Getfield4() int64
	Getfield5() uint32
	Getfield6() uint64
	Getfield13() bool
	Getfield14() string
	Getfield15() []byte
}
type NinOptStructUnionFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() float64
	Getfield2() float32
	Getfield3() *NidOptNative
	Getfield4() *NinOptNative
	Getfield6() uint64
	Getfield7() int32
	Getfield13() bool
	Getfield14() string
	Getfield15() []byte
}
type NinEmbeddedStructUnionFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetNidOptNative() *NidOptNative
	Getfield200() *NinOptNative
	Getfield210() bool
}
type NinNestedStructUnionFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() *NinOptNativeUnion
	Getfield2() *NinOptStructUnion
	Getfield3() *NinEmbeddedStructUnion
}
type TreeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getor() *OrBranch
	Getand() *AndBranch
	Getleaf() *Leaf
}
type OrBranchFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getleft() *Tree
	Getright() *Tree
}
type AndBranchFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getleft() *Tree
	Getright() *Tree
}
type LeafFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getvalue() int64
	GetstrValue() string
}
type DeepTreeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getdown() *ADeepBranch
	Getand() *AndDeepBranch
	Getleaf() *DeepLeaf
}
type ADeepBranchFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getdown() *DeepTree
}
type AndDeepBranchFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getleft() *DeepTree
	Getright() *DeepTree
}
type DeepLeafFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Gettree() *Tree
}
type NilFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
}
type NidOptEnumFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() TheTestEnum
}
type NinOptEnumFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() TheTestEnum
}
type NidRepEnumFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() []TheTestEnum
}
type NinRepEnumFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() []TheTestEnum
}
type AnotherNinOptEnumFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() AnotherTestEnum
}
type TimerFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Gettime1() int64
	Gettime2() int64
	Getdata() []byte
}
type NestedDefinitionFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Getfield1() int64
	GetenumField() NestedDefinition_NestedEnum
	GetnNM() *NestedDefinition_NestedMessage_NestedNestedMsg
	GetnM() *NestedDefinition_NestedMessage
}
type NestedDefinition_NestedMessageFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetnestedField1() uint64
	GetnNM() *NestedDefinition_NestedMessage_NestedNestedMsg
}
type NestedDefinition_NestedMessage_NestedNestedMsgFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetnestedNestedField1() string
}
type NestedScopeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	Geta() *NestedDefinition_NestedMessage_NestedNestedMsg
	Getb() NestedDefinition_NestedEnum
	Getc() *NestedDefinition_NestedMessage
}
type CustomContainerFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetcustomStruct() *NidOptCustom
}
type CustomNameNidOptNativeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetfieldA() float64
	GetfieldB() float32
	GetfieldC() int32
	GetfieldD() int64
	GetfieldE() uint32
	GetfieldF() uint64
	GetfieldG() int32
	GetfieldH() int64
	GetfieldI() uint32
	GetfieldJ() int32
	GetfieldK() uint64
	GetfieldL() int64
	GetfieldM() bool
	GetfieldN() string
	GetfieldO() []byte
}
type CustomNameNinOptNativeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetfieldA() float64
	GetfieldB() float32
	GetfieldC() int32
	GetfieldD() int64
	GetfieldE() uint32
	GetfieldF() uint64
	GetfieldG() int32
	GetfieldH() int64
	GetfieldI() uint32
	GetfieldJ() int32
	GetfieldK() uint64
	GetfielL() int64
	GetfieldM() bool
	GetfieldN() string
	GetfieldO() []byte
}
type CustomNameNinRepNativeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetfieldA() []float64
	GetfieldB() []float32
	GetfieldC() []int32
	GetfieldD() []int64
	GetfieldE() []uint32
	GetfieldF() []uint64
	GetfieldG() []int32
	GetfieldH() []int64
	GetfieldI() []uint32
	GetfieldJ() []int32
	GetfieldK() []uint64
	GetfieldL() []int64
	GetfieldM() []bool
	GetfieldN() []string
	GetfieldO() [][]byte
}
type CustomNameNinStructFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetfieldA() float64
	GetfieldB() float32
	GetfieldC() *NidOptNative
	GetfieldD() []*NinOptNative
	GetfieldE() uint64
	GetfieldF() int32
	GetfieldG() *NidOptNative
	GetfieldH() bool
	GetfieldI() string
	GetfieldJ() []byte
}
type CustomNameCustomTypeFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetfieldA() Id
	GetfieldB() Weight
	GetfieldC() []Id
	GetfieldD() []Weight
}
type CustomNameNinEmbeddedStructUnionFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetNidOptNative() *NidOptNative
	GetfieldA() *NinOptNative
	GetfieldB() bool
}
type CustomNameEnumFace interface {
	Proto() github_com_dropbox_goprotoc_proto1.Message
	GetfieldA() TheTestEnum
	GetfieldB() []TheTestEnum
}

func (this *NidOptNative) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidOptNative)
	if !ok {
		return fmt.Errorf("that is not of type *NidOptNative")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidOptNative but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidOptNativebut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return fmt.Errorf("field2 this(%v) Not Equal that(%v)", this.field2, that1.field2)
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	if this.xxx_IsField3Set && this.field3 != that1.field3 {
		return fmt.Errorf("field3 this(%v) Not Equal that(%v)", this.field3, that1.field3)
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	if this.xxx_IsField4Set && this.field4 != that1.field4 {
		return fmt.Errorf("field4 this(%v) Not Equal that(%v)", this.field4, that1.field4)
	}
	if this.xxx_IsField5Set != that1.xxx_IsField5Set {
		return fmt.Errorf("that.field5 is not equal to this.field5")
	}
	if this.xxx_IsField5Set && this.field5 != that1.field5 {
		return fmt.Errorf("field5 this(%v) Not Equal that(%v)", this.field5, that1.field5)
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return fmt.Errorf("field6 this(%v) Not Equal that(%v)", this.field6, that1.field6)
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return fmt.Errorf("field7 this(%v) Not Equal that(%v)", this.field7, that1.field7)
	}
	if this.xxx_IsField8Set != that1.xxx_IsField8Set {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	if this.xxx_IsField8Set && this.field8 != that1.field8 {
		return fmt.Errorf("field8 this(%v) Not Equal that(%v)", this.field8, that1.field8)
	}
	if this.xxx_IsField9Set != that1.xxx_IsField9Set {
		return fmt.Errorf("that.field9 is not equal to this.field9")
	}
	if this.xxx_IsField9Set && this.field9 != that1.field9 {
		return fmt.Errorf("field9 this(%v) Not Equal that(%v)", this.field9, that1.field9)
	}
	if this.xxx_IsField10Set != that1.xxx_IsField10Set {
		return fmt.Errorf("that.field10 is not equal to this.field10")
	}
	if this.xxx_IsField10Set && this.field10 != that1.field10 {
		return fmt.Errorf("field10 this(%v) Not Equal that(%v)", this.field10, that1.field10)
	}
	if this.xxx_IsField11Set != that1.xxx_IsField11Set {
		return fmt.Errorf("that.field11 is not equal to this.field11")
	}
	if this.xxx_IsField11Set && this.field11 != that1.field11 {
		return fmt.Errorf("field11 this(%v) Not Equal that(%v)", this.field11, that1.field11)
	}
	if this.xxx_IsField12Set != that1.xxx_IsField12Set {
		return fmt.Errorf("that.field12 is not equal to this.field12")
	}
	if this.xxx_IsField12Set && this.field12 != that1.field12 {
		return fmt.Errorf("field12 this(%v) Not Equal that(%v)", this.field12, that1.field12)
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return fmt.Errorf("field13 this(%v) Not Equal that(%v)", this.field13, that1.field13)
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return fmt.Errorf("field14 this(%v) Not Equal that(%v)", this.field14, that1.field14)
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return fmt.Errorf("field15 this(%v) Not Equal that(%v)", this.field15, that1.field15)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidOptNative) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidOptNative)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return false
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return false
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return false
	}
	if this.xxx_IsField3Set && this.field3 != that1.field3 {
		return false
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return false
	}
	if this.xxx_IsField4Set && this.field4 != that1.field4 {
		return false
	}
	if this.xxx_IsField5Set != that1.xxx_IsField5Set {
		return false
	}
	if this.xxx_IsField5Set && this.field5 != that1.field5 {
		return false
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return false
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return false
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return false
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return false
	}
	if this.xxx_IsField8Set != that1.xxx_IsField8Set {
		return false
	}
	if this.xxx_IsField8Set && this.field8 != that1.field8 {
		return false
	}
	if this.xxx_IsField9Set != that1.xxx_IsField9Set {
		return false
	}
	if this.xxx_IsField9Set && this.field9 != that1.field9 {
		return false
	}
	if this.xxx_IsField10Set != that1.xxx_IsField10Set {
		return false
	}
	if this.xxx_IsField10Set && this.field10 != that1.field10 {
		return false
	}
	if this.xxx_IsField11Set != that1.xxx_IsField11Set {
		return false
	}
	if this.xxx_IsField11Set && this.field11 != that1.field11 {
		return false
	}
	if this.xxx_IsField12Set != that1.xxx_IsField12Set {
		return false
	}
	if this.xxx_IsField12Set && this.field12 != that1.field12 {
		return false
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return false
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return false
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return false
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return false
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return false
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinOptNative) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinOptNative)
	if !ok {
		return fmt.Errorf("that is not of type *NinOptNative")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinOptNative but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinOptNativebut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return fmt.Errorf("field2 this(%v) Not Equal that(%v)", this.field2, that1.field2)
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	if this.xxx_IsField3Set && this.field3 != that1.field3 {
		return fmt.Errorf("field3 this(%v) Not Equal that(%v)", this.field3, that1.field3)
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	if this.xxx_IsField4Set && this.field4 != that1.field4 {
		return fmt.Errorf("field4 this(%v) Not Equal that(%v)", this.field4, that1.field4)
	}
	if this.xxx_IsField5Set != that1.xxx_IsField5Set {
		return fmt.Errorf("that.field5 is not equal to this.field5")
	}
	if this.xxx_IsField5Set && this.field5 != that1.field5 {
		return fmt.Errorf("field5 this(%v) Not Equal that(%v)", this.field5, that1.field5)
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return fmt.Errorf("field6 this(%v) Not Equal that(%v)", this.field6, that1.field6)
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return fmt.Errorf("field7 this(%v) Not Equal that(%v)", this.field7, that1.field7)
	}
	if this.xxx_IsField8Set != that1.xxx_IsField8Set {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	if this.xxx_IsField8Set && this.field8 != that1.field8 {
		return fmt.Errorf("field8 this(%v) Not Equal that(%v)", this.field8, that1.field8)
	}
	if this.xxx_IsField9Set != that1.xxx_IsField9Set {
		return fmt.Errorf("that.field9 is not equal to this.field9")
	}
	if this.xxx_IsField9Set && this.field9 != that1.field9 {
		return fmt.Errorf("field9 this(%v) Not Equal that(%v)", this.field9, that1.field9)
	}
	if this.xxx_IsField10Set != that1.xxx_IsField10Set {
		return fmt.Errorf("that.field10 is not equal to this.field10")
	}
	if this.xxx_IsField10Set && this.field10 != that1.field10 {
		return fmt.Errorf("field10 this(%v) Not Equal that(%v)", this.field10, that1.field10)
	}
	if this.xxx_IsField11Set != that1.xxx_IsField11Set {
		return fmt.Errorf("that.field11 is not equal to this.field11")
	}
	if this.xxx_IsField11Set && this.field11 != that1.field11 {
		return fmt.Errorf("field11 this(%v) Not Equal that(%v)", this.field11, that1.field11)
	}
	if this.xxx_IsField12Set != that1.xxx_IsField12Set {
		return fmt.Errorf("that.field12 is not equal to this.field12")
	}
	if this.xxx_IsField12Set && this.field12 != that1.field12 {
		return fmt.Errorf("field12 this(%v) Not Equal that(%v)", this.field12, that1.field12)
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return fmt.Errorf("field13 this(%v) Not Equal that(%v)", this.field13, that1.field13)
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return fmt.Errorf("field14 this(%v) Not Equal that(%v)", this.field14, that1.field14)
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return fmt.Errorf("field15 this(%v) Not Equal that(%v)", this.field15, that1.field15)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinOptNative) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinOptNative)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return false
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return false
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return false
	}
	if this.xxx_IsField3Set && this.field3 != that1.field3 {
		return false
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return false
	}
	if this.xxx_IsField4Set && this.field4 != that1.field4 {
		return false
	}
	if this.xxx_IsField5Set != that1.xxx_IsField5Set {
		return false
	}
	if this.xxx_IsField5Set && this.field5 != that1.field5 {
		return false
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return false
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return false
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return false
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return false
	}
	if this.xxx_IsField8Set != that1.xxx_IsField8Set {
		return false
	}
	if this.xxx_IsField8Set && this.field8 != that1.field8 {
		return false
	}
	if this.xxx_IsField9Set != that1.xxx_IsField9Set {
		return false
	}
	if this.xxx_IsField9Set && this.field9 != that1.field9 {
		return false
	}
	if this.xxx_IsField10Set != that1.xxx_IsField10Set {
		return false
	}
	if this.xxx_IsField10Set && this.field10 != that1.field10 {
		return false
	}
	if this.xxx_IsField11Set != that1.xxx_IsField11Set {
		return false
	}
	if this.xxx_IsField11Set && this.field11 != that1.field11 {
		return false
	}
	if this.xxx_IsField12Set != that1.xxx_IsField12Set {
		return false
	}
	if this.xxx_IsField12Set && this.field12 != that1.field12 {
		return false
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return false
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return false
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return false
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return false
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return false
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NidRepNative) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidRepNative)
	if !ok {
		return fmt.Errorf("that is not of type *NidRepNative")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidRepNative but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidRepNativebut is not nil && this == nil")
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return fmt.Errorf("field1 this[%v](%v) Not Equal that[%v](%v)", i, this.field1[i], i, that1.field1[i])
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return fmt.Errorf("field2 this[%v](%v) Not Equal that[%v](%v)", i, this.field2[i], i, that1.field2[i])
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if this.field3[i] != that1.field3[i] {
			return fmt.Errorf("field3 this[%v](%v) Not Equal that[%v](%v)", i, this.field3[i], i, that1.field3[i])
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if this.field4[i] != that1.field4[i] {
			return fmt.Errorf("field4 this[%v](%v) Not Equal that[%v](%v)", i, this.field4[i], i, that1.field4[i])
		}
	}
	if this.xxx_LenField5 != that1.xxx_LenField5 {
		return fmt.Errorf("that.field5 is not equal to this.field5")
	}
	for i := 0; i < this.xxx_LenField5; i++ {
		if this.field5[i] != that1.field5[i] {
			return fmt.Errorf("field5 this[%v](%v) Not Equal that[%v](%v)", i, this.field5[i], i, that1.field5[i])
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return fmt.Errorf("field6 this[%v](%v) Not Equal that[%v](%v)", i, this.field6[i], i, that1.field6[i])
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return fmt.Errorf("field7 this[%v](%v) Not Equal that[%v](%v)", i, this.field7[i], i, that1.field7[i])
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if this.field8[i] != that1.field8[i] {
			return fmt.Errorf("field8 this[%v](%v) Not Equal that[%v](%v)", i, this.field8[i], i, that1.field8[i])
		}
	}
	if this.xxx_LenField9 != that1.xxx_LenField9 {
		return fmt.Errorf("that.field9 is not equal to this.field9")
	}
	for i := 0; i < this.xxx_LenField9; i++ {
		if this.field9[i] != that1.field9[i] {
			return fmt.Errorf("field9 this[%v](%v) Not Equal that[%v](%v)", i, this.field9[i], i, that1.field9[i])
		}
	}
	if this.xxx_LenField10 != that1.xxx_LenField10 {
		return fmt.Errorf("that.field10 is not equal to this.field10")
	}
	for i := 0; i < this.xxx_LenField10; i++ {
		if this.field10[i] != that1.field10[i] {
			return fmt.Errorf("field10 this[%v](%v) Not Equal that[%v](%v)", i, this.field10[i], i, that1.field10[i])
		}
	}
	if this.xxx_LenField11 != that1.xxx_LenField11 {
		return fmt.Errorf("that.field11 is not equal to this.field11")
	}
	for i := 0; i < this.xxx_LenField11; i++ {
		if this.field11[i] != that1.field11[i] {
			return fmt.Errorf("field11 this[%v](%v) Not Equal that[%v](%v)", i, this.field11[i], i, that1.field11[i])
		}
	}
	if this.xxx_LenField12 != that1.xxx_LenField12 {
		return fmt.Errorf("that.field12 is not equal to this.field12")
	}
	for i := 0; i < this.xxx_LenField12; i++ {
		if this.field12[i] != that1.field12[i] {
			return fmt.Errorf("field12 this[%v](%v) Not Equal that[%v](%v)", i, this.field12[i], i, that1.field12[i])
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return fmt.Errorf("field13 this[%v](%v) Not Equal that[%v](%v)", i, this.field13[i], i, that1.field13[i])
		}
	}
	if this.xxx_LenField14 != that1.xxx_LenField14 {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	for i := 0; i < this.xxx_LenField14; i++ {
		if this.field14[i] != that1.field14[i] {
			return fmt.Errorf("field14 this[%v](%v) Not Equal that[%v](%v)", i, this.field14[i], i, that1.field14[i])
		}
	}
	if this.xxx_LenField15 != that1.xxx_LenField15 {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	for i := 0; i < this.xxx_LenField15; i++ {
		if !bytes.Equal(this.field15[i], that1.field15[i]) {
			return fmt.Errorf("field15 this[%v](%v) Not Equal that[%v](%v)", i, this.field15[i], i, that1.field15[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidRepNative) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidRepNative)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return false
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return false
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return false
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return false
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return false
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if this.field3[i] != that1.field3[i] {
			return false
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return false
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if this.field4[i] != that1.field4[i] {
			return false
		}
	}
	if this.xxx_LenField5 != that1.xxx_LenField5 {
		return false
	}
	for i := 0; i < this.xxx_LenField5; i++ {
		if this.field5[i] != that1.field5[i] {
			return false
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return false
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return false
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return false
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return false
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return false
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if this.field8[i] != that1.field8[i] {
			return false
		}
	}
	if this.xxx_LenField9 != that1.xxx_LenField9 {
		return false
	}
	for i := 0; i < this.xxx_LenField9; i++ {
		if this.field9[i] != that1.field9[i] {
			return false
		}
	}
	if this.xxx_LenField10 != that1.xxx_LenField10 {
		return false
	}
	for i := 0; i < this.xxx_LenField10; i++ {
		if this.field10[i] != that1.field10[i] {
			return false
		}
	}
	if this.xxx_LenField11 != that1.xxx_LenField11 {
		return false
	}
	for i := 0; i < this.xxx_LenField11; i++ {
		if this.field11[i] != that1.field11[i] {
			return false
		}
	}
	if this.xxx_LenField12 != that1.xxx_LenField12 {
		return false
	}
	for i := 0; i < this.xxx_LenField12; i++ {
		if this.field12[i] != that1.field12[i] {
			return false
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return false
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return false
		}
	}
	if this.xxx_LenField14 != that1.xxx_LenField14 {
		return false
	}
	for i := 0; i < this.xxx_LenField14; i++ {
		if this.field14[i] != that1.field14[i] {
			return false
		}
	}
	if this.xxx_LenField15 != that1.xxx_LenField15 {
		return false
	}
	for i := 0; i < this.xxx_LenField15; i++ {
		if !bytes.Equal(this.field15[i], that1.field15[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinRepNative) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinRepNative)
	if !ok {
		return fmt.Errorf("that is not of type *NinRepNative")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinRepNative but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinRepNativebut is not nil && this == nil")
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return fmt.Errorf("field1 this[%v](%v) Not Equal that[%v](%v)", i, this.field1[i], i, that1.field1[i])
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return fmt.Errorf("field2 this[%v](%v) Not Equal that[%v](%v)", i, this.field2[i], i, that1.field2[i])
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if this.field3[i] != that1.field3[i] {
			return fmt.Errorf("field3 this[%v](%v) Not Equal that[%v](%v)", i, this.field3[i], i, that1.field3[i])
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if this.field4[i] != that1.field4[i] {
			return fmt.Errorf("field4 this[%v](%v) Not Equal that[%v](%v)", i, this.field4[i], i, that1.field4[i])
		}
	}
	if this.xxx_LenField5 != that1.xxx_LenField5 {
		return fmt.Errorf("that.field5 is not equal to this.field5")
	}
	for i := 0; i < this.xxx_LenField5; i++ {
		if this.field5[i] != that1.field5[i] {
			return fmt.Errorf("field5 this[%v](%v) Not Equal that[%v](%v)", i, this.field5[i], i, that1.field5[i])
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return fmt.Errorf("field6 this[%v](%v) Not Equal that[%v](%v)", i, this.field6[i], i, that1.field6[i])
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return fmt.Errorf("field7 this[%v](%v) Not Equal that[%v](%v)", i, this.field7[i], i, that1.field7[i])
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if this.field8[i] != that1.field8[i] {
			return fmt.Errorf("field8 this[%v](%v) Not Equal that[%v](%v)", i, this.field8[i], i, that1.field8[i])
		}
	}
	if this.xxx_LenField9 != that1.xxx_LenField9 {
		return fmt.Errorf("that.field9 is not equal to this.field9")
	}
	for i := 0; i < this.xxx_LenField9; i++ {
		if this.field9[i] != that1.field9[i] {
			return fmt.Errorf("field9 this[%v](%v) Not Equal that[%v](%v)", i, this.field9[i], i, that1.field9[i])
		}
	}
	if this.xxx_LenField10 != that1.xxx_LenField10 {
		return fmt.Errorf("that.field10 is not equal to this.field10")
	}
	for i := 0; i < this.xxx_LenField10; i++ {
		if this.field10[i] != that1.field10[i] {
			return fmt.Errorf("field10 this[%v](%v) Not Equal that[%v](%v)", i, this.field10[i], i, that1.field10[i])
		}
	}
	if this.xxx_LenField11 != that1.xxx_LenField11 {
		return fmt.Errorf("that.field11 is not equal to this.field11")
	}
	for i := 0; i < this.xxx_LenField11; i++ {
		if this.field11[i] != that1.field11[i] {
			return fmt.Errorf("field11 this[%v](%v) Not Equal that[%v](%v)", i, this.field11[i], i, that1.field11[i])
		}
	}
	if this.xxx_LenField12 != that1.xxx_LenField12 {
		return fmt.Errorf("that.field12 is not equal to this.field12")
	}
	for i := 0; i < this.xxx_LenField12; i++ {
		if this.field12[i] != that1.field12[i] {
			return fmt.Errorf("field12 this[%v](%v) Not Equal that[%v](%v)", i, this.field12[i], i, that1.field12[i])
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return fmt.Errorf("field13 this[%v](%v) Not Equal that[%v](%v)", i, this.field13[i], i, that1.field13[i])
		}
	}
	if this.xxx_LenField14 != that1.xxx_LenField14 {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	for i := 0; i < this.xxx_LenField14; i++ {
		if this.field14[i] != that1.field14[i] {
			return fmt.Errorf("field14 this[%v](%v) Not Equal that[%v](%v)", i, this.field14[i], i, that1.field14[i])
		}
	}
	if this.xxx_LenField15 != that1.xxx_LenField15 {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	for i := 0; i < this.xxx_LenField15; i++ {
		if !bytes.Equal(this.field15[i], that1.field15[i]) {
			return fmt.Errorf("field15 this[%v](%v) Not Equal that[%v](%v)", i, this.field15[i], i, that1.field15[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinRepNative) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinRepNative)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return false
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return false
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return false
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return false
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return false
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if this.field3[i] != that1.field3[i] {
			return false
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return false
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if this.field4[i] != that1.field4[i] {
			return false
		}
	}
	if this.xxx_LenField5 != that1.xxx_LenField5 {
		return false
	}
	for i := 0; i < this.xxx_LenField5; i++ {
		if this.field5[i] != that1.field5[i] {
			return false
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return false
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return false
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return false
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return false
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return false
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if this.field8[i] != that1.field8[i] {
			return false
		}
	}
	if this.xxx_LenField9 != that1.xxx_LenField9 {
		return false
	}
	for i := 0; i < this.xxx_LenField9; i++ {
		if this.field9[i] != that1.field9[i] {
			return false
		}
	}
	if this.xxx_LenField10 != that1.xxx_LenField10 {
		return false
	}
	for i := 0; i < this.xxx_LenField10; i++ {
		if this.field10[i] != that1.field10[i] {
			return false
		}
	}
	if this.xxx_LenField11 != that1.xxx_LenField11 {
		return false
	}
	for i := 0; i < this.xxx_LenField11; i++ {
		if this.field11[i] != that1.field11[i] {
			return false
		}
	}
	if this.xxx_LenField12 != that1.xxx_LenField12 {
		return false
	}
	for i := 0; i < this.xxx_LenField12; i++ {
		if this.field12[i] != that1.field12[i] {
			return false
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return false
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return false
		}
	}
	if this.xxx_LenField14 != that1.xxx_LenField14 {
		return false
	}
	for i := 0; i < this.xxx_LenField14; i++ {
		if this.field14[i] != that1.field14[i] {
			return false
		}
	}
	if this.xxx_LenField15 != that1.xxx_LenField15 {
		return false
	}
	for i := 0; i < this.xxx_LenField15; i++ {
		if !bytes.Equal(this.field15[i], that1.field15[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NidRepPackedNative) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidRepPackedNative)
	if !ok {
		return fmt.Errorf("that is not of type *NidRepPackedNative")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidRepPackedNative but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidRepPackedNativebut is not nil && this == nil")
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return fmt.Errorf("field1 this[%v](%v) Not Equal that[%v](%v)", i, this.field1[i], i, that1.field1[i])
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return fmt.Errorf("field2 this[%v](%v) Not Equal that[%v](%v)", i, this.field2[i], i, that1.field2[i])
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if this.field3[i] != that1.field3[i] {
			return fmt.Errorf("field3 this[%v](%v) Not Equal that[%v](%v)", i, this.field3[i], i, that1.field3[i])
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if this.field4[i] != that1.field4[i] {
			return fmt.Errorf("field4 this[%v](%v) Not Equal that[%v](%v)", i, this.field4[i], i, that1.field4[i])
		}
	}
	if this.xxx_LenField5 != that1.xxx_LenField5 {
		return fmt.Errorf("that.field5 is not equal to this.field5")
	}
	for i := 0; i < this.xxx_LenField5; i++ {
		if this.field5[i] != that1.field5[i] {
			return fmt.Errorf("field5 this[%v](%v) Not Equal that[%v](%v)", i, this.field5[i], i, that1.field5[i])
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return fmt.Errorf("field6 this[%v](%v) Not Equal that[%v](%v)", i, this.field6[i], i, that1.field6[i])
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return fmt.Errorf("field7 this[%v](%v) Not Equal that[%v](%v)", i, this.field7[i], i, that1.field7[i])
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if this.field8[i] != that1.field8[i] {
			return fmt.Errorf("field8 this[%v](%v) Not Equal that[%v](%v)", i, this.field8[i], i, that1.field8[i])
		}
	}
	if this.xxx_LenField9 != that1.xxx_LenField9 {
		return fmt.Errorf("that.field9 is not equal to this.field9")
	}
	for i := 0; i < this.xxx_LenField9; i++ {
		if this.field9[i] != that1.field9[i] {
			return fmt.Errorf("field9 this[%v](%v) Not Equal that[%v](%v)", i, this.field9[i], i, that1.field9[i])
		}
	}
	if this.xxx_LenField10 != that1.xxx_LenField10 {
		return fmt.Errorf("that.field10 is not equal to this.field10")
	}
	for i := 0; i < this.xxx_LenField10; i++ {
		if this.field10[i] != that1.field10[i] {
			return fmt.Errorf("field10 this[%v](%v) Not Equal that[%v](%v)", i, this.field10[i], i, that1.field10[i])
		}
	}
	if this.xxx_LenField11 != that1.xxx_LenField11 {
		return fmt.Errorf("that.field11 is not equal to this.field11")
	}
	for i := 0; i < this.xxx_LenField11; i++ {
		if this.field11[i] != that1.field11[i] {
			return fmt.Errorf("field11 this[%v](%v) Not Equal that[%v](%v)", i, this.field11[i], i, that1.field11[i])
		}
	}
	if this.xxx_LenField12 != that1.xxx_LenField12 {
		return fmt.Errorf("that.field12 is not equal to this.field12")
	}
	for i := 0; i < this.xxx_LenField12; i++ {
		if this.field12[i] != that1.field12[i] {
			return fmt.Errorf("field12 this[%v](%v) Not Equal that[%v](%v)", i, this.field12[i], i, that1.field12[i])
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return fmt.Errorf("field13 this[%v](%v) Not Equal that[%v](%v)", i, this.field13[i], i, that1.field13[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidRepPackedNative) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidRepPackedNative)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return false
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return false
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return false
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return false
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return false
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if this.field3[i] != that1.field3[i] {
			return false
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return false
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if this.field4[i] != that1.field4[i] {
			return false
		}
	}
	if this.xxx_LenField5 != that1.xxx_LenField5 {
		return false
	}
	for i := 0; i < this.xxx_LenField5; i++ {
		if this.field5[i] != that1.field5[i] {
			return false
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return false
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return false
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return false
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return false
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return false
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if this.field8[i] != that1.field8[i] {
			return false
		}
	}
	if this.xxx_LenField9 != that1.xxx_LenField9 {
		return false
	}
	for i := 0; i < this.xxx_LenField9; i++ {
		if this.field9[i] != that1.field9[i] {
			return false
		}
	}
	if this.xxx_LenField10 != that1.xxx_LenField10 {
		return false
	}
	for i := 0; i < this.xxx_LenField10; i++ {
		if this.field10[i] != that1.field10[i] {
			return false
		}
	}
	if this.xxx_LenField11 != that1.xxx_LenField11 {
		return false
	}
	for i := 0; i < this.xxx_LenField11; i++ {
		if this.field11[i] != that1.field11[i] {
			return false
		}
	}
	if this.xxx_LenField12 != that1.xxx_LenField12 {
		return false
	}
	for i := 0; i < this.xxx_LenField12; i++ {
		if this.field12[i] != that1.field12[i] {
			return false
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return false
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinRepPackedNative) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinRepPackedNative)
	if !ok {
		return fmt.Errorf("that is not of type *NinRepPackedNative")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinRepPackedNative but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinRepPackedNativebut is not nil && this == nil")
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return fmt.Errorf("field1 this[%v](%v) Not Equal that[%v](%v)", i, this.field1[i], i, that1.field1[i])
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return fmt.Errorf("field2 this[%v](%v) Not Equal that[%v](%v)", i, this.field2[i], i, that1.field2[i])
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if this.field3[i] != that1.field3[i] {
			return fmt.Errorf("field3 this[%v](%v) Not Equal that[%v](%v)", i, this.field3[i], i, that1.field3[i])
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if this.field4[i] != that1.field4[i] {
			return fmt.Errorf("field4 this[%v](%v) Not Equal that[%v](%v)", i, this.field4[i], i, that1.field4[i])
		}
	}
	if this.xxx_LenField5 != that1.xxx_LenField5 {
		return fmt.Errorf("that.field5 is not equal to this.field5")
	}
	for i := 0; i < this.xxx_LenField5; i++ {
		if this.field5[i] != that1.field5[i] {
			return fmt.Errorf("field5 this[%v](%v) Not Equal that[%v](%v)", i, this.field5[i], i, that1.field5[i])
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return fmt.Errorf("field6 this[%v](%v) Not Equal that[%v](%v)", i, this.field6[i], i, that1.field6[i])
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return fmt.Errorf("field7 this[%v](%v) Not Equal that[%v](%v)", i, this.field7[i], i, that1.field7[i])
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if this.field8[i] != that1.field8[i] {
			return fmt.Errorf("field8 this[%v](%v) Not Equal that[%v](%v)", i, this.field8[i], i, that1.field8[i])
		}
	}
	if this.xxx_LenField9 != that1.xxx_LenField9 {
		return fmt.Errorf("that.field9 is not equal to this.field9")
	}
	for i := 0; i < this.xxx_LenField9; i++ {
		if this.field9[i] != that1.field9[i] {
			return fmt.Errorf("field9 this[%v](%v) Not Equal that[%v](%v)", i, this.field9[i], i, that1.field9[i])
		}
	}
	if this.xxx_LenField10 != that1.xxx_LenField10 {
		return fmt.Errorf("that.field10 is not equal to this.field10")
	}
	for i := 0; i < this.xxx_LenField10; i++ {
		if this.field10[i] != that1.field10[i] {
			return fmt.Errorf("field10 this[%v](%v) Not Equal that[%v](%v)", i, this.field10[i], i, that1.field10[i])
		}
	}
	if this.xxx_LenField11 != that1.xxx_LenField11 {
		return fmt.Errorf("that.field11 is not equal to this.field11")
	}
	for i := 0; i < this.xxx_LenField11; i++ {
		if this.field11[i] != that1.field11[i] {
			return fmt.Errorf("field11 this[%v](%v) Not Equal that[%v](%v)", i, this.field11[i], i, that1.field11[i])
		}
	}
	if this.xxx_LenField12 != that1.xxx_LenField12 {
		return fmt.Errorf("that.field12 is not equal to this.field12")
	}
	for i := 0; i < this.xxx_LenField12; i++ {
		if this.field12[i] != that1.field12[i] {
			return fmt.Errorf("field12 this[%v](%v) Not Equal that[%v](%v)", i, this.field12[i], i, that1.field12[i])
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return fmt.Errorf("field13 this[%v](%v) Not Equal that[%v](%v)", i, this.field13[i], i, that1.field13[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinRepPackedNative) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinRepPackedNative)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return false
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return false
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return false
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return false
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return false
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if this.field3[i] != that1.field3[i] {
			return false
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return false
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if this.field4[i] != that1.field4[i] {
			return false
		}
	}
	if this.xxx_LenField5 != that1.xxx_LenField5 {
		return false
	}
	for i := 0; i < this.xxx_LenField5; i++ {
		if this.field5[i] != that1.field5[i] {
			return false
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return false
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return false
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return false
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return false
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return false
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if this.field8[i] != that1.field8[i] {
			return false
		}
	}
	if this.xxx_LenField9 != that1.xxx_LenField9 {
		return false
	}
	for i := 0; i < this.xxx_LenField9; i++ {
		if this.field9[i] != that1.field9[i] {
			return false
		}
	}
	if this.xxx_LenField10 != that1.xxx_LenField10 {
		return false
	}
	for i := 0; i < this.xxx_LenField10; i++ {
		if this.field10[i] != that1.field10[i] {
			return false
		}
	}
	if this.xxx_LenField11 != that1.xxx_LenField11 {
		return false
	}
	for i := 0; i < this.xxx_LenField11; i++ {
		if this.field11[i] != that1.field11[i] {
			return false
		}
	}
	if this.xxx_LenField12 != that1.xxx_LenField12 {
		return false
	}
	for i := 0; i < this.xxx_LenField12; i++ {
		if this.field12[i] != that1.field12[i] {
			return false
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return false
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NidOptStruct) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidOptStruct)
	if !ok {
		return fmt.Errorf("that is not of type *NidOptStruct")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidOptStruct but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidOptStructbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return fmt.Errorf("field2 this(%v) Not Equal that(%v)", this.field2, that1.field2)
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	if this.xxx_IsField3Set && !this.field3.Equal(that1.field3) {
		return fmt.Errorf("field3 this(%v) Not Equal that(%v)", this.field3, that1.field3)
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	if this.xxx_IsField4Set && !this.field4.Equal(that1.field4) {
		return fmt.Errorf("field4 this(%v) Not Equal that(%v)", this.field4, that1.field4)
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return fmt.Errorf("field6 this(%v) Not Equal that(%v)", this.field6, that1.field6)
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return fmt.Errorf("field7 this(%v) Not Equal that(%v)", this.field7, that1.field7)
	}
	if this.xxx_IsField8Set != that1.xxx_IsField8Set {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	if this.xxx_IsField8Set && !this.field8.Equal(that1.field8) {
		return fmt.Errorf("field8 this(%v) Not Equal that(%v)", this.field8, that1.field8)
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return fmt.Errorf("field13 this(%v) Not Equal that(%v)", this.field13, that1.field13)
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return fmt.Errorf("field14 this(%v) Not Equal that(%v)", this.field14, that1.field14)
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return fmt.Errorf("field15 this(%v) Not Equal that(%v)", this.field15, that1.field15)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidOptStruct) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidOptStruct)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return false
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return false
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return false
	}
	if this.xxx_IsField3Set && !this.field3.Equal(that1.field3) {
		return false
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return false
	}
	if this.xxx_IsField4Set && !this.field4.Equal(that1.field4) {
		return false
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return false
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return false
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return false
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return false
	}
	if this.xxx_IsField8Set != that1.xxx_IsField8Set {
		return false
	}
	if this.xxx_IsField8Set && !this.field8.Equal(that1.field8) {
		return false
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return false
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return false
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return false
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return false
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return false
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinOptStruct) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinOptStruct)
	if !ok {
		return fmt.Errorf("that is not of type *NinOptStruct")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinOptStruct but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinOptStructbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return fmt.Errorf("field2 this(%v) Not Equal that(%v)", this.field2, that1.field2)
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	if this.xxx_IsField3Set && !this.field3.Equal(that1.field3) {
		return fmt.Errorf("field3 this(%v) Not Equal that(%v)", this.field3, that1.field3)
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	if this.xxx_IsField4Set && !this.field4.Equal(that1.field4) {
		return fmt.Errorf("field4 this(%v) Not Equal that(%v)", this.field4, that1.field4)
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return fmt.Errorf("field6 this(%v) Not Equal that(%v)", this.field6, that1.field6)
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return fmt.Errorf("field7 this(%v) Not Equal that(%v)", this.field7, that1.field7)
	}
	if this.xxx_IsField8Set != that1.xxx_IsField8Set {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	if this.xxx_IsField8Set && !this.field8.Equal(that1.field8) {
		return fmt.Errorf("field8 this(%v) Not Equal that(%v)", this.field8, that1.field8)
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return fmt.Errorf("field13 this(%v) Not Equal that(%v)", this.field13, that1.field13)
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return fmt.Errorf("field14 this(%v) Not Equal that(%v)", this.field14, that1.field14)
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return fmt.Errorf("field15 this(%v) Not Equal that(%v)", this.field15, that1.field15)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinOptStruct) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinOptStruct)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return false
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return false
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return false
	}
	if this.xxx_IsField3Set && !this.field3.Equal(that1.field3) {
		return false
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return false
	}
	if this.xxx_IsField4Set && !this.field4.Equal(that1.field4) {
		return false
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return false
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return false
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return false
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return false
	}
	if this.xxx_IsField8Set != that1.xxx_IsField8Set {
		return false
	}
	if this.xxx_IsField8Set && !this.field8.Equal(that1.field8) {
		return false
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return false
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return false
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return false
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return false
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return false
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NidRepStruct) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidRepStruct)
	if !ok {
		return fmt.Errorf("that is not of type *NidRepStruct")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidRepStruct but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidRepStructbut is not nil && this == nil")
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return fmt.Errorf("field1 this[%v](%v) Not Equal that[%v](%v)", i, this.field1[i], i, that1.field1[i])
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return fmt.Errorf("field2 this[%v](%v) Not Equal that[%v](%v)", i, this.field2[i], i, that1.field2[i])
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if !this.field3[i].Equal(that1.field3[i]) {
			return fmt.Errorf("field3 this[%v](%v) Not Equal that[%v](%v)", i, this.field3[i], i, that1.field3[i])
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if !this.field4[i].Equal(that1.field4[i]) {
			return fmt.Errorf("field4 this[%v](%v) Not Equal that[%v](%v)", i, this.field4[i], i, that1.field4[i])
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return fmt.Errorf("field6 this[%v](%v) Not Equal that[%v](%v)", i, this.field6[i], i, that1.field6[i])
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return fmt.Errorf("field7 this[%v](%v) Not Equal that[%v](%v)", i, this.field7[i], i, that1.field7[i])
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if !this.field8[i].Equal(that1.field8[i]) {
			return fmt.Errorf("field8 this[%v](%v) Not Equal that[%v](%v)", i, this.field8[i], i, that1.field8[i])
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return fmt.Errorf("field13 this[%v](%v) Not Equal that[%v](%v)", i, this.field13[i], i, that1.field13[i])
		}
	}
	if this.xxx_LenField14 != that1.xxx_LenField14 {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	for i := 0; i < this.xxx_LenField14; i++ {
		if this.field14[i] != that1.field14[i] {
			return fmt.Errorf("field14 this[%v](%v) Not Equal that[%v](%v)", i, this.field14[i], i, that1.field14[i])
		}
	}
	if this.xxx_LenField15 != that1.xxx_LenField15 {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	for i := 0; i < this.xxx_LenField15; i++ {
		if !bytes.Equal(this.field15[i], that1.field15[i]) {
			return fmt.Errorf("field15 this[%v](%v) Not Equal that[%v](%v)", i, this.field15[i], i, that1.field15[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidRepStruct) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidRepStruct)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return false
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return false
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return false
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return false
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return false
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if !this.field3[i].Equal(that1.field3[i]) {
			return false
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return false
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if !this.field4[i].Equal(that1.field4[i]) {
			return false
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return false
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return false
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return false
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return false
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return false
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if !this.field8[i].Equal(that1.field8[i]) {
			return false
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return false
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return false
		}
	}
	if this.xxx_LenField14 != that1.xxx_LenField14 {
		return false
	}
	for i := 0; i < this.xxx_LenField14; i++ {
		if this.field14[i] != that1.field14[i] {
			return false
		}
	}
	if this.xxx_LenField15 != that1.xxx_LenField15 {
		return false
	}
	for i := 0; i < this.xxx_LenField15; i++ {
		if !bytes.Equal(this.field15[i], that1.field15[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinRepStruct) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinRepStruct)
	if !ok {
		return fmt.Errorf("that is not of type *NinRepStruct")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinRepStruct but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinRepStructbut is not nil && this == nil")
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return fmt.Errorf("field1 this[%v](%v) Not Equal that[%v](%v)", i, this.field1[i], i, that1.field1[i])
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return fmt.Errorf("field2 this[%v](%v) Not Equal that[%v](%v)", i, this.field2[i], i, that1.field2[i])
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if !this.field3[i].Equal(that1.field3[i]) {
			return fmt.Errorf("field3 this[%v](%v) Not Equal that[%v](%v)", i, this.field3[i], i, that1.field3[i])
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if !this.field4[i].Equal(that1.field4[i]) {
			return fmt.Errorf("field4 this[%v](%v) Not Equal that[%v](%v)", i, this.field4[i], i, that1.field4[i])
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return fmt.Errorf("field6 this[%v](%v) Not Equal that[%v](%v)", i, this.field6[i], i, that1.field6[i])
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return fmt.Errorf("field7 this[%v](%v) Not Equal that[%v](%v)", i, this.field7[i], i, that1.field7[i])
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if !this.field8[i].Equal(that1.field8[i]) {
			return fmt.Errorf("field8 this[%v](%v) Not Equal that[%v](%v)", i, this.field8[i], i, that1.field8[i])
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return fmt.Errorf("field13 this[%v](%v) Not Equal that[%v](%v)", i, this.field13[i], i, that1.field13[i])
		}
	}
	if this.xxx_LenField14 != that1.xxx_LenField14 {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	for i := 0; i < this.xxx_LenField14; i++ {
		if this.field14[i] != that1.field14[i] {
			return fmt.Errorf("field14 this[%v](%v) Not Equal that[%v](%v)", i, this.field14[i], i, that1.field14[i])
		}
	}
	if this.xxx_LenField15 != that1.xxx_LenField15 {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	for i := 0; i < this.xxx_LenField15; i++ {
		if !bytes.Equal(this.field15[i], that1.field15[i]) {
			return fmt.Errorf("field15 this[%v](%v) Not Equal that[%v](%v)", i, this.field15[i], i, that1.field15[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinRepStruct) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinRepStruct)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return false
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return false
		}
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return false
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if this.field2[i] != that1.field2[i] {
			return false
		}
	}
	if this.xxx_LenField3 != that1.xxx_LenField3 {
		return false
	}
	for i := 0; i < this.xxx_LenField3; i++ {
		if !this.field3[i].Equal(that1.field3[i]) {
			return false
		}
	}
	if this.xxx_LenField4 != that1.xxx_LenField4 {
		return false
	}
	for i := 0; i < this.xxx_LenField4; i++ {
		if !this.field4[i].Equal(that1.field4[i]) {
			return false
		}
	}
	if this.xxx_LenField6 != that1.xxx_LenField6 {
		return false
	}
	for i := 0; i < this.xxx_LenField6; i++ {
		if this.field6[i] != that1.field6[i] {
			return false
		}
	}
	if this.xxx_LenField7 != that1.xxx_LenField7 {
		return false
	}
	for i := 0; i < this.xxx_LenField7; i++ {
		if this.field7[i] != that1.field7[i] {
			return false
		}
	}
	if this.xxx_LenField8 != that1.xxx_LenField8 {
		return false
	}
	for i := 0; i < this.xxx_LenField8; i++ {
		if !this.field8[i].Equal(that1.field8[i]) {
			return false
		}
	}
	if this.xxx_LenField13 != that1.xxx_LenField13 {
		return false
	}
	for i := 0; i < this.xxx_LenField13; i++ {
		if this.field13[i] != that1.field13[i] {
			return false
		}
	}
	if this.xxx_LenField14 != that1.xxx_LenField14 {
		return false
	}
	for i := 0; i < this.xxx_LenField14; i++ {
		if this.field14[i] != that1.field14[i] {
			return false
		}
	}
	if this.xxx_LenField15 != that1.xxx_LenField15 {
		return false
	}
	for i := 0; i < this.xxx_LenField15; i++ {
		if !bytes.Equal(this.field15[i], that1.field15[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NidEmbeddedStruct) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidEmbeddedStruct)
	if !ok {
		return fmt.Errorf("that is not of type *NidEmbeddedStruct")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidEmbeddedStruct but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidEmbeddedStructbut is not nil && this == nil")
	}
	if this.xxx_IsNidOptNativeSet != that1.xxx_IsNidOptNativeSet {
		return fmt.Errorf("that.NidOptNative is not equal to this.NidOptNative")
	}
	if this.xxx_IsNidOptNativeSet && !this.NidOptNative.Equal(that1.NidOptNative) {
		return fmt.Errorf("NidOptNative this(%v) Not Equal that(%v)", this.NidOptNative, that1.NidOptNative)
	}
	if this.xxx_IsField200Set != that1.xxx_IsField200Set {
		return fmt.Errorf("that.field200 is not equal to this.field200")
	}
	if this.xxx_IsField200Set && !this.field200.Equal(that1.field200) {
		return fmt.Errorf("field200 this(%v) Not Equal that(%v)", this.field200, that1.field200)
	}
	if this.xxx_IsField210Set != that1.xxx_IsField210Set {
		return fmt.Errorf("that.field210 is not equal to this.field210")
	}
	if this.xxx_IsField210Set && this.field210 != that1.field210 {
		return fmt.Errorf("field210 this(%v) Not Equal that(%v)", this.field210, that1.field210)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidEmbeddedStruct) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidEmbeddedStruct)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsNidOptNativeSet != that1.xxx_IsNidOptNativeSet {
		return false
	}
	if this.xxx_IsNidOptNativeSet && !this.NidOptNative.Equal(that1.NidOptNative) {
		return false
	}
	if this.xxx_IsField200Set != that1.xxx_IsField200Set {
		return false
	}
	if this.xxx_IsField200Set && !this.field200.Equal(that1.field200) {
		return false
	}
	if this.xxx_IsField210Set != that1.xxx_IsField210Set {
		return false
	}
	if this.xxx_IsField210Set && this.field210 != that1.field210 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinEmbeddedStruct) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinEmbeddedStruct)
	if !ok {
		return fmt.Errorf("that is not of type *NinEmbeddedStruct")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinEmbeddedStruct but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinEmbeddedStructbut is not nil && this == nil")
	}
	if this.xxx_IsNidOptNativeSet != that1.xxx_IsNidOptNativeSet {
		return fmt.Errorf("that.NidOptNative is not equal to this.NidOptNative")
	}
	if this.xxx_IsNidOptNativeSet && !this.NidOptNative.Equal(that1.NidOptNative) {
		return fmt.Errorf("NidOptNative this(%v) Not Equal that(%v)", this.NidOptNative, that1.NidOptNative)
	}
	if this.xxx_IsField200Set != that1.xxx_IsField200Set {
		return fmt.Errorf("that.field200 is not equal to this.field200")
	}
	if this.xxx_IsField200Set && !this.field200.Equal(that1.field200) {
		return fmt.Errorf("field200 this(%v) Not Equal that(%v)", this.field200, that1.field200)
	}
	if this.xxx_IsField210Set != that1.xxx_IsField210Set {
		return fmt.Errorf("that.field210 is not equal to this.field210")
	}
	if this.xxx_IsField210Set && this.field210 != that1.field210 {
		return fmt.Errorf("field210 this(%v) Not Equal that(%v)", this.field210, that1.field210)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinEmbeddedStruct) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinEmbeddedStruct)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsNidOptNativeSet != that1.xxx_IsNidOptNativeSet {
		return false
	}
	if this.xxx_IsNidOptNativeSet && !this.NidOptNative.Equal(that1.NidOptNative) {
		return false
	}
	if this.xxx_IsField200Set != that1.xxx_IsField200Set {
		return false
	}
	if this.xxx_IsField200Set && !this.field200.Equal(that1.field200) {
		return false
	}
	if this.xxx_IsField210Set != that1.xxx_IsField210Set {
		return false
	}
	if this.xxx_IsField210Set && this.field210 != that1.field210 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NidNestedStruct) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidNestedStruct)
	if !ok {
		return fmt.Errorf("that is not of type *NidNestedStruct")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidNestedStruct but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidNestedStructbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && !this.field1.Equal(that1.field1) {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if !this.field2[i].Equal(that1.field2[i]) {
			return fmt.Errorf("field2 this[%v](%v) Not Equal that[%v](%v)", i, this.field2[i], i, that1.field2[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidNestedStruct) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidNestedStruct)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && !this.field1.Equal(that1.field1) {
		return false
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return false
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if !this.field2[i].Equal(that1.field2[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinNestedStruct) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinNestedStruct)
	if !ok {
		return fmt.Errorf("that is not of type *NinNestedStruct")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinNestedStruct but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinNestedStructbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && !this.field1.Equal(that1.field1) {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if !this.field2[i].Equal(that1.field2[i]) {
			return fmt.Errorf("field2 this[%v](%v) Not Equal that[%v](%v)", i, this.field2[i], i, that1.field2[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinNestedStruct) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinNestedStruct)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && !this.field1.Equal(that1.field1) {
		return false
	}
	if this.xxx_LenField2 != that1.xxx_LenField2 {
		return false
	}
	for i := 0; i < this.xxx_LenField2; i++ {
		if !this.field2[i].Equal(that1.field2[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NidOptCustom) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidOptCustom)
	if !ok {
		return fmt.Errorf("that is not of type *NidOptCustom")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidOptCustom but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidOptCustombut is not nil && this == nil")
	}
	if this.xxx_IsIdSet != that1.xxx_IsIdSet {
		return fmt.Errorf("that.id is not equal to this.id")
	}
	if this.xxx_IsIdSet && this.id != that1.id {
		return fmt.Errorf("id this(%v) Not Equal that(%v)", this.id, that1.id)
	}
	if this.xxx_IsValueSet != that1.xxx_IsValueSet {
		return fmt.Errorf("that.value is not equal to this.value")
	}
	if this.xxx_IsValueSet && this.value != that1.value {
		return fmt.Errorf("value this(%v) Not Equal that(%v)", this.value, that1.value)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidOptCustom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidOptCustom)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsIdSet != that1.xxx_IsIdSet {
		return false
	}
	if this.xxx_IsIdSet && this.id != that1.id {
		return false
	}
	if this.xxx_IsValueSet != that1.xxx_IsValueSet {
		return false
	}
	if this.xxx_IsValueSet && this.value != that1.value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinOptCustom) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinOptCustom)
	if !ok {
		return fmt.Errorf("that is not of type *NinOptCustom")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinOptCustom but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinOptCustombut is not nil && this == nil")
	}
	if this.xxx_IsIdSet != that1.xxx_IsIdSet {
		return fmt.Errorf("that.id is not equal to this.id")
	}
	if this.xxx_IsIdSet && this.id != that1.id {
		return fmt.Errorf("id this(%v) Not Equal that(%v)", this.id, that1.id)
	}
	if this.xxx_IsValueSet != that1.xxx_IsValueSet {
		return fmt.Errorf("that.value is not equal to this.value")
	}
	if this.xxx_IsValueSet && this.value != that1.value {
		return fmt.Errorf("value this(%v) Not Equal that(%v)", this.value, that1.value)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinOptCustom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinOptCustom)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsIdSet != that1.xxx_IsIdSet {
		return false
	}
	if this.xxx_IsIdSet && this.id != that1.id {
		return false
	}
	if this.xxx_IsValueSet != that1.xxx_IsValueSet {
		return false
	}
	if this.xxx_IsValueSet && this.value != that1.value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NidRepCustom) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidRepCustom)
	if !ok {
		return fmt.Errorf("that is not of type *NidRepCustom")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidRepCustom but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidRepCustombut is not nil && this == nil")
	}
	if this.xxx_LenId != that1.xxx_LenId {
		return fmt.Errorf("that.id is not equal to this.id")
	}
	for i := 0; i < this.xxx_LenId; i++ {
		if this.id[i] != that1.id[i] {
			return fmt.Errorf("id this[%v](%v) Not Equal that[%v](%v)", i, this.id[i], i, that1.id[i])
		}
	}
	if this.xxx_LenValue != that1.xxx_LenValue {
		return fmt.Errorf("that.value is not equal to this.value")
	}
	for i := 0; i < this.xxx_LenValue; i++ {
		if this.value[i] != that1.value[i] {
			return fmt.Errorf("value this[%v](%v) Not Equal that[%v](%v)", i, this.value[i], i, that1.value[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidRepCustom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidRepCustom)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenId != that1.xxx_LenId {
		return false
	}
	for i := 0; i < this.xxx_LenId; i++ {
		if this.id[i] != that1.id[i] {
			return false
		}
	}
	if this.xxx_LenValue != that1.xxx_LenValue {
		return false
	}
	for i := 0; i < this.xxx_LenValue; i++ {
		if this.value[i] != that1.value[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinRepCustom) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinRepCustom)
	if !ok {
		return fmt.Errorf("that is not of type *NinRepCustom")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinRepCustom but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinRepCustombut is not nil && this == nil")
	}
	if this.xxx_LenId != that1.xxx_LenId {
		return fmt.Errorf("that.id is not equal to this.id")
	}
	for i := 0; i < this.xxx_LenId; i++ {
		if this.id[i] != that1.id[i] {
			return fmt.Errorf("id this[%v](%v) Not Equal that[%v](%v)", i, this.id[i], i, that1.id[i])
		}
	}
	if this.xxx_LenValue != that1.xxx_LenValue {
		return fmt.Errorf("that.value is not equal to this.value")
	}
	for i := 0; i < this.xxx_LenValue; i++ {
		if this.value[i] != that1.value[i] {
			return fmt.Errorf("value this[%v](%v) Not Equal that[%v](%v)", i, this.value[i], i, that1.value[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinRepCustom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinRepCustom)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenId != that1.xxx_LenId {
		return false
	}
	for i := 0; i < this.xxx_LenId; i++ {
		if this.id[i] != that1.id[i] {
			return false
		}
	}
	if this.xxx_LenValue != that1.xxx_LenValue {
		return false
	}
	for i := 0; i < this.xxx_LenValue; i++ {
		if this.value[i] != that1.value[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinOptNativeUnion) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinOptNativeUnion)
	if !ok {
		return fmt.Errorf("that is not of type *NinOptNativeUnion")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinOptNativeUnion but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinOptNativeUnionbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return fmt.Errorf("field2 this(%v) Not Equal that(%v)", this.field2, that1.field2)
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	if this.xxx_IsField3Set && this.field3 != that1.field3 {
		return fmt.Errorf("field3 this(%v) Not Equal that(%v)", this.field3, that1.field3)
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	if this.xxx_IsField4Set && this.field4 != that1.field4 {
		return fmt.Errorf("field4 this(%v) Not Equal that(%v)", this.field4, that1.field4)
	}
	if this.xxx_IsField5Set != that1.xxx_IsField5Set {
		return fmt.Errorf("that.field5 is not equal to this.field5")
	}
	if this.xxx_IsField5Set && this.field5 != that1.field5 {
		return fmt.Errorf("field5 this(%v) Not Equal that(%v)", this.field5, that1.field5)
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return fmt.Errorf("field6 this(%v) Not Equal that(%v)", this.field6, that1.field6)
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return fmt.Errorf("field13 this(%v) Not Equal that(%v)", this.field13, that1.field13)
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return fmt.Errorf("field14 this(%v) Not Equal that(%v)", this.field14, that1.field14)
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return fmt.Errorf("field15 this(%v) Not Equal that(%v)", this.field15, that1.field15)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinOptNativeUnion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinOptNativeUnion)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return false
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return false
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return false
	}
	if this.xxx_IsField3Set && this.field3 != that1.field3 {
		return false
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return false
	}
	if this.xxx_IsField4Set && this.field4 != that1.field4 {
		return false
	}
	if this.xxx_IsField5Set != that1.xxx_IsField5Set {
		return false
	}
	if this.xxx_IsField5Set && this.field5 != that1.field5 {
		return false
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return false
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return false
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return false
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return false
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return false
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return false
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return false
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinOptStructUnion) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinOptStructUnion)
	if !ok {
		return fmt.Errorf("that is not of type *NinOptStructUnion")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinOptStructUnion but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinOptStructUnionbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return fmt.Errorf("field2 this(%v) Not Equal that(%v)", this.field2, that1.field2)
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	if this.xxx_IsField3Set && !this.field3.Equal(that1.field3) {
		return fmt.Errorf("field3 this(%v) Not Equal that(%v)", this.field3, that1.field3)
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	if this.xxx_IsField4Set && !this.field4.Equal(that1.field4) {
		return fmt.Errorf("field4 this(%v) Not Equal that(%v)", this.field4, that1.field4)
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return fmt.Errorf("field6 this(%v) Not Equal that(%v)", this.field6, that1.field6)
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return fmt.Errorf("field7 this(%v) Not Equal that(%v)", this.field7, that1.field7)
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return fmt.Errorf("field13 this(%v) Not Equal that(%v)", this.field13, that1.field13)
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return fmt.Errorf("field14 this(%v) Not Equal that(%v)", this.field14, that1.field14)
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return fmt.Errorf("field15 this(%v) Not Equal that(%v)", this.field15, that1.field15)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinOptStructUnion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinOptStructUnion)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return false
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return false
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return false
	}
	if this.xxx_IsField3Set && !this.field3.Equal(that1.field3) {
		return false
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return false
	}
	if this.xxx_IsField4Set && !this.field4.Equal(that1.field4) {
		return false
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return false
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return false
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return false
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return false
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return false
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return false
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return false
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return false
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return false
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinEmbeddedStructUnion) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinEmbeddedStructUnion)
	if !ok {
		return fmt.Errorf("that is not of type *NinEmbeddedStructUnion")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinEmbeddedStructUnion but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinEmbeddedStructUnionbut is not nil && this == nil")
	}
	if this.xxx_IsNidOptNativeSet != that1.xxx_IsNidOptNativeSet {
		return fmt.Errorf("that.NidOptNative is not equal to this.NidOptNative")
	}
	if this.xxx_IsNidOptNativeSet && !this.NidOptNative.Equal(that1.NidOptNative) {
		return fmt.Errorf("NidOptNative this(%v) Not Equal that(%v)", this.NidOptNative, that1.NidOptNative)
	}
	if this.xxx_IsField200Set != that1.xxx_IsField200Set {
		return fmt.Errorf("that.field200 is not equal to this.field200")
	}
	if this.xxx_IsField200Set && !this.field200.Equal(that1.field200) {
		return fmt.Errorf("field200 this(%v) Not Equal that(%v)", this.field200, that1.field200)
	}
	if this.xxx_IsField210Set != that1.xxx_IsField210Set {
		return fmt.Errorf("that.field210 is not equal to this.field210")
	}
	if this.xxx_IsField210Set && this.field210 != that1.field210 {
		return fmt.Errorf("field210 this(%v) Not Equal that(%v)", this.field210, that1.field210)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinEmbeddedStructUnion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinEmbeddedStructUnion)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsNidOptNativeSet != that1.xxx_IsNidOptNativeSet {
		return false
	}
	if this.xxx_IsNidOptNativeSet && !this.NidOptNative.Equal(that1.NidOptNative) {
		return false
	}
	if this.xxx_IsField200Set != that1.xxx_IsField200Set {
		return false
	}
	if this.xxx_IsField200Set && !this.field200.Equal(that1.field200) {
		return false
	}
	if this.xxx_IsField210Set != that1.xxx_IsField210Set {
		return false
	}
	if this.xxx_IsField210Set && this.field210 != that1.field210 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinNestedStructUnion) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinNestedStructUnion)
	if !ok {
		return fmt.Errorf("that is not of type *NinNestedStructUnion")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinNestedStructUnion but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinNestedStructUnionbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && !this.field1.Equal(that1.field1) {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	if this.xxx_IsField2Set && !this.field2.Equal(that1.field2) {
		return fmt.Errorf("field2 this(%v) Not Equal that(%v)", this.field2, that1.field2)
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	if this.xxx_IsField3Set && !this.field3.Equal(that1.field3) {
		return fmt.Errorf("field3 this(%v) Not Equal that(%v)", this.field3, that1.field3)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinNestedStructUnion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinNestedStructUnion)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && !this.field1.Equal(that1.field1) {
		return false
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return false
	}
	if this.xxx_IsField2Set && !this.field2.Equal(that1.field2) {
		return false
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return false
	}
	if this.xxx_IsField3Set && !this.field3.Equal(that1.field3) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Tree) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Tree)
	if !ok {
		return fmt.Errorf("that is not of type *Tree")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Tree but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Treebut is not nil && this == nil")
	}
	if this.xxx_IsOrSet != that1.xxx_IsOrSet {
		return fmt.Errorf("that.or is not equal to this.or")
	}
	if this.xxx_IsOrSet && !this.or.Equal(that1.or) {
		return fmt.Errorf("or this(%v) Not Equal that(%v)", this.or, that1.or)
	}
	if this.xxx_IsAndSet != that1.xxx_IsAndSet {
		return fmt.Errorf("that.and is not equal to this.and")
	}
	if this.xxx_IsAndSet && !this.and.Equal(that1.and) {
		return fmt.Errorf("and this(%v) Not Equal that(%v)", this.and, that1.and)
	}
	if this.xxx_IsLeafSet != that1.xxx_IsLeafSet {
		return fmt.Errorf("that.leaf is not equal to this.leaf")
	}
	if this.xxx_IsLeafSet && !this.leaf.Equal(that1.leaf) {
		return fmt.Errorf("leaf this(%v) Not Equal that(%v)", this.leaf, that1.leaf)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Tree) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Tree)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsOrSet != that1.xxx_IsOrSet {
		return false
	}
	if this.xxx_IsOrSet && !this.or.Equal(that1.or) {
		return false
	}
	if this.xxx_IsAndSet != that1.xxx_IsAndSet {
		return false
	}
	if this.xxx_IsAndSet && !this.and.Equal(that1.and) {
		return false
	}
	if this.xxx_IsLeafSet != that1.xxx_IsLeafSet {
		return false
	}
	if this.xxx_IsLeafSet && !this.leaf.Equal(that1.leaf) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OrBranch) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OrBranch)
	if !ok {
		return fmt.Errorf("that is not of type *OrBranch")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OrBranch but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OrBranchbut is not nil && this == nil")
	}
	if this.xxx_IsLeftSet != that1.xxx_IsLeftSet {
		return fmt.Errorf("that.left is not equal to this.left")
	}
	if this.xxx_IsLeftSet && !this.left.Equal(that1.left) {
		return fmt.Errorf("left this(%v) Not Equal that(%v)", this.left, that1.left)
	}
	if this.xxx_IsRightSet != that1.xxx_IsRightSet {
		return fmt.Errorf("that.right is not equal to this.right")
	}
	if this.xxx_IsRightSet && !this.right.Equal(that1.right) {
		return fmt.Errorf("right this(%v) Not Equal that(%v)", this.right, that1.right)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OrBranch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrBranch)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsLeftSet != that1.xxx_IsLeftSet {
		return false
	}
	if this.xxx_IsLeftSet && !this.left.Equal(that1.left) {
		return false
	}
	if this.xxx_IsRightSet != that1.xxx_IsRightSet {
		return false
	}
	if this.xxx_IsRightSet && !this.right.Equal(that1.right) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AndBranch) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AndBranch)
	if !ok {
		return fmt.Errorf("that is not of type *AndBranch")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AndBranch but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AndBranchbut is not nil && this == nil")
	}
	if this.xxx_IsLeftSet != that1.xxx_IsLeftSet {
		return fmt.Errorf("that.left is not equal to this.left")
	}
	if this.xxx_IsLeftSet && !this.left.Equal(that1.left) {
		return fmt.Errorf("left this(%v) Not Equal that(%v)", this.left, that1.left)
	}
	if this.xxx_IsRightSet != that1.xxx_IsRightSet {
		return fmt.Errorf("that.right is not equal to this.right")
	}
	if this.xxx_IsRightSet && !this.right.Equal(that1.right) {
		return fmt.Errorf("right this(%v) Not Equal that(%v)", this.right, that1.right)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AndBranch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AndBranch)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsLeftSet != that1.xxx_IsLeftSet {
		return false
	}
	if this.xxx_IsLeftSet && !this.left.Equal(that1.left) {
		return false
	}
	if this.xxx_IsRightSet != that1.xxx_IsRightSet {
		return false
	}
	if this.xxx_IsRightSet && !this.right.Equal(that1.right) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Leaf) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Leaf)
	if !ok {
		return fmt.Errorf("that is not of type *Leaf")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Leaf but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Leafbut is not nil && this == nil")
	}
	if this.xxx_IsValueSet != that1.xxx_IsValueSet {
		return fmt.Errorf("that.value is not equal to this.value")
	}
	if this.xxx_IsValueSet && this.value != that1.value {
		return fmt.Errorf("value this(%v) Not Equal that(%v)", this.value, that1.value)
	}
	if this.xxx_IsStrValueSet != that1.xxx_IsStrValueSet {
		return fmt.Errorf("that.strValue is not equal to this.strValue")
	}
	if this.xxx_IsStrValueSet && this.strValue != that1.strValue {
		return fmt.Errorf("strValue this(%v) Not Equal that(%v)", this.strValue, that1.strValue)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Leaf) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Leaf)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsValueSet != that1.xxx_IsValueSet {
		return false
	}
	if this.xxx_IsValueSet && this.value != that1.value {
		return false
	}
	if this.xxx_IsStrValueSet != that1.xxx_IsStrValueSet {
		return false
	}
	if this.xxx_IsStrValueSet && this.strValue != that1.strValue {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeepTree) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeepTree)
	if !ok {
		return fmt.Errorf("that is not of type *DeepTree")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeepTree but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeepTreebut is not nil && this == nil")
	}
	if this.xxx_IsDownSet != that1.xxx_IsDownSet {
		return fmt.Errorf("that.down is not equal to this.down")
	}
	if this.xxx_IsDownSet && !this.down.Equal(that1.down) {
		return fmt.Errorf("down this(%v) Not Equal that(%v)", this.down, that1.down)
	}
	if this.xxx_IsAndSet != that1.xxx_IsAndSet {
		return fmt.Errorf("that.and is not equal to this.and")
	}
	if this.xxx_IsAndSet && !this.and.Equal(that1.and) {
		return fmt.Errorf("and this(%v) Not Equal that(%v)", this.and, that1.and)
	}
	if this.xxx_IsLeafSet != that1.xxx_IsLeafSet {
		return fmt.Errorf("that.leaf is not equal to this.leaf")
	}
	if this.xxx_IsLeafSet && !this.leaf.Equal(that1.leaf) {
		return fmt.Errorf("leaf this(%v) Not Equal that(%v)", this.leaf, that1.leaf)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeepTree) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeepTree)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsDownSet != that1.xxx_IsDownSet {
		return false
	}
	if this.xxx_IsDownSet && !this.down.Equal(that1.down) {
		return false
	}
	if this.xxx_IsAndSet != that1.xxx_IsAndSet {
		return false
	}
	if this.xxx_IsAndSet && !this.and.Equal(that1.and) {
		return false
	}
	if this.xxx_IsLeafSet != that1.xxx_IsLeafSet {
		return false
	}
	if this.xxx_IsLeafSet && !this.leaf.Equal(that1.leaf) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ADeepBranch) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ADeepBranch)
	if !ok {
		return fmt.Errorf("that is not of type *ADeepBranch")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ADeepBranch but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ADeepBranchbut is not nil && this == nil")
	}
	if this.xxx_IsDownSet != that1.xxx_IsDownSet {
		return fmt.Errorf("that.down is not equal to this.down")
	}
	if this.xxx_IsDownSet && !this.down.Equal(that1.down) {
		return fmt.Errorf("down this(%v) Not Equal that(%v)", this.down, that1.down)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ADeepBranch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ADeepBranch)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsDownSet != that1.xxx_IsDownSet {
		return false
	}
	if this.xxx_IsDownSet && !this.down.Equal(that1.down) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AndDeepBranch) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AndDeepBranch)
	if !ok {
		return fmt.Errorf("that is not of type *AndDeepBranch")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AndDeepBranch but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AndDeepBranchbut is not nil && this == nil")
	}
	if this.xxx_IsLeftSet != that1.xxx_IsLeftSet {
		return fmt.Errorf("that.left is not equal to this.left")
	}
	if this.xxx_IsLeftSet && !this.left.Equal(that1.left) {
		return fmt.Errorf("left this(%v) Not Equal that(%v)", this.left, that1.left)
	}
	if this.xxx_IsRightSet != that1.xxx_IsRightSet {
		return fmt.Errorf("that.right is not equal to this.right")
	}
	if this.xxx_IsRightSet && !this.right.Equal(that1.right) {
		return fmt.Errorf("right this(%v) Not Equal that(%v)", this.right, that1.right)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AndDeepBranch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AndDeepBranch)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsLeftSet != that1.xxx_IsLeftSet {
		return false
	}
	if this.xxx_IsLeftSet && !this.left.Equal(that1.left) {
		return false
	}
	if this.xxx_IsRightSet != that1.xxx_IsRightSet {
		return false
	}
	if this.xxx_IsRightSet && !this.right.Equal(that1.right) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeepLeaf) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeepLeaf)
	if !ok {
		return fmt.Errorf("that is not of type *DeepLeaf")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeepLeaf but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeepLeafbut is not nil && this == nil")
	}
	if this.xxx_IsTreeSet != that1.xxx_IsTreeSet {
		return fmt.Errorf("that.tree is not equal to this.tree")
	}
	if this.xxx_IsTreeSet && !this.tree.Equal(that1.tree) {
		return fmt.Errorf("tree this(%v) Not Equal that(%v)", this.tree, that1.tree)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeepLeaf) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeepLeaf)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsTreeSet != that1.xxx_IsTreeSet {
		return false
	}
	if this.xxx_IsTreeSet && !this.tree.Equal(that1.tree) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Nil) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Nil)
	if !ok {
		return fmt.Errorf("that is not of type *Nil")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Nil but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Nilbut is not nil && this == nil")
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Nil) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Nil)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NidOptEnum) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidOptEnum)
	if !ok {
		return fmt.Errorf("that is not of type *NidOptEnum")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidOptEnum but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidOptEnumbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidOptEnum) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidOptEnum)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinOptEnum) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinOptEnum)
	if !ok {
		return fmt.Errorf("that is not of type *NinOptEnum")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinOptEnum but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinOptEnumbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinOptEnum) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinOptEnum)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NidRepEnum) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NidRepEnum)
	if !ok {
		return fmt.Errorf("that is not of type *NidRepEnum")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NidRepEnum but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NidRepEnumbut is not nil && this == nil")
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return fmt.Errorf("field1 this[%v](%v) Not Equal that[%v](%v)", i, this.field1[i], i, that1.field1[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NidRepEnum) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NidRepEnum)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return false
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinRepEnum) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinRepEnum)
	if !ok {
		return fmt.Errorf("that is not of type *NinRepEnum")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinRepEnum but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinRepEnumbut is not nil && this == nil")
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return fmt.Errorf("field1 this[%v](%v) Not Equal that[%v](%v)", i, this.field1[i], i, that1.field1[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinRepEnum) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinRepEnum)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenField1 != that1.xxx_LenField1 {
		return false
	}
	for i := 0; i < this.xxx_LenField1; i++ {
		if this.field1[i] != that1.field1[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinOptEnumDefault) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinOptEnumDefault)
	if !ok {
		return fmt.Errorf("that is not of type *NinOptEnumDefault")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinOptEnumDefault but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinOptEnumDefaultbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinOptEnumDefault) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinOptEnumDefault)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AnotherNinOptEnum) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AnotherNinOptEnum)
	if !ok {
		return fmt.Errorf("that is not of type *AnotherNinOptEnum")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AnotherNinOptEnum but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AnotherNinOptEnumbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AnotherNinOptEnum) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AnotherNinOptEnum)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AnotherNinOptEnumDefault) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AnotherNinOptEnumDefault)
	if !ok {
		return fmt.Errorf("that is not of type *AnotherNinOptEnumDefault")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AnotherNinOptEnumDefault but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AnotherNinOptEnumDefaultbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AnotherNinOptEnumDefault) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AnotherNinOptEnumDefault)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Timer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Timer)
	if !ok {
		return fmt.Errorf("that is not of type *Timer")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Timer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Timerbut is not nil && this == nil")
	}
	if this.xxx_IsTime1Set != that1.xxx_IsTime1Set {
		return fmt.Errorf("that.time1 is not equal to this.time1")
	}
	if this.xxx_IsTime1Set && this.time1 != that1.time1 {
		return fmt.Errorf("time1 this(%v) Not Equal that(%v)", this.time1, that1.time1)
	}
	if this.xxx_IsTime2Set != that1.xxx_IsTime2Set {
		return fmt.Errorf("that.time2 is not equal to this.time2")
	}
	if this.xxx_IsTime2Set && this.time2 != that1.time2 {
		return fmt.Errorf("time2 this(%v) Not Equal that(%v)", this.time2, that1.time2)
	}
	if this.xxx_IsDataSet != that1.xxx_IsDataSet {
		return fmt.Errorf("that.data is not equal to this.data")
	}
	if this.xxx_IsDataSet && !bytes.Equal(this.data, that1.data) {
		return fmt.Errorf("data this(%v) Not Equal that(%v)", this.data, that1.data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Timer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Timer)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsTime1Set != that1.xxx_IsTime1Set {
		return false
	}
	if this.xxx_IsTime1Set && this.time1 != that1.time1 {
		return false
	}
	if this.xxx_IsTime2Set != that1.xxx_IsTime2Set {
		return false
	}
	if this.xxx_IsTime2Set && this.time2 != that1.time2 {
		return false
	}
	if this.xxx_IsDataSet != that1.xxx_IsDataSet {
		return false
	}
	if this.xxx_IsDataSet && !bytes.Equal(this.data, that1.data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MyExtendable) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MyExtendable)
	if !ok {
		return fmt.Errorf("that is not of type *MyExtendable")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MyExtendable but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MyExtendablebut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	for k, v := range this.XXX_extensions {
		if v2, ok := that1.XXX_extensions[k]; ok {
			if !v.Equal(&v2) {
				return fmt.Errorf("XXX_extensions this[%v](%v) Not Equal that[%v](%v)", k, this.XXX_extensions[k], k, that1.XXX_extensions[k])
			}
		} else {
			return fmt.Errorf("XXX_extensions[%v] Not In that", k)
		}
	}
	for k, _ := range that1.XXX_extensions {
		if _, ok := this.XXX_extensions[k]; !ok {
			return fmt.Errorf("XXX_extensions[%v] Not In this", k)
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *MyExtendable) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MyExtendable)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	for k, v := range this.XXX_extensions {
		if v2, ok := that1.XXX_extensions[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range that1.XXX_extensions {
		if _, ok := this.XXX_extensions[k]; !ok {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OtherExtenable) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OtherExtenable)
	if !ok {
		return fmt.Errorf("that is not of type *OtherExtenable")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OtherExtenable but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OtherExtenablebut is not nil && this == nil")
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return fmt.Errorf("field2 this(%v) Not Equal that(%v)", this.field2, that1.field2)
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return fmt.Errorf("field13 this(%v) Not Equal that(%v)", this.field13, that1.field13)
	}
	if this.xxx_IsMSet != that1.xxx_IsMSet {
		return fmt.Errorf("that.m is not equal to this.m")
	}
	if this.xxx_IsMSet && !this.m.Equal(that1.m) {
		return fmt.Errorf("m this(%v) Not Equal that(%v)", this.m, that1.m)
	}
	for k, v := range this.XXX_extensions {
		if v2, ok := that1.XXX_extensions[k]; ok {
			if !v.Equal(&v2) {
				return fmt.Errorf("XXX_extensions this[%v](%v) Not Equal that[%v](%v)", k, this.XXX_extensions[k], k, that1.XXX_extensions[k])
			}
		} else {
			return fmt.Errorf("XXX_extensions[%v] Not In that", k)
		}
	}
	for k, _ := range that1.XXX_extensions {
		if _, ok := this.XXX_extensions[k]; !ok {
			return fmt.Errorf("XXX_extensions[%v] Not In this", k)
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OtherExtenable) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OtherExtenable)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return false
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return false
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return false
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return false
	}
	if this.xxx_IsMSet != that1.xxx_IsMSet {
		return false
	}
	if this.xxx_IsMSet && !this.m.Equal(that1.m) {
		return false
	}
	for k, v := range this.XXX_extensions {
		if v2, ok := that1.XXX_extensions[k]; ok {
			if !v.Equal(&v2) {
				return false
			}
		} else {
			return false
		}
	}
	for k, _ := range that1.XXX_extensions {
		if _, ok := this.XXX_extensions[k]; !ok {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NestedDefinition) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NestedDefinition)
	if !ok {
		return fmt.Errorf("that is not of type *NestedDefinition")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NestedDefinition but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NestedDefinitionbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_IsEnumFieldSet != that1.xxx_IsEnumFieldSet {
		return fmt.Errorf("that.enumField is not equal to this.enumField")
	}
	if this.xxx_IsEnumFieldSet && this.enumField != that1.enumField {
		return fmt.Errorf("enumField this(%v) Not Equal that(%v)", this.enumField, that1.enumField)
	}
	if this.xxx_IsNNMSet != that1.xxx_IsNNMSet {
		return fmt.Errorf("that.nNM is not equal to this.nNM")
	}
	if this.xxx_IsNNMSet && !this.nNM.Equal(that1.nNM) {
		return fmt.Errorf("nNM this(%v) Not Equal that(%v)", this.nNM, that1.nNM)
	}
	if this.xxx_IsNMSet != that1.xxx_IsNMSet {
		return fmt.Errorf("that.nM is not equal to this.nM")
	}
	if this.xxx_IsNMSet && !this.nM.Equal(that1.nM) {
		return fmt.Errorf("nM this(%v) Not Equal that(%v)", this.nM, that1.nM)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NestedDefinition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NestedDefinition)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if this.xxx_IsEnumFieldSet != that1.xxx_IsEnumFieldSet {
		return false
	}
	if this.xxx_IsEnumFieldSet && this.enumField != that1.enumField {
		return false
	}
	if this.xxx_IsNNMSet != that1.xxx_IsNNMSet {
		return false
	}
	if this.xxx_IsNNMSet && !this.nNM.Equal(that1.nNM) {
		return false
	}
	if this.xxx_IsNMSet != that1.xxx_IsNMSet {
		return false
	}
	if this.xxx_IsNMSet && !this.nM.Equal(that1.nM) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NestedDefinition_NestedMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NestedDefinition_NestedMessage)
	if !ok {
		return fmt.Errorf("that is not of type *NestedDefinition_NestedMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NestedDefinition_NestedMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NestedDefinition_NestedMessagebut is not nil && this == nil")
	}
	if this.xxx_IsNestedField1Set != that1.xxx_IsNestedField1Set {
		return fmt.Errorf("that.nestedField1 is not equal to this.nestedField1")
	}
	if this.xxx_IsNestedField1Set && this.nestedField1 != that1.nestedField1 {
		return fmt.Errorf("nestedField1 this(%v) Not Equal that(%v)", this.nestedField1, that1.nestedField1)
	}
	if this.xxx_IsNNMSet != that1.xxx_IsNNMSet {
		return fmt.Errorf("that.nNM is not equal to this.nNM")
	}
	if this.xxx_IsNNMSet && !this.nNM.Equal(that1.nNM) {
		return fmt.Errorf("nNM this(%v) Not Equal that(%v)", this.nNM, that1.nNM)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NestedDefinition_NestedMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NestedDefinition_NestedMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsNestedField1Set != that1.xxx_IsNestedField1Set {
		return false
	}
	if this.xxx_IsNestedField1Set && this.nestedField1 != that1.nestedField1 {
		return false
	}
	if this.xxx_IsNNMSet != that1.xxx_IsNNMSet {
		return false
	}
	if this.xxx_IsNNMSet && !this.nNM.Equal(that1.nNM) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NestedDefinition_NestedMessage_NestedNestedMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NestedDefinition_NestedMessage_NestedNestedMsg)
	if !ok {
		return fmt.Errorf("that is not of type *NestedDefinition_NestedMessage_NestedNestedMsg")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NestedDefinition_NestedMessage_NestedNestedMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NestedDefinition_NestedMessage_NestedNestedMsgbut is not nil && this == nil")
	}
	if this.xxx_IsNestedNestedField1Set != that1.xxx_IsNestedNestedField1Set {
		return fmt.Errorf("that.nestedNestedField1 is not equal to this.nestedNestedField1")
	}
	if this.xxx_IsNestedNestedField1Set && this.nestedNestedField1 != that1.nestedNestedField1 {
		return fmt.Errorf("nestedNestedField1 this(%v) Not Equal that(%v)", this.nestedNestedField1, that1.nestedNestedField1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NestedDefinition_NestedMessage_NestedNestedMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NestedDefinition_NestedMessage_NestedNestedMsg)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsNestedNestedField1Set != that1.xxx_IsNestedNestedField1Set {
		return false
	}
	if this.xxx_IsNestedNestedField1Set && this.nestedNestedField1 != that1.nestedNestedField1 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NestedScope) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NestedScope)
	if !ok {
		return fmt.Errorf("that is not of type *NestedScope")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NestedScope but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NestedScopebut is not nil && this == nil")
	}
	if this.xxx_IsASet != that1.xxx_IsASet {
		return fmt.Errorf("that.a is not equal to this.a")
	}
	if this.xxx_IsASet && !this.a.Equal(that1.a) {
		return fmt.Errorf("a this(%v) Not Equal that(%v)", this.a, that1.a)
	}
	if this.xxx_IsBSet != that1.xxx_IsBSet {
		return fmt.Errorf("that.b is not equal to this.b")
	}
	if this.xxx_IsBSet && this.b != that1.b {
		return fmt.Errorf("b this(%v) Not Equal that(%v)", this.b, that1.b)
	}
	if this.xxx_IsCSet != that1.xxx_IsCSet {
		return fmt.Errorf("that.c is not equal to this.c")
	}
	if this.xxx_IsCSet && !this.c.Equal(that1.c) {
		return fmt.Errorf("c this(%v) Not Equal that(%v)", this.c, that1.c)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NestedScope) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NestedScope)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsASet != that1.xxx_IsASet {
		return false
	}
	if this.xxx_IsASet && !this.a.Equal(that1.a) {
		return false
	}
	if this.xxx_IsBSet != that1.xxx_IsBSet {
		return false
	}
	if this.xxx_IsBSet && this.b != that1.b {
		return false
	}
	if this.xxx_IsCSet != that1.xxx_IsCSet {
		return false
	}
	if this.xxx_IsCSet && !this.c.Equal(that1.c) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NinOptNativeDefault) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NinOptNativeDefault)
	if !ok {
		return fmt.Errorf("that is not of type *NinOptNativeDefault")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NinOptNativeDefault but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NinOptNativeDefaultbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return fmt.Errorf("that.field2 is not equal to this.field2")
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return fmt.Errorf("field2 this(%v) Not Equal that(%v)", this.field2, that1.field2)
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return fmt.Errorf("that.field3 is not equal to this.field3")
	}
	if this.xxx_IsField3Set && this.field3 != that1.field3 {
		return fmt.Errorf("field3 this(%v) Not Equal that(%v)", this.field3, that1.field3)
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return fmt.Errorf("that.field4 is not equal to this.field4")
	}
	if this.xxx_IsField4Set && this.field4 != that1.field4 {
		return fmt.Errorf("field4 this(%v) Not Equal that(%v)", this.field4, that1.field4)
	}
	if this.xxx_IsField5Set != that1.xxx_IsField5Set {
		return fmt.Errorf("that.field5 is not equal to this.field5")
	}
	if this.xxx_IsField5Set && this.field5 != that1.field5 {
		return fmt.Errorf("field5 this(%v) Not Equal that(%v)", this.field5, that1.field5)
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return fmt.Errorf("that.field6 is not equal to this.field6")
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return fmt.Errorf("field6 this(%v) Not Equal that(%v)", this.field6, that1.field6)
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return fmt.Errorf("that.field7 is not equal to this.field7")
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return fmt.Errorf("field7 this(%v) Not Equal that(%v)", this.field7, that1.field7)
	}
	if this.xxx_IsField8Set != that1.xxx_IsField8Set {
		return fmt.Errorf("that.field8 is not equal to this.field8")
	}
	if this.xxx_IsField8Set && this.field8 != that1.field8 {
		return fmt.Errorf("field8 this(%v) Not Equal that(%v)", this.field8, that1.field8)
	}
	if this.xxx_IsField9Set != that1.xxx_IsField9Set {
		return fmt.Errorf("that.field9 is not equal to this.field9")
	}
	if this.xxx_IsField9Set && this.field9 != that1.field9 {
		return fmt.Errorf("field9 this(%v) Not Equal that(%v)", this.field9, that1.field9)
	}
	if this.xxx_IsField10Set != that1.xxx_IsField10Set {
		return fmt.Errorf("that.field10 is not equal to this.field10")
	}
	if this.xxx_IsField10Set && this.field10 != that1.field10 {
		return fmt.Errorf("field10 this(%v) Not Equal that(%v)", this.field10, that1.field10)
	}
	if this.xxx_IsField11Set != that1.xxx_IsField11Set {
		return fmt.Errorf("that.field11 is not equal to this.field11")
	}
	if this.xxx_IsField11Set && this.field11 != that1.field11 {
		return fmt.Errorf("field11 this(%v) Not Equal that(%v)", this.field11, that1.field11)
	}
	if this.xxx_IsField12Set != that1.xxx_IsField12Set {
		return fmt.Errorf("that.field12 is not equal to this.field12")
	}
	if this.xxx_IsField12Set && this.field12 != that1.field12 {
		return fmt.Errorf("field12 this(%v) Not Equal that(%v)", this.field12, that1.field12)
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return fmt.Errorf("that.field13 is not equal to this.field13")
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return fmt.Errorf("field13 this(%v) Not Equal that(%v)", this.field13, that1.field13)
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return fmt.Errorf("that.field14 is not equal to this.field14")
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return fmt.Errorf("field14 this(%v) Not Equal that(%v)", this.field14, that1.field14)
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return fmt.Errorf("that.field15 is not equal to this.field15")
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return fmt.Errorf("field15 this(%v) Not Equal that(%v)", this.field15, that1.field15)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NinOptNativeDefault) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NinOptNativeDefault)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if this.xxx_IsField2Set != that1.xxx_IsField2Set {
		return false
	}
	if this.xxx_IsField2Set && this.field2 != that1.field2 {
		return false
	}
	if this.xxx_IsField3Set != that1.xxx_IsField3Set {
		return false
	}
	if this.xxx_IsField3Set && this.field3 != that1.field3 {
		return false
	}
	if this.xxx_IsField4Set != that1.xxx_IsField4Set {
		return false
	}
	if this.xxx_IsField4Set && this.field4 != that1.field4 {
		return false
	}
	if this.xxx_IsField5Set != that1.xxx_IsField5Set {
		return false
	}
	if this.xxx_IsField5Set && this.field5 != that1.field5 {
		return false
	}
	if this.xxx_IsField6Set != that1.xxx_IsField6Set {
		return false
	}
	if this.xxx_IsField6Set && this.field6 != that1.field6 {
		return false
	}
	if this.xxx_IsField7Set != that1.xxx_IsField7Set {
		return false
	}
	if this.xxx_IsField7Set && this.field7 != that1.field7 {
		return false
	}
	if this.xxx_IsField8Set != that1.xxx_IsField8Set {
		return false
	}
	if this.xxx_IsField8Set && this.field8 != that1.field8 {
		return false
	}
	if this.xxx_IsField9Set != that1.xxx_IsField9Set {
		return false
	}
	if this.xxx_IsField9Set && this.field9 != that1.field9 {
		return false
	}
	if this.xxx_IsField10Set != that1.xxx_IsField10Set {
		return false
	}
	if this.xxx_IsField10Set && this.field10 != that1.field10 {
		return false
	}
	if this.xxx_IsField11Set != that1.xxx_IsField11Set {
		return false
	}
	if this.xxx_IsField11Set && this.field11 != that1.field11 {
		return false
	}
	if this.xxx_IsField12Set != that1.xxx_IsField12Set {
		return false
	}
	if this.xxx_IsField12Set && this.field12 != that1.field12 {
		return false
	}
	if this.xxx_IsField13Set != that1.xxx_IsField13Set {
		return false
	}
	if this.xxx_IsField13Set && this.field13 != that1.field13 {
		return false
	}
	if this.xxx_IsField14Set != that1.xxx_IsField14Set {
		return false
	}
	if this.xxx_IsField14Set && this.field14 != that1.field14 {
		return false
	}
	if this.xxx_IsField15Set != that1.xxx_IsField15Set {
		return false
	}
	if this.xxx_IsField15Set && !bytes.Equal(this.field15, that1.field15) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomContainer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomContainer)
	if !ok {
		return fmt.Errorf("that is not of type *CustomContainer")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomContainer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomContainerbut is not nil && this == nil")
	}
	if this.xxx_IsCustomStructSet != that1.xxx_IsCustomStructSet {
		return fmt.Errorf("that.customStruct is not equal to this.customStruct")
	}
	if this.xxx_IsCustomStructSet && !this.customStruct.Equal(that1.customStruct) {
		return fmt.Errorf("customStruct this(%v) Not Equal that(%v)", this.customStruct, that1.customStruct)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomContainer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomContainer)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsCustomStructSet != that1.xxx_IsCustomStructSet {
		return false
	}
	if this.xxx_IsCustomStructSet && !this.customStruct.Equal(that1.customStruct) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomNameNidOptNative) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomNameNidOptNative)
	if !ok {
		return fmt.Errorf("that is not of type *CustomNameNidOptNative")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomNameNidOptNative but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomNameNidOptNativebut is not nil && this == nil")
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return fmt.Errorf("that.fieldA is not equal to this.fieldA")
	}
	if this.xxx_IsFieldASet && this.fieldA != that1.fieldA {
		return fmt.Errorf("fieldA this(%v) Not Equal that(%v)", this.fieldA, that1.fieldA)
	}
	if this.xxx_IsFieldBSet != that1.xxx_IsFieldBSet {
		return fmt.Errorf("that.fieldB is not equal to this.fieldB")
	}
	if this.xxx_IsFieldBSet && this.fieldB != that1.fieldB {
		return fmt.Errorf("fieldB this(%v) Not Equal that(%v)", this.fieldB, that1.fieldB)
	}
	if this.xxx_IsFieldCSet != that1.xxx_IsFieldCSet {
		return fmt.Errorf("that.fieldC is not equal to this.fieldC")
	}
	if this.xxx_IsFieldCSet && this.fieldC != that1.fieldC {
		return fmt.Errorf("fieldC this(%v) Not Equal that(%v)", this.fieldC, that1.fieldC)
	}
	if this.xxx_IsFieldDSet != that1.xxx_IsFieldDSet {
		return fmt.Errorf("that.fieldD is not equal to this.fieldD")
	}
	if this.xxx_IsFieldDSet && this.fieldD != that1.fieldD {
		return fmt.Errorf("fieldD this(%v) Not Equal that(%v)", this.fieldD, that1.fieldD)
	}
	if this.xxx_IsFieldESet != that1.xxx_IsFieldESet {
		return fmt.Errorf("that.fieldE is not equal to this.fieldE")
	}
	if this.xxx_IsFieldESet && this.fieldE != that1.fieldE {
		return fmt.Errorf("fieldE this(%v) Not Equal that(%v)", this.fieldE, that1.fieldE)
	}
	if this.xxx_IsFieldFSet != that1.xxx_IsFieldFSet {
		return fmt.Errorf("that.fieldF is not equal to this.fieldF")
	}
	if this.xxx_IsFieldFSet && this.fieldF != that1.fieldF {
		return fmt.Errorf("fieldF this(%v) Not Equal that(%v)", this.fieldF, that1.fieldF)
	}
	if this.xxx_IsFieldGSet != that1.xxx_IsFieldGSet {
		return fmt.Errorf("that.fieldG is not equal to this.fieldG")
	}
	if this.xxx_IsFieldGSet && this.fieldG != that1.fieldG {
		return fmt.Errorf("fieldG this(%v) Not Equal that(%v)", this.fieldG, that1.fieldG)
	}
	if this.xxx_IsFieldHSet != that1.xxx_IsFieldHSet {
		return fmt.Errorf("that.fieldH is not equal to this.fieldH")
	}
	if this.xxx_IsFieldHSet && this.fieldH != that1.fieldH {
		return fmt.Errorf("fieldH this(%v) Not Equal that(%v)", this.fieldH, that1.fieldH)
	}
	if this.xxx_IsFieldISet != that1.xxx_IsFieldISet {
		return fmt.Errorf("that.fieldI is not equal to this.fieldI")
	}
	if this.xxx_IsFieldISet && this.fieldI != that1.fieldI {
		return fmt.Errorf("fieldI this(%v) Not Equal that(%v)", this.fieldI, that1.fieldI)
	}
	if this.xxx_IsFieldJSet != that1.xxx_IsFieldJSet {
		return fmt.Errorf("that.fieldJ is not equal to this.fieldJ")
	}
	if this.xxx_IsFieldJSet && this.fieldJ != that1.fieldJ {
		return fmt.Errorf("fieldJ this(%v) Not Equal that(%v)", this.fieldJ, that1.fieldJ)
	}
	if this.xxx_IsFieldKSet != that1.xxx_IsFieldKSet {
		return fmt.Errorf("that.fieldK is not equal to this.fieldK")
	}
	if this.xxx_IsFieldKSet && this.fieldK != that1.fieldK {
		return fmt.Errorf("fieldK this(%v) Not Equal that(%v)", this.fieldK, that1.fieldK)
	}
	if this.xxx_IsFieldLSet != that1.xxx_IsFieldLSet {
		return fmt.Errorf("that.fieldL is not equal to this.fieldL")
	}
	if this.xxx_IsFieldLSet && this.fieldL != that1.fieldL {
		return fmt.Errorf("fieldL this(%v) Not Equal that(%v)", this.fieldL, that1.fieldL)
	}
	if this.xxx_IsFieldMSet != that1.xxx_IsFieldMSet {
		return fmt.Errorf("that.fieldM is not equal to this.fieldM")
	}
	if this.xxx_IsFieldMSet && this.fieldM != that1.fieldM {
		return fmt.Errorf("fieldM this(%v) Not Equal that(%v)", this.fieldM, that1.fieldM)
	}
	if this.xxx_IsFieldNSet != that1.xxx_IsFieldNSet {
		return fmt.Errorf("that.fieldN is not equal to this.fieldN")
	}
	if this.xxx_IsFieldNSet && this.fieldN != that1.fieldN {
		return fmt.Errorf("fieldN this(%v) Not Equal that(%v)", this.fieldN, that1.fieldN)
	}
	if this.xxx_IsFieldOSet != that1.xxx_IsFieldOSet {
		return fmt.Errorf("that.fieldO is not equal to this.fieldO")
	}
	if this.xxx_IsFieldOSet && !bytes.Equal(this.fieldO, that1.fieldO) {
		return fmt.Errorf("fieldO this(%v) Not Equal that(%v)", this.fieldO, that1.fieldO)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomNameNidOptNative) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomNameNidOptNative)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return false
	}
	if this.xxx_IsFieldASet && this.fieldA != that1.fieldA {
		return false
	}
	if this.xxx_IsFieldBSet != that1.xxx_IsFieldBSet {
		return false
	}
	if this.xxx_IsFieldBSet && this.fieldB != that1.fieldB {
		return false
	}
	if this.xxx_IsFieldCSet != that1.xxx_IsFieldCSet {
		return false
	}
	if this.xxx_IsFieldCSet && this.fieldC != that1.fieldC {
		return false
	}
	if this.xxx_IsFieldDSet != that1.xxx_IsFieldDSet {
		return false
	}
	if this.xxx_IsFieldDSet && this.fieldD != that1.fieldD {
		return false
	}
	if this.xxx_IsFieldESet != that1.xxx_IsFieldESet {
		return false
	}
	if this.xxx_IsFieldESet && this.fieldE != that1.fieldE {
		return false
	}
	if this.xxx_IsFieldFSet != that1.xxx_IsFieldFSet {
		return false
	}
	if this.xxx_IsFieldFSet && this.fieldF != that1.fieldF {
		return false
	}
	if this.xxx_IsFieldGSet != that1.xxx_IsFieldGSet {
		return false
	}
	if this.xxx_IsFieldGSet && this.fieldG != that1.fieldG {
		return false
	}
	if this.xxx_IsFieldHSet != that1.xxx_IsFieldHSet {
		return false
	}
	if this.xxx_IsFieldHSet && this.fieldH != that1.fieldH {
		return false
	}
	if this.xxx_IsFieldISet != that1.xxx_IsFieldISet {
		return false
	}
	if this.xxx_IsFieldISet && this.fieldI != that1.fieldI {
		return false
	}
	if this.xxx_IsFieldJSet != that1.xxx_IsFieldJSet {
		return false
	}
	if this.xxx_IsFieldJSet && this.fieldJ != that1.fieldJ {
		return false
	}
	if this.xxx_IsFieldKSet != that1.xxx_IsFieldKSet {
		return false
	}
	if this.xxx_IsFieldKSet && this.fieldK != that1.fieldK {
		return false
	}
	if this.xxx_IsFieldLSet != that1.xxx_IsFieldLSet {
		return false
	}
	if this.xxx_IsFieldLSet && this.fieldL != that1.fieldL {
		return false
	}
	if this.xxx_IsFieldMSet != that1.xxx_IsFieldMSet {
		return false
	}
	if this.xxx_IsFieldMSet && this.fieldM != that1.fieldM {
		return false
	}
	if this.xxx_IsFieldNSet != that1.xxx_IsFieldNSet {
		return false
	}
	if this.xxx_IsFieldNSet && this.fieldN != that1.fieldN {
		return false
	}
	if this.xxx_IsFieldOSet != that1.xxx_IsFieldOSet {
		return false
	}
	if this.xxx_IsFieldOSet && !bytes.Equal(this.fieldO, that1.fieldO) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomNameNinOptNative) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomNameNinOptNative)
	if !ok {
		return fmt.Errorf("that is not of type *CustomNameNinOptNative")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomNameNinOptNative but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomNameNinOptNativebut is not nil && this == nil")
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return fmt.Errorf("that.fieldA is not equal to this.fieldA")
	}
	if this.xxx_IsFieldASet && this.fieldA != that1.fieldA {
		return fmt.Errorf("fieldA this(%v) Not Equal that(%v)", this.fieldA, that1.fieldA)
	}
	if this.xxx_IsFieldBSet != that1.xxx_IsFieldBSet {
		return fmt.Errorf("that.fieldB is not equal to this.fieldB")
	}
	if this.xxx_IsFieldBSet && this.fieldB != that1.fieldB {
		return fmt.Errorf("fieldB this(%v) Not Equal that(%v)", this.fieldB, that1.fieldB)
	}
	if this.xxx_IsFieldCSet != that1.xxx_IsFieldCSet {
		return fmt.Errorf("that.fieldC is not equal to this.fieldC")
	}
	if this.xxx_IsFieldCSet && this.fieldC != that1.fieldC {
		return fmt.Errorf("fieldC this(%v) Not Equal that(%v)", this.fieldC, that1.fieldC)
	}
	if this.xxx_IsFieldDSet != that1.xxx_IsFieldDSet {
		return fmt.Errorf("that.fieldD is not equal to this.fieldD")
	}
	if this.xxx_IsFieldDSet && this.fieldD != that1.fieldD {
		return fmt.Errorf("fieldD this(%v) Not Equal that(%v)", this.fieldD, that1.fieldD)
	}
	if this.xxx_IsFieldESet != that1.xxx_IsFieldESet {
		return fmt.Errorf("that.fieldE is not equal to this.fieldE")
	}
	if this.xxx_IsFieldESet && this.fieldE != that1.fieldE {
		return fmt.Errorf("fieldE this(%v) Not Equal that(%v)", this.fieldE, that1.fieldE)
	}
	if this.xxx_IsFieldFSet != that1.xxx_IsFieldFSet {
		return fmt.Errorf("that.fieldF is not equal to this.fieldF")
	}
	if this.xxx_IsFieldFSet && this.fieldF != that1.fieldF {
		return fmt.Errorf("fieldF this(%v) Not Equal that(%v)", this.fieldF, that1.fieldF)
	}
	if this.xxx_IsFieldGSet != that1.xxx_IsFieldGSet {
		return fmt.Errorf("that.fieldG is not equal to this.fieldG")
	}
	if this.xxx_IsFieldGSet && this.fieldG != that1.fieldG {
		return fmt.Errorf("fieldG this(%v) Not Equal that(%v)", this.fieldG, that1.fieldG)
	}
	if this.xxx_IsFieldHSet != that1.xxx_IsFieldHSet {
		return fmt.Errorf("that.fieldH is not equal to this.fieldH")
	}
	if this.xxx_IsFieldHSet && this.fieldH != that1.fieldH {
		return fmt.Errorf("fieldH this(%v) Not Equal that(%v)", this.fieldH, that1.fieldH)
	}
	if this.xxx_IsFieldISet != that1.xxx_IsFieldISet {
		return fmt.Errorf("that.fieldI is not equal to this.fieldI")
	}
	if this.xxx_IsFieldISet && this.fieldI != that1.fieldI {
		return fmt.Errorf("fieldI this(%v) Not Equal that(%v)", this.fieldI, that1.fieldI)
	}
	if this.xxx_IsFieldJSet != that1.xxx_IsFieldJSet {
		return fmt.Errorf("that.fieldJ is not equal to this.fieldJ")
	}
	if this.xxx_IsFieldJSet && this.fieldJ != that1.fieldJ {
		return fmt.Errorf("fieldJ this(%v) Not Equal that(%v)", this.fieldJ, that1.fieldJ)
	}
	if this.xxx_IsFieldKSet != that1.xxx_IsFieldKSet {
		return fmt.Errorf("that.fieldK is not equal to this.fieldK")
	}
	if this.xxx_IsFieldKSet && this.fieldK != that1.fieldK {
		return fmt.Errorf("fieldK this(%v) Not Equal that(%v)", this.fieldK, that1.fieldK)
	}
	if this.xxx_IsFielLSet != that1.xxx_IsFielLSet {
		return fmt.Errorf("that.fielL is not equal to this.fielL")
	}
	if this.xxx_IsFielLSet && this.fielL != that1.fielL {
		return fmt.Errorf("fielL this(%v) Not Equal that(%v)", this.fielL, that1.fielL)
	}
	if this.xxx_IsFieldMSet != that1.xxx_IsFieldMSet {
		return fmt.Errorf("that.fieldM is not equal to this.fieldM")
	}
	if this.xxx_IsFieldMSet && this.fieldM != that1.fieldM {
		return fmt.Errorf("fieldM this(%v) Not Equal that(%v)", this.fieldM, that1.fieldM)
	}
	if this.xxx_IsFieldNSet != that1.xxx_IsFieldNSet {
		return fmt.Errorf("that.fieldN is not equal to this.fieldN")
	}
	if this.xxx_IsFieldNSet && this.fieldN != that1.fieldN {
		return fmt.Errorf("fieldN this(%v) Not Equal that(%v)", this.fieldN, that1.fieldN)
	}
	if this.xxx_IsFieldOSet != that1.xxx_IsFieldOSet {
		return fmt.Errorf("that.fieldO is not equal to this.fieldO")
	}
	if this.xxx_IsFieldOSet && !bytes.Equal(this.fieldO, that1.fieldO) {
		return fmt.Errorf("fieldO this(%v) Not Equal that(%v)", this.fieldO, that1.fieldO)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomNameNinOptNative) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomNameNinOptNative)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return false
	}
	if this.xxx_IsFieldASet && this.fieldA != that1.fieldA {
		return false
	}
	if this.xxx_IsFieldBSet != that1.xxx_IsFieldBSet {
		return false
	}
	if this.xxx_IsFieldBSet && this.fieldB != that1.fieldB {
		return false
	}
	if this.xxx_IsFieldCSet != that1.xxx_IsFieldCSet {
		return false
	}
	if this.xxx_IsFieldCSet && this.fieldC != that1.fieldC {
		return false
	}
	if this.xxx_IsFieldDSet != that1.xxx_IsFieldDSet {
		return false
	}
	if this.xxx_IsFieldDSet && this.fieldD != that1.fieldD {
		return false
	}
	if this.xxx_IsFieldESet != that1.xxx_IsFieldESet {
		return false
	}
	if this.xxx_IsFieldESet && this.fieldE != that1.fieldE {
		return false
	}
	if this.xxx_IsFieldFSet != that1.xxx_IsFieldFSet {
		return false
	}
	if this.xxx_IsFieldFSet && this.fieldF != that1.fieldF {
		return false
	}
	if this.xxx_IsFieldGSet != that1.xxx_IsFieldGSet {
		return false
	}
	if this.xxx_IsFieldGSet && this.fieldG != that1.fieldG {
		return false
	}
	if this.xxx_IsFieldHSet != that1.xxx_IsFieldHSet {
		return false
	}
	if this.xxx_IsFieldHSet && this.fieldH != that1.fieldH {
		return false
	}
	if this.xxx_IsFieldISet != that1.xxx_IsFieldISet {
		return false
	}
	if this.xxx_IsFieldISet && this.fieldI != that1.fieldI {
		return false
	}
	if this.xxx_IsFieldJSet != that1.xxx_IsFieldJSet {
		return false
	}
	if this.xxx_IsFieldJSet && this.fieldJ != that1.fieldJ {
		return false
	}
	if this.xxx_IsFieldKSet != that1.xxx_IsFieldKSet {
		return false
	}
	if this.xxx_IsFieldKSet && this.fieldK != that1.fieldK {
		return false
	}
	if this.xxx_IsFielLSet != that1.xxx_IsFielLSet {
		return false
	}
	if this.xxx_IsFielLSet && this.fielL != that1.fielL {
		return false
	}
	if this.xxx_IsFieldMSet != that1.xxx_IsFieldMSet {
		return false
	}
	if this.xxx_IsFieldMSet && this.fieldM != that1.fieldM {
		return false
	}
	if this.xxx_IsFieldNSet != that1.xxx_IsFieldNSet {
		return false
	}
	if this.xxx_IsFieldNSet && this.fieldN != that1.fieldN {
		return false
	}
	if this.xxx_IsFieldOSet != that1.xxx_IsFieldOSet {
		return false
	}
	if this.xxx_IsFieldOSet && !bytes.Equal(this.fieldO, that1.fieldO) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomNameNinRepNative) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomNameNinRepNative)
	if !ok {
		return fmt.Errorf("that is not of type *CustomNameNinRepNative")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomNameNinRepNative but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomNameNinRepNativebut is not nil && this == nil")
	}
	if this.xxx_LenFieldA != that1.xxx_LenFieldA {
		return fmt.Errorf("that.fieldA is not equal to this.fieldA")
	}
	for i := 0; i < this.xxx_LenFieldA; i++ {
		if this.fieldA[i] != that1.fieldA[i] {
			return fmt.Errorf("fieldA this[%v](%v) Not Equal that[%v](%v)", i, this.fieldA[i], i, that1.fieldA[i])
		}
	}
	if this.xxx_LenFieldB != that1.xxx_LenFieldB {
		return fmt.Errorf("that.fieldB is not equal to this.fieldB")
	}
	for i := 0; i < this.xxx_LenFieldB; i++ {
		if this.fieldB[i] != that1.fieldB[i] {
			return fmt.Errorf("fieldB this[%v](%v) Not Equal that[%v](%v)", i, this.fieldB[i], i, that1.fieldB[i])
		}
	}
	if this.xxx_LenFieldC != that1.xxx_LenFieldC {
		return fmt.Errorf("that.fieldC is not equal to this.fieldC")
	}
	for i := 0; i < this.xxx_LenFieldC; i++ {
		if this.fieldC[i] != that1.fieldC[i] {
			return fmt.Errorf("fieldC this[%v](%v) Not Equal that[%v](%v)", i, this.fieldC[i], i, that1.fieldC[i])
		}
	}
	if this.xxx_LenFieldD != that1.xxx_LenFieldD {
		return fmt.Errorf("that.fieldD is not equal to this.fieldD")
	}
	for i := 0; i < this.xxx_LenFieldD; i++ {
		if this.fieldD[i] != that1.fieldD[i] {
			return fmt.Errorf("fieldD this[%v](%v) Not Equal that[%v](%v)", i, this.fieldD[i], i, that1.fieldD[i])
		}
	}
	if this.xxx_LenFieldE != that1.xxx_LenFieldE {
		return fmt.Errorf("that.fieldE is not equal to this.fieldE")
	}
	for i := 0; i < this.xxx_LenFieldE; i++ {
		if this.fieldE[i] != that1.fieldE[i] {
			return fmt.Errorf("fieldE this[%v](%v) Not Equal that[%v](%v)", i, this.fieldE[i], i, that1.fieldE[i])
		}
	}
	if this.xxx_LenFieldF != that1.xxx_LenFieldF {
		return fmt.Errorf("that.fieldF is not equal to this.fieldF")
	}
	for i := 0; i < this.xxx_LenFieldF; i++ {
		if this.fieldF[i] != that1.fieldF[i] {
			return fmt.Errorf("fieldF this[%v](%v) Not Equal that[%v](%v)", i, this.fieldF[i], i, that1.fieldF[i])
		}
	}
	if this.xxx_LenFieldG != that1.xxx_LenFieldG {
		return fmt.Errorf("that.fieldG is not equal to this.fieldG")
	}
	for i := 0; i < this.xxx_LenFieldG; i++ {
		if this.fieldG[i] != that1.fieldG[i] {
			return fmt.Errorf("fieldG this[%v](%v) Not Equal that[%v](%v)", i, this.fieldG[i], i, that1.fieldG[i])
		}
	}
	if this.xxx_LenFieldH != that1.xxx_LenFieldH {
		return fmt.Errorf("that.fieldH is not equal to this.fieldH")
	}
	for i := 0; i < this.xxx_LenFieldH; i++ {
		if this.fieldH[i] != that1.fieldH[i] {
			return fmt.Errorf("fieldH this[%v](%v) Not Equal that[%v](%v)", i, this.fieldH[i], i, that1.fieldH[i])
		}
	}
	if this.xxx_LenFieldI != that1.xxx_LenFieldI {
		return fmt.Errorf("that.fieldI is not equal to this.fieldI")
	}
	for i := 0; i < this.xxx_LenFieldI; i++ {
		if this.fieldI[i] != that1.fieldI[i] {
			return fmt.Errorf("fieldI this[%v](%v) Not Equal that[%v](%v)", i, this.fieldI[i], i, that1.fieldI[i])
		}
	}
	if this.xxx_LenFieldJ != that1.xxx_LenFieldJ {
		return fmt.Errorf("that.fieldJ is not equal to this.fieldJ")
	}
	for i := 0; i < this.xxx_LenFieldJ; i++ {
		if this.fieldJ[i] != that1.fieldJ[i] {
			return fmt.Errorf("fieldJ this[%v](%v) Not Equal that[%v](%v)", i, this.fieldJ[i], i, that1.fieldJ[i])
		}
	}
	if this.xxx_LenFieldK != that1.xxx_LenFieldK {
		return fmt.Errorf("that.fieldK is not equal to this.fieldK")
	}
	for i := 0; i < this.xxx_LenFieldK; i++ {
		if this.fieldK[i] != that1.fieldK[i] {
			return fmt.Errorf("fieldK this[%v](%v) Not Equal that[%v](%v)", i, this.fieldK[i], i, that1.fieldK[i])
		}
	}
	if this.xxx_LenFieldL != that1.xxx_LenFieldL {
		return fmt.Errorf("that.fieldL is not equal to this.fieldL")
	}
	for i := 0; i < this.xxx_LenFieldL; i++ {
		if this.fieldL[i] != that1.fieldL[i] {
			return fmt.Errorf("fieldL this[%v](%v) Not Equal that[%v](%v)", i, this.fieldL[i], i, that1.fieldL[i])
		}
	}
	if this.xxx_LenFieldM != that1.xxx_LenFieldM {
		return fmt.Errorf("that.fieldM is not equal to this.fieldM")
	}
	for i := 0; i < this.xxx_LenFieldM; i++ {
		if this.fieldM[i] != that1.fieldM[i] {
			return fmt.Errorf("fieldM this[%v](%v) Not Equal that[%v](%v)", i, this.fieldM[i], i, that1.fieldM[i])
		}
	}
	if this.xxx_LenFieldN != that1.xxx_LenFieldN {
		return fmt.Errorf("that.fieldN is not equal to this.fieldN")
	}
	for i := 0; i < this.xxx_LenFieldN; i++ {
		if this.fieldN[i] != that1.fieldN[i] {
			return fmt.Errorf("fieldN this[%v](%v) Not Equal that[%v](%v)", i, this.fieldN[i], i, that1.fieldN[i])
		}
	}
	if this.xxx_LenFieldO != that1.xxx_LenFieldO {
		return fmt.Errorf("that.fieldO is not equal to this.fieldO")
	}
	for i := 0; i < this.xxx_LenFieldO; i++ {
		if !bytes.Equal(this.fieldO[i], that1.fieldO[i]) {
			return fmt.Errorf("fieldO this[%v](%v) Not Equal that[%v](%v)", i, this.fieldO[i], i, that1.fieldO[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomNameNinRepNative) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomNameNinRepNative)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_LenFieldA != that1.xxx_LenFieldA {
		return false
	}
	for i := 0; i < this.xxx_LenFieldA; i++ {
		if this.fieldA[i] != that1.fieldA[i] {
			return false
		}
	}
	if this.xxx_LenFieldB != that1.xxx_LenFieldB {
		return false
	}
	for i := 0; i < this.xxx_LenFieldB; i++ {
		if this.fieldB[i] != that1.fieldB[i] {
			return false
		}
	}
	if this.xxx_LenFieldC != that1.xxx_LenFieldC {
		return false
	}
	for i := 0; i < this.xxx_LenFieldC; i++ {
		if this.fieldC[i] != that1.fieldC[i] {
			return false
		}
	}
	if this.xxx_LenFieldD != that1.xxx_LenFieldD {
		return false
	}
	for i := 0; i < this.xxx_LenFieldD; i++ {
		if this.fieldD[i] != that1.fieldD[i] {
			return false
		}
	}
	if this.xxx_LenFieldE != that1.xxx_LenFieldE {
		return false
	}
	for i := 0; i < this.xxx_LenFieldE; i++ {
		if this.fieldE[i] != that1.fieldE[i] {
			return false
		}
	}
	if this.xxx_LenFieldF != that1.xxx_LenFieldF {
		return false
	}
	for i := 0; i < this.xxx_LenFieldF; i++ {
		if this.fieldF[i] != that1.fieldF[i] {
			return false
		}
	}
	if this.xxx_LenFieldG != that1.xxx_LenFieldG {
		return false
	}
	for i := 0; i < this.xxx_LenFieldG; i++ {
		if this.fieldG[i] != that1.fieldG[i] {
			return false
		}
	}
	if this.xxx_LenFieldH != that1.xxx_LenFieldH {
		return false
	}
	for i := 0; i < this.xxx_LenFieldH; i++ {
		if this.fieldH[i] != that1.fieldH[i] {
			return false
		}
	}
	if this.xxx_LenFieldI != that1.xxx_LenFieldI {
		return false
	}
	for i := 0; i < this.xxx_LenFieldI; i++ {
		if this.fieldI[i] != that1.fieldI[i] {
			return false
		}
	}
	if this.xxx_LenFieldJ != that1.xxx_LenFieldJ {
		return false
	}
	for i := 0; i < this.xxx_LenFieldJ; i++ {
		if this.fieldJ[i] != that1.fieldJ[i] {
			return false
		}
	}
	if this.xxx_LenFieldK != that1.xxx_LenFieldK {
		return false
	}
	for i := 0; i < this.xxx_LenFieldK; i++ {
		if this.fieldK[i] != that1.fieldK[i] {
			return false
		}
	}
	if this.xxx_LenFieldL != that1.xxx_LenFieldL {
		return false
	}
	for i := 0; i < this.xxx_LenFieldL; i++ {
		if this.fieldL[i] != that1.fieldL[i] {
			return false
		}
	}
	if this.xxx_LenFieldM != that1.xxx_LenFieldM {
		return false
	}
	for i := 0; i < this.xxx_LenFieldM; i++ {
		if this.fieldM[i] != that1.fieldM[i] {
			return false
		}
	}
	if this.xxx_LenFieldN != that1.xxx_LenFieldN {
		return false
	}
	for i := 0; i < this.xxx_LenFieldN; i++ {
		if this.fieldN[i] != that1.fieldN[i] {
			return false
		}
	}
	if this.xxx_LenFieldO != that1.xxx_LenFieldO {
		return false
	}
	for i := 0; i < this.xxx_LenFieldO; i++ {
		if !bytes.Equal(this.fieldO[i], that1.fieldO[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomNameNinStruct) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomNameNinStruct)
	if !ok {
		return fmt.Errorf("that is not of type *CustomNameNinStruct")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomNameNinStruct but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomNameNinStructbut is not nil && this == nil")
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return fmt.Errorf("that.fieldA is not equal to this.fieldA")
	}
	if this.xxx_IsFieldASet && this.fieldA != that1.fieldA {
		return fmt.Errorf("fieldA this(%v) Not Equal that(%v)", this.fieldA, that1.fieldA)
	}
	if this.xxx_IsFieldBSet != that1.xxx_IsFieldBSet {
		return fmt.Errorf("that.fieldB is not equal to this.fieldB")
	}
	if this.xxx_IsFieldBSet && this.fieldB != that1.fieldB {
		return fmt.Errorf("fieldB this(%v) Not Equal that(%v)", this.fieldB, that1.fieldB)
	}
	if this.xxx_IsFieldCSet != that1.xxx_IsFieldCSet {
		return fmt.Errorf("that.fieldC is not equal to this.fieldC")
	}
	if this.xxx_IsFieldCSet && !this.fieldC.Equal(that1.fieldC) {
		return fmt.Errorf("fieldC this(%v) Not Equal that(%v)", this.fieldC, that1.fieldC)
	}
	if this.xxx_LenFieldD != that1.xxx_LenFieldD {
		return fmt.Errorf("that.fieldD is not equal to this.fieldD")
	}
	for i := 0; i < this.xxx_LenFieldD; i++ {
		if !this.fieldD[i].Equal(that1.fieldD[i]) {
			return fmt.Errorf("fieldD this[%v](%v) Not Equal that[%v](%v)", i, this.fieldD[i], i, that1.fieldD[i])
		}
	}
	if this.xxx_IsFieldESet != that1.xxx_IsFieldESet {
		return fmt.Errorf("that.fieldE is not equal to this.fieldE")
	}
	if this.xxx_IsFieldESet && this.fieldE != that1.fieldE {
		return fmt.Errorf("fieldE this(%v) Not Equal that(%v)", this.fieldE, that1.fieldE)
	}
	if this.xxx_IsFieldFSet != that1.xxx_IsFieldFSet {
		return fmt.Errorf("that.fieldF is not equal to this.fieldF")
	}
	if this.xxx_IsFieldFSet && this.fieldF != that1.fieldF {
		return fmt.Errorf("fieldF this(%v) Not Equal that(%v)", this.fieldF, that1.fieldF)
	}
	if this.xxx_IsFieldGSet != that1.xxx_IsFieldGSet {
		return fmt.Errorf("that.fieldG is not equal to this.fieldG")
	}
	if this.xxx_IsFieldGSet && !this.fieldG.Equal(that1.fieldG) {
		return fmt.Errorf("fieldG this(%v) Not Equal that(%v)", this.fieldG, that1.fieldG)
	}
	if this.xxx_IsFieldHSet != that1.xxx_IsFieldHSet {
		return fmt.Errorf("that.fieldH is not equal to this.fieldH")
	}
	if this.xxx_IsFieldHSet && this.fieldH != that1.fieldH {
		return fmt.Errorf("fieldH this(%v) Not Equal that(%v)", this.fieldH, that1.fieldH)
	}
	if this.xxx_IsFieldISet != that1.xxx_IsFieldISet {
		return fmt.Errorf("that.fieldI is not equal to this.fieldI")
	}
	if this.xxx_IsFieldISet && this.fieldI != that1.fieldI {
		return fmt.Errorf("fieldI this(%v) Not Equal that(%v)", this.fieldI, that1.fieldI)
	}
	if this.xxx_IsFieldJSet != that1.xxx_IsFieldJSet {
		return fmt.Errorf("that.fieldJ is not equal to this.fieldJ")
	}
	if this.xxx_IsFieldJSet && !bytes.Equal(this.fieldJ, that1.fieldJ) {
		return fmt.Errorf("fieldJ this(%v) Not Equal that(%v)", this.fieldJ, that1.fieldJ)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomNameNinStruct) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomNameNinStruct)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return false
	}
	if this.xxx_IsFieldASet && this.fieldA != that1.fieldA {
		return false
	}
	if this.xxx_IsFieldBSet != that1.xxx_IsFieldBSet {
		return false
	}
	if this.xxx_IsFieldBSet && this.fieldB != that1.fieldB {
		return false
	}
	if this.xxx_IsFieldCSet != that1.xxx_IsFieldCSet {
		return false
	}
	if this.xxx_IsFieldCSet && !this.fieldC.Equal(that1.fieldC) {
		return false
	}
	if this.xxx_LenFieldD != that1.xxx_LenFieldD {
		return false
	}
	for i := 0; i < this.xxx_LenFieldD; i++ {
		if !this.fieldD[i].Equal(that1.fieldD[i]) {
			return false
		}
	}
	if this.xxx_IsFieldESet != that1.xxx_IsFieldESet {
		return false
	}
	if this.xxx_IsFieldESet && this.fieldE != that1.fieldE {
		return false
	}
	if this.xxx_IsFieldFSet != that1.xxx_IsFieldFSet {
		return false
	}
	if this.xxx_IsFieldFSet && this.fieldF != that1.fieldF {
		return false
	}
	if this.xxx_IsFieldGSet != that1.xxx_IsFieldGSet {
		return false
	}
	if this.xxx_IsFieldGSet && !this.fieldG.Equal(that1.fieldG) {
		return false
	}
	if this.xxx_IsFieldHSet != that1.xxx_IsFieldHSet {
		return false
	}
	if this.xxx_IsFieldHSet && this.fieldH != that1.fieldH {
		return false
	}
	if this.xxx_IsFieldISet != that1.xxx_IsFieldISet {
		return false
	}
	if this.xxx_IsFieldISet && this.fieldI != that1.fieldI {
		return false
	}
	if this.xxx_IsFieldJSet != that1.xxx_IsFieldJSet {
		return false
	}
	if this.xxx_IsFieldJSet && !bytes.Equal(this.fieldJ, that1.fieldJ) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomNameCustomType) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomNameCustomType)
	if !ok {
		return fmt.Errorf("that is not of type *CustomNameCustomType")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomNameCustomType but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomNameCustomTypebut is not nil && this == nil")
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return fmt.Errorf("that.fieldA is not equal to this.fieldA")
	}
	if this.xxx_IsFieldASet && this.fieldA != that1.fieldA {
		return fmt.Errorf("fieldA this(%v) Not Equal that(%v)", this.fieldA, that1.fieldA)
	}
	if this.xxx_IsFieldBSet != that1.xxx_IsFieldBSet {
		return fmt.Errorf("that.fieldB is not equal to this.fieldB")
	}
	if this.xxx_IsFieldBSet && this.fieldB != that1.fieldB {
		return fmt.Errorf("fieldB this(%v) Not Equal that(%v)", this.fieldB, that1.fieldB)
	}
	if this.xxx_LenFieldC != that1.xxx_LenFieldC {
		return fmt.Errorf("that.fieldC is not equal to this.fieldC")
	}
	for i := 0; i < this.xxx_LenFieldC; i++ {
		if this.fieldC[i] != that1.fieldC[i] {
			return fmt.Errorf("fieldC this[%v](%v) Not Equal that[%v](%v)", i, this.fieldC[i], i, that1.fieldC[i])
		}
	}
	if this.xxx_LenFieldD != that1.xxx_LenFieldD {
		return fmt.Errorf("that.fieldD is not equal to this.fieldD")
	}
	for i := 0; i < this.xxx_LenFieldD; i++ {
		if this.fieldD[i] != that1.fieldD[i] {
			return fmt.Errorf("fieldD this[%v](%v) Not Equal that[%v](%v)", i, this.fieldD[i], i, that1.fieldD[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomNameCustomType) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomNameCustomType)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return false
	}
	if this.xxx_IsFieldASet && this.fieldA != that1.fieldA {
		return false
	}
	if this.xxx_IsFieldBSet != that1.xxx_IsFieldBSet {
		return false
	}
	if this.xxx_IsFieldBSet && this.fieldB != that1.fieldB {
		return false
	}
	if this.xxx_LenFieldC != that1.xxx_LenFieldC {
		return false
	}
	for i := 0; i < this.xxx_LenFieldC; i++ {
		if this.fieldC[i] != that1.fieldC[i] {
			return false
		}
	}
	if this.xxx_LenFieldD != that1.xxx_LenFieldD {
		return false
	}
	for i := 0; i < this.xxx_LenFieldD; i++ {
		if this.fieldD[i] != that1.fieldD[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomNameNinEmbeddedStructUnion) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomNameNinEmbeddedStructUnion)
	if !ok {
		return fmt.Errorf("that is not of type *CustomNameNinEmbeddedStructUnion")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomNameNinEmbeddedStructUnion but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomNameNinEmbeddedStructUnionbut is not nil && this == nil")
	}
	if this.xxx_IsNidOptNativeSet != that1.xxx_IsNidOptNativeSet {
		return fmt.Errorf("that.NidOptNative is not equal to this.NidOptNative")
	}
	if this.xxx_IsNidOptNativeSet && !this.NidOptNative.Equal(that1.NidOptNative) {
		return fmt.Errorf("NidOptNative this(%v) Not Equal that(%v)", this.NidOptNative, that1.NidOptNative)
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return fmt.Errorf("that.fieldA is not equal to this.fieldA")
	}
	if this.xxx_IsFieldASet && !this.fieldA.Equal(that1.fieldA) {
		return fmt.Errorf("fieldA this(%v) Not Equal that(%v)", this.fieldA, that1.fieldA)
	}
	if this.xxx_IsFieldBSet != that1.xxx_IsFieldBSet {
		return fmt.Errorf("that.fieldB is not equal to this.fieldB")
	}
	if this.xxx_IsFieldBSet && this.fieldB != that1.fieldB {
		return fmt.Errorf("fieldB this(%v) Not Equal that(%v)", this.fieldB, that1.fieldB)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomNameNinEmbeddedStructUnion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomNameNinEmbeddedStructUnion)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsNidOptNativeSet != that1.xxx_IsNidOptNativeSet {
		return false
	}
	if this.xxx_IsNidOptNativeSet && !this.NidOptNative.Equal(that1.NidOptNative) {
		return false
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return false
	}
	if this.xxx_IsFieldASet && !this.fieldA.Equal(that1.fieldA) {
		return false
	}
	if this.xxx_IsFieldBSet != that1.xxx_IsFieldBSet {
		return false
	}
	if this.xxx_IsFieldBSet && this.fieldB != that1.fieldB {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomNameEnum) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomNameEnum)
	if !ok {
		return fmt.Errorf("that is not of type *CustomNameEnum")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomNameEnum but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomNameEnumbut is not nil && this == nil")
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return fmt.Errorf("that.fieldA is not equal to this.fieldA")
	}
	if this.xxx_IsFieldASet && this.fieldA != that1.fieldA {
		return fmt.Errorf("fieldA this(%v) Not Equal that(%v)", this.fieldA, that1.fieldA)
	}
	if this.xxx_LenFieldB != that1.xxx_LenFieldB {
		return fmt.Errorf("that.fieldB is not equal to this.fieldB")
	}
	for i := 0; i < this.xxx_LenFieldB; i++ {
		if this.fieldB[i] != that1.fieldB[i] {
			return fmt.Errorf("fieldB this[%v](%v) Not Equal that[%v](%v)", i, this.fieldB[i], i, that1.fieldB[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomNameEnum) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomNameEnum)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsFieldASet != that1.xxx_IsFieldASet {
		return false
	}
	if this.xxx_IsFieldASet && this.fieldA != that1.fieldA {
		return false
	}
	if this.xxx_LenFieldB != that1.xxx_LenFieldB {
		return false
	}
	for i := 0; i < this.xxx_LenFieldB; i++ {
		if this.fieldB[i] != that1.fieldB[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NoExtensionsMap) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NoExtensionsMap)
	if !ok {
		return fmt.Errorf("that is not of type *NoExtensionsMap")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NoExtensionsMap but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NoExtensionsMapbut is not nil && this == nil")
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return fmt.Errorf("that.field1 is not equal to this.field1")
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return fmt.Errorf("field1 this(%v) Not Equal that(%v)", this.field1, that1.field1)
	}
	if !bytes.Equal(this.XXX_extensions, that1.XXX_extensions) {
		return fmt.Errorf("XXX_extensions this(%v) Not Equal that(%v)", this.XXX_extensions, that1.XXX_extensions)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NoExtensionsMap) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NoExtensionsMap)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.xxx_IsField1Set != that1.xxx_IsField1Set {
		return false
	}
	if this.xxx_IsField1Set && this.field1 != that1.field1 {
		return false
	}
	if !bytes.Equal(this.XXX_extensions, that1.XXX_extensions) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (x TheTestEnum) String() string {
	s, ok := TheTestEnum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AnotherTestEnum) String() string {
	s, ok := AnotherTestEnum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NestedDefinition_NestedEnum) String() string {
	s, ok := NestedDefinition_NestedEnum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NidOptNative) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinOptNative) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NidRepNative) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinRepNative) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NidRepPackedNative) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinRepPackedNative) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NidOptStruct) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinOptStruct) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NidRepStruct) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinRepStruct) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NidEmbeddedStruct) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinEmbeddedStruct) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NidNestedStruct) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinNestedStruct) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NidOptCustom) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinOptCustom) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NidRepCustom) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinRepCustom) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinOptNativeUnion) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinOptStructUnion) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinEmbeddedStructUnion) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinNestedStructUnion) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *Tree) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *OrBranch) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *AndBranch) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *Leaf) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *DeepTree) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *ADeepBranch) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *AndDeepBranch) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *DeepLeaf) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *Nil) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NidOptEnum) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinOptEnum) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NidRepEnum) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinRepEnum) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinOptEnumDefault) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *AnotherNinOptEnum) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *AnotherNinOptEnumDefault) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *Timer) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *MyExtendable) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *OtherExtenable) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NestedDefinition) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NestedDefinition_NestedMessage) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NestedDefinition_NestedMessage_NestedNestedMsg) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NestedScope) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NinOptNativeDefault) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *CustomContainer) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *CustomNameNidOptNative) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *CustomNameNinOptNative) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *CustomNameNinRepNative) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *CustomNameNinStruct) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *CustomNameCustomType) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *CustomNameNinEmbeddedStructUnion) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *CustomNameEnum) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func (this *NoExtensionsMap) Description() (desc *google_protobuf.FileDescriptorSet) {
	return ThetestDescription()
}
func ThetestDescription() (desc *google_protobuf.FileDescriptorSet) {
	return &google_protobuf.FileDescriptorSet{File: []*google_protobuf.FileDescriptorProto{&google_protobuf.FileDescriptorProto{Name: func(v string) *string { return &v }("github.com/dropbox/goprotoc/protobuf/google/protobuf/descriptor.proto"), Package: func(v string) *string { return &v }("google.protobuf"), Dependency: []string(nil), PublicDependency: []int32(nil), WeakDependency: []int32(nil), MessageType: []*google_protobuf.DescriptorProto{&google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("FileDescriptorSet"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("file"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.FileDescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("FileDescriptorProto"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("name"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("package"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("dependency"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("public_dependency"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("weak_dependency"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("message_type"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.DescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("enum_type"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.EnumDescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("service"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.ServiceDescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("extension"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.FieldDescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("options"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.FileOptions"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("source_code_info"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.SourceCodeInfo"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("DescriptorProto"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("name"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("field"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.FieldDescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("extension"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.FieldDescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("nested_type"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.DescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("enum_type"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.EnumDescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("extension_range"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.DescriptorProto.ExtensionRange"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("options"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto{&google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("ExtensionRange"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("start"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("end"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}}, EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("FieldDescriptorProto"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("name"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("number"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("label"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".google.protobuf.FieldDescriptorProto.Label"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("type"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".google.protobuf.FieldDescriptorProto.Type"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("type_name"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("extendee"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("default_value"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("options"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.FieldOptions"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto{&google_protobuf.EnumDescriptorProto{Name: func(v string) *string { return &v }("Type"), Value: []*google_protobuf.EnumValueDescriptorProto{&google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_DOUBLE"), Number: func(v int32) *int32 { return &v }(1), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_FLOAT"), Number: func(v int32) *int32 { return &v }(2), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_INT64"), Number: func(v int32) *int32 { return &v }(3), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_UINT64"), Number: func(v int32) *int32 { return &v }(4), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_INT32"), Number: func(v int32) *int32 { return &v }(5), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_FIXED64"), Number: func(v int32) *int32 { return &v }(6), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_FIXED32"), Number: func(v int32) *int32 { return &v }(7), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_BOOL"), Number: func(v int32) *int32 { return &v }(8), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_STRING"), Number: func(v int32) *int32 { return &v }(9), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_GROUP"), Number: func(v int32) *int32 { return &v }(10), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_MESSAGE"), Number: func(v int32) *int32 { return &v }(11), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_BYTES"), Number: func(v int32) *int32 { return &v }(12), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_UINT32"), Number: func(v int32) *int32 { return &v }(13), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_ENUM"), Number: func(v int32) *int32 { return &v }(14), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_SFIXED32"), Number: func(v int32) *int32 { return &v }(15), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_SFIXED64"), Number: func(v int32) *int32 { return &v }(16), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_SINT32"), Number: func(v int32) *int32 { return &v }(17), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_SINT64"), Number: func(v int32) *int32 { return &v }(18), Options: nil, XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumDescriptorProto{Name: func(v string) *string { return &v }("Label"), Value: []*google_protobuf.EnumValueDescriptorProto{&google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("LABEL_OPTIONAL"), Number: func(v int32) *int32 { return &v }(1), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("LABEL_REQUIRED"), Number: func(v int32) *int32 { return &v }(2), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("LABEL_REPEATED"), Number: func(v int32) *int32 { return &v }(3), Options: nil, XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}}, ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("EnumDescriptorProto"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("name"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("value"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.EnumValueDescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("options"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.EnumOptions"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("EnumValueDescriptorProto"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("name"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("number"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("options"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.EnumValueOptions"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("ServiceDescriptorProto"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("name"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("method"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.MethodDescriptorProto"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("options"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.ServiceOptions"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("MethodDescriptorProto"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("name"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("input_type"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("output_type"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("options"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.MethodOptions"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("FileOptions"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("java_package"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("java_outer_classname"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("java_multiple_files"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("false"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("java_generate_equals_and_hash"), Number: func(v int32) *int32 { return &v }(20), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("false"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("optimize_for"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".google.protobuf.FileOptions.OptimizeMode"), Extendee: nil, DefaultValue: func(v string) *string { return &v }("SPEED"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("go_package"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("cc_generic_services"), Number: func(v int32) *int32 { return &v }(16), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("false"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("java_generic_services"), Number: func(v int32) *int32 { return &v }(17), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("false"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("py_generic_services"), Number: func(v int32) *int32 { return &v }(18), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("false"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("uninterpreted_option"), Number: func(v int32) *int32 { return &v }(999), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.UninterpretedOption"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto{&google_protobuf.EnumDescriptorProto{Name: func(v string) *string { return &v }("OptimizeMode"), Value: []*google_protobuf.EnumValueDescriptorProto{&google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("SPEED"), Number: func(v int32) *int32 { return &v }(1), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("CODE_SIZE"), Number: func(v int32) *int32 { return &v }(2), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("LITE_RUNTIME"), Number: func(v int32) *int32 { return &v }(3), Options: nil, XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}}, ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange{&google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(1000), End: func(v int32) *int32 { return &v }(536870912), XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("MessageOptions"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("message_set_wire_format"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("false"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("no_standard_descriptor_accessor"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("false"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("uninterpreted_option"), Number: func(v int32) *int32 { return &v }(999), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.UninterpretedOption"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange{&google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(1000), End: func(v int32) *int32 { return &v }(536870912), XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("FieldOptions"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("ctype"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".google.protobuf.FieldOptions.CType"), Extendee: nil, DefaultValue: func(v string) *string { return &v }("STRING"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("packed"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("lazy"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("false"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("deprecated"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("false"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("experimental_map_key"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("weak"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("false"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("interpreted_customtype"), Number: func(v int32) *int32 { return &v }(616), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("uninterpreted_option"), Number: func(v int32) *int32 { return &v }(999), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.UninterpretedOption"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto{&google_protobuf.EnumDescriptorProto{Name: func(v string) *string { return &v }("CType"), Value: []*google_protobuf.EnumValueDescriptorProto{&google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("STRING"), Number: func(v int32) *int32 { return &v }(0), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("CORD"), Number: func(v int32) *int32 { return &v }(1), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("STRING_PIECE"), Number: func(v int32) *int32 { return &v }(2), Options: nil, XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}}, ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange{&google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(1000), End: func(v int32) *int32 { return &v }(536870912), XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("EnumOptions"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("allow_alias"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("true"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("uninterpreted_option"), Number: func(v int32) *int32 { return &v }(999), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.UninterpretedOption"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange{&google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(1000), End: func(v int32) *int32 { return &v }(536870912), XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("EnumValueOptions"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("uninterpreted_option"), Number: func(v int32) *int32 { return &v }(999), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.UninterpretedOption"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange{&google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(1000), End: func(v int32) *int32 { return &v }(536870912), XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("ServiceOptions"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("uninterpreted_option"), Number: func(v int32) *int32 { return &v }(999), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.UninterpretedOption"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange{&google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(1000), End: func(v int32) *int32 { return &v }(536870912), XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("MethodOptions"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("uninterpreted_option"), Number: func(v int32) *int32 { return &v }(999), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.UninterpretedOption"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange{&google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(1000), End: func(v int32) *int32 { return &v }(536870912), XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("UninterpretedOption"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("name"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.UninterpretedOption.NamePart"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("identifier_value"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("positive_int_value"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("negative_int_value"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("double_value"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("string_value"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("aggregate_value"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto{&google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NamePart"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("name_part"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(2), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("is_extension"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(2), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}}, EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("SourceCodeInfo"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("location"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".google.protobuf.SourceCodeInfo.Location"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto{&google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("Location"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("path"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("span"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("leading_comments"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("trailing_comments"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}}, EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}}, EnumType: []*google_protobuf.EnumDescriptorProto(nil), Service: []*google_protobuf.ServiceDescriptorProto(nil), Extension: []*google_protobuf.FieldDescriptorProto(nil), Options: &google_protobuf.FileOptions{JavaPackage: func(v string) *string { return &v }("com.google.protobuf"), JavaOuterClassname: func(v string) *string { return &v }("DescriptorProtos"), JavaMultipleFiles: nil, JavaGenerateEqualsAndHash: nil, OptimizeFor: func(v google_protobuf.FileOptions_OptimizeMode) *google_protobuf.FileOptions_OptimizeMode { return &v }(1), GoPackage: nil, CcGenericServices: nil, JavaGenericServices: nil, PyGenericServices: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, SourceCodeInfo: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FileDescriptorProto{Name: func(v string) *string { return &v }("github.com/dropbox/goprotoc/gogoproto/gogo.proto"), Package: func(v string) *string { return &v }("gogoproto"), Dependency: []string{"github.com/dropbox/goprotoc/protobuf/google/protobuf/descriptor.proto"}, PublicDependency: []int32(nil), WeakDependency: []int32(nil), MessageType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), Service: []*google_protobuf.ServiceDescriptorProto(nil), Extension: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("goproto_enum_prefix"), Number: func(v int32) *int32 { return &v }(62001), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.EnumOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("goproto_enum_stringer"), Number: func(v int32) *int32 { return &v }(62021), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.EnumOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("enum_stringer"), Number: func(v int32) *int32 { return &v }(62022), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.EnumOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("goproto_getters_all"), Number: func(v int32) *int32 { return &v }(63001), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("goproto_enum_prefix_all"), Number: func(v int32) *int32 { return &v }(63002), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("verbose_equal_all"), Number: func(v int32) *int32 { return &v }(63004), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("face_all"), Number: func(v int32) *int32 { return &v }(63005), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("gostring_all"), Number: func(v int32) *int32 { return &v }(63006), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("populate_all"), Number: func(v int32) *int32 { return &v }(63007), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("stringer_all"), Number: func(v int32) *int32 { return &v }(63008), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("onlyone_all"), Number: func(v int32) *int32 { return &v }(63009), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("equal_all"), Number: func(v int32) *int32 { return &v }(63013), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("description_all"), Number: func(v int32) *int32 { return &v }(63014), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("testgen_all"), Number: func(v int32) *int32 { return &v }(63015), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("benchgen_all"), Number: func(v int32) *int32 { return &v }(63016), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("marshaler_all"), Number: func(v int32) *int32 { return &v }(63017), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("unmarshaler_all"), Number: func(v int32) *int32 { return &v }(63018), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("bufferto_all"), Number: func(v int32) *int32 { return &v }(63019), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("sizer_all"), Number: func(v int32) *int32 { return &v }(63020), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("goproto_enum_stringer_all"), Number: func(v int32) *int32 { return &v }(63021), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("enum_stringer_all"), Number: func(v int32) *int32 { return &v }(63022), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("goproto_extensions_map_all"), Number: func(v int32) *int32 { return &v }(63025), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("setter_all"), Number: func(v int32) *int32 { return &v }(63026), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FileOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("goproto_getters"), Number: func(v int32) *int32 { return &v }(64001), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("verbose_equal"), Number: func(v int32) *int32 { return &v }(64004), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("face"), Number: func(v int32) *int32 { return &v }(64005), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("gostring"), Number: func(v int32) *int32 { return &v }(64006), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("populate"), Number: func(v int32) *int32 { return &v }(64007), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("stringer"), Number: func(v int32) *int32 { return &v }(67008), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("onlyone"), Number: func(v int32) *int32 { return &v }(64009), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("equal"), Number: func(v int32) *int32 { return &v }(64013), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("description"), Number: func(v int32) *int32 { return &v }(64014), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("testgen"), Number: func(v int32) *int32 { return &v }(64015), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("benchgen"), Number: func(v int32) *int32 { return &v }(64016), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("marshaler"), Number: func(v int32) *int32 { return &v }(64017), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("unmarshaler"), Number: func(v int32) *int32 { return &v }(64018), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("bufferto"), Number: func(v int32) *int32 { return &v }(64019), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("sizer"), Number: func(v int32) *int32 { return &v }(64020), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("goproto_extensions_map"), Number: func(v int32) *int32 { return &v }(64025), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("setter"), Number: func(v int32) *int32 { return &v }(64026), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.MessageOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("nullable"), Number: func(v int32) *int32 { return &v }(65001), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FieldOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("embed"), Number: func(v int32) *int32 { return &v }(65002), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FieldOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("customtype"), Number: func(v int32) *int32 { return &v }(65003), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FieldOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("customname"), Number: func(v int32) *int32 { return &v }(65004), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FieldOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("jsontag"), Number: func(v int32) *int32 { return &v }(65005), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FieldOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("moretags"), Number: func(v int32) *int32 { return &v }(65006), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: func(v string) *string { return &v }(".google.protobuf.FieldOptions"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Options: nil, SourceCodeInfo: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FileDescriptorProto{Name: func(v string) *string { return &v }("thetest.proto"), Package: func(v string) *string { return &v }("test"), Dependency: []string{"github.com/dropbox/goprotoc/gogoproto/gogo.proto"}, PublicDependency: []int32(nil), WeakDependency: []int32(nil), MessageType: []*google_protobuf.DescriptorProto{&google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidOptNative"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(18), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field9"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(7), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field10"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(15), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field11"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field12"), Number: func(v int32) *int32 { return &v }(12), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinOptNative"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(18), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field9"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(7), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field10"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(15), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field11"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field12"), Number: func(v int32) *int32 { return &v }(12), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidRepNative"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(18), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field9"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(7), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field10"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(15), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field11"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field12"), Number: func(v int32) *int32 { return &v }(12), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinRepNative"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(18), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field9"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(7), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field10"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(15), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field11"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field12"), Number: func(v int32) *int32 { return &v }(12), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidRepPackedNative"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(18), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field9"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(7), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field10"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(15), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field11"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field12"), Number: func(v int32) *int32 { return &v }(12), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinRepPackedNative"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(18), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field9"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(7), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field10"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(15), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field11"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field12"), Number: func(v int32) *int32 { return &v }(12), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: func(v bool) *bool { return &v }(true), Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidOptStruct"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinOptStruct"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNative"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidRepStruct"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinRepStruct"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNative"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidEmbeddedStruct"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65002: proto.NewExtension([]byte{0xd0, 0xde, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field200"), Number: func(v int32) *int32 { return &v }(200), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field210"), Number: func(v int32) *int32 { return &v }(210), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinEmbeddedStruct"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65002: proto.NewExtension([]byte{0xd0, 0xde, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field200"), Number: func(v int32) *int32 { return &v }(200), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field210"), Number: func(v int32) *int32 { return &v }(210), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidNestedStruct"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptStruct"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidRepStruct"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinNestedStruct"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptStruct"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinRepStruct"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidOptCustom"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Id"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x2, 0x49, 0x64})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Value"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinOptCustom"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Id"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x2, 0x49, 0x64})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Value"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidRepCustom"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Id"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x2, 0x49, 0x64})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Value"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinRepCustom"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Id"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x2, 0x49, 0x64})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Value"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinOptNativeUnion"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64009: proto.NewExtension([]byte{0xc8, 0xa0, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinOptStructUnion"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNative"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64009: proto.NewExtension([]byte{0xc8, 0xa0, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinEmbeddedStructUnion"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65002: proto.NewExtension([]byte{0xd0, 0xde, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field200"), Number: func(v int32) *int32 { return &v }(200), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNative"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field210"), Number: func(v int32) *int32 { return &v }(210), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64009: proto.NewExtension([]byte{0xc8, 0xa0, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinNestedStructUnion"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNativeUnion"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptStructUnion"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinEmbeddedStructUnion"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64009: proto.NewExtension([]byte{0xc8, 0xa0, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("Tree"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Or"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.OrBranch"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("And"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.AndBranch"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Leaf"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.Leaf"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64009: proto.NewExtension([]byte{0xc8, 0xa0, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("OrBranch"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Left"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.Tree"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Right"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.Tree"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("AndBranch"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Left"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.Tree"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Right"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.Tree"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("Leaf"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Value"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("StrValue"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("DeepTree"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Down"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.ADeepBranch"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("And"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.AndDeepBranch"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Leaf"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.DeepLeaf"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64009: proto.NewExtension([]byte{0xc8, 0xa0, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("ADeepBranch"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Down"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.DeepTree"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("AndDeepBranch"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Left"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.DeepTree"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Right"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.DeepTree"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("DeepLeaf"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Tree"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.Tree"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("Nil"), Field: []*google_protobuf.FieldDescriptorProto(nil), Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidOptEnum"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.TheTestEnum"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinOptEnum"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.TheTestEnum"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NidRepEnum"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.TheTestEnum"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinRepEnum"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.TheTestEnum"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinOptEnumDefault"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.TheTestEnum"), Extendee: nil, DefaultValue: func(v string) *string { return &v }("C"), Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64001: proto.NewExtension([]byte{0x88, 0xa0, 0x1f, 0x1}), 64005: proto.NewExtension([]byte{0xa8, 0xa0, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("AnotherNinOptEnum"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.AnotherTestEnum"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("AnotherNinOptEnumDefault"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.AnotherTestEnum"), Extendee: nil, DefaultValue: func(v string) *string { return &v }("E"), Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64001: proto.NewExtension([]byte{0x88, 0xa0, 0x1f, 0x1}), 64005: proto.NewExtension([]byte{0xa8, 0xa0, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("Timer"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Time1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Time2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Data"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("MyExtendable"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange{&google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(100), End: func(v int32) *int32 { return &v }(200), XXX_unrecognized: []byte{}}}, Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64005: proto.NewExtension([]byte{0xa8, 0xa0, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("OtherExtenable"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("M"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.MyExtendable"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange{&google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(14), End: func(v int32) *int32 { return &v }(17), XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(10), End: func(v int32) *int32 { return &v }(13), XXX_unrecognized: []byte{}}}, Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64005: proto.NewExtension([]byte{0xa8, 0xa0, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NestedDefinition"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("EnumField"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.NestedDefinition.NestedEnum"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("NNM"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NestedDefinition.NestedMessage.NestedNestedMsg"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("NM"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NestedDefinition.NestedMessage"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto{&google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NestedMessage"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("NestedField1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("NNM"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NestedDefinition.NestedMessage.NestedNestedMsg"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto{&google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NestedNestedMsg"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("NestedNestedField1"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}}, EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}}, EnumType: []*google_protobuf.EnumDescriptorProto{&google_protobuf.EnumDescriptorProto{Name: func(v string) *string { return &v }("NestedEnum"), Value: []*google_protobuf.EnumValueDescriptorProto{&google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("TYPE_NESTED"), Number: func(v int32) *int32 { return &v }(1), Options: nil, XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}}, ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NestedScope"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("A"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NestedDefinition.NestedMessage.NestedNestedMsg"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("B"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.NestedDefinition.NestedEnum"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("C"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NestedDefinition.NestedMessage"), Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NinOptNativeDefault"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234.1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234.1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(18), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field9"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(7), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field10"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(15), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field11"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field12"), Number: func(v int32) *int32 { return &v }(12), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("true"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: func(v string) *string { return &v }("1234"), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64001: proto.NewExtension([]byte{0x88, 0xa0, 0x1f, 0x1}), 64005: proto.NewExtension([]byte{0xa8, 0xa0, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("CustomContainer"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("CustomStruct"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptCustom"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("CustomNameNidOptNative"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(18), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field9"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(7), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field10"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(15), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4a})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field11"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field12"), Number: func(v int32) *int32 { return &v }(12), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65001: proto.NewExtension([]byte{0xc8, 0xde, 0x1f, 0x0}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("CustomNameNinOptNative"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(18), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field9"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(7), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field10"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(15), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4a})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field11"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field12"), Number: func(v int32) *int32 { return &v }(12), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x5, 0x46, 0x69, 0x65, 0x6c, 0x4c})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("CustomNameNinRepNative"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(5), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field5"), Number: func(v int32) *int32 { return &v }(5), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(13), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(18), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field9"), Number: func(v int32) *int32 { return &v }(9), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(7), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field10"), Number: func(v int32) *int32 { return &v }(10), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(15), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4a})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field11"), Number: func(v int32) *int32 { return &v }(11), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(6), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field12"), Number: func(v int32) *int32 { return &v }(12), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(16), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("CustomNameNinStruct"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(2), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field3"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field4"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field6"), Number: func(v int32) *int32 { return &v }(6), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(4), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field7"), Number: func(v int32) *int32 { return &v }(7), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(17), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field8"), Number: func(v int32) *int32 { return &v }(8), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field13"), Number: func(v int32) *int32 { return &v }(13), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field14"), Number: func(v int32) *int32 { return &v }(14), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(9), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field15"), Number: func(v int32) *int32 { return &v }(15), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(12), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4a})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("CustomNameCustomType"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Id"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x2, 0x49, 0x64}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Value"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Ids"), Number: func(v int32) *int32 { return &v }(3), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x2, 0x49, 0x64}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Values"), Number: func(v int32) *int32 { return &v }(4), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65003: proto.NewExtension([]byte{0xda, 0xde, 0x1f, 0x6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74}), 65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("CustomNameNinEmbeddedStructUnion"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NidOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65002: proto.NewExtension([]byte{0xd0, 0xde, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field200"), Number: func(v int32) *int32 { return &v }(200), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNative"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field210"), Number: func(v int32) *int32 { return &v }(210), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(8), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64009: proto.NewExtension([]byte{0xc8, 0xa0, 0x1f, 0x1})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("CustomNameEnum"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.TheTestEnum"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field2"), Number: func(v int32) *int32 { return &v }(2), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(3), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(14), TypeName: func(v string) *string { return &v }(".test.TheTestEnum"), Extendee: nil, DefaultValue: nil, Options: &google_protobuf.FieldOptions{Ctype: nil, Packed: nil, Lazy: nil, Deprecated: nil, ExperimentalMapKey: nil, Weak: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{65004: proto.NewExtension([]byte{0xe2, 0xde, 0x1f, 0x6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange(nil), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.DescriptorProto{Name: func(v string) *string { return &v }("NoExtensionsMap"), Field: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("Field1"), Number: func(v int32) *int32 { return &v }(1), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(3), TypeName: nil, Extendee: nil, DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Extension: []*google_protobuf.FieldDescriptorProto(nil), NestedType: []*google_protobuf.DescriptorProto(nil), EnumType: []*google_protobuf.EnumDescriptorProto(nil), ExtensionRange: []*google_protobuf.DescriptorProto_ExtensionRange{&google_protobuf.DescriptorProto_ExtensionRange{Start: func(v int32) *int32 { return &v }(100), End: func(v int32) *int32 { return &v }(200), XXX_unrecognized: []byte{}}}, Options: &google_protobuf.MessageOptions{MessageSetWireFormat: nil, NoStandardDescriptorAccessor: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{64005: proto.NewExtension([]byte{0xa8, 0xa0, 0x1f, 0x0}), 64025: proto.NewExtension([]byte{0xc8, 0xa1, 0x1f, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, EnumType: []*google_protobuf.EnumDescriptorProto{&google_protobuf.EnumDescriptorProto{Name: func(v string) *string { return &v }("TheTestEnum"), Value: []*google_protobuf.EnumValueDescriptorProto{&google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("A"), Number: func(v int32) *int32 { return &v }(0), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("B"), Number: func(v int32) *int32 { return &v }(1), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("C"), Number: func(v int32) *int32 { return &v }(2), Options: nil, XXX_unrecognized: []byte{}}}, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumDescriptorProto{Name: func(v string) *string { return &v }("AnotherTestEnum"), Value: []*google_protobuf.EnumValueDescriptorProto{&google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("D"), Number: func(v int32) *int32 { return &v }(10), Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.EnumValueDescriptorProto{Name: func(v string) *string { return &v }("E"), Number: func(v int32) *int32 { return &v }(11), Options: nil, XXX_unrecognized: []byte{}}}, Options: &google_protobuf.EnumOptions{AllowAlias: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{62001: proto.NewExtension([]byte{0x88, 0xa3, 0x1e, 0x0})}, XXX_unrecognized: []byte{}}, XXX_unrecognized: []byte{}}}, Service: []*google_protobuf.ServiceDescriptorProto(nil), Extension: []*google_protobuf.FieldDescriptorProto{&google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("FieldA"), Number: func(v int32) *int32 { return &v }(100), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: func(v string) *string { return &v }(".test.MyExtendable"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("FieldB"), Number: func(v int32) *int32 { return &v }(101), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNative"), Extendee: func(v string) *string { return &v }(".test.MyExtendable"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("FieldC"), Number: func(v int32) *int32 { return &v }(102), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinEmbeddedStruct"), Extendee: func(v string) *string { return &v }(".test.MyExtendable"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("FieldA1"), Number: func(v int32) *int32 { return &v }(100), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(1), TypeName: nil, Extendee: func(v string) *string { return &v }(".test.NoExtensionsMap"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("FieldB1"), Number: func(v int32) *int32 { return &v }(101), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinOptNative"), Extendee: func(v string) *string { return &v }(".test.NoExtensionsMap"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}, &google_protobuf.FieldDescriptorProto{Name: func(v string) *string { return &v }("FieldC1"), Number: func(v int32) *int32 { return &v }(102), Label: func(v google_protobuf.FieldDescriptorProto_Label) *google_protobuf.FieldDescriptorProto_Label {
		return &v
	}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {
		return &v
	}(11), TypeName: func(v string) *string { return &v }(".test.NinEmbeddedStruct"), Extendee: func(v string) *string { return &v }(".test.NoExtensionsMap"), DefaultValue: nil, Options: nil, XXX_unrecognized: []byte{}}}, Options: &google_protobuf.FileOptions{JavaPackage: nil, JavaOuterClassname: nil, JavaMultipleFiles: nil, JavaGenerateEqualsAndHash: nil, OptimizeFor: nil, GoPackage: nil, CcGenericServices: nil, JavaGenericServices: nil, PyGenericServices: nil, UninterpretedOption: []*google_protobuf.UninterpretedOption(nil), XXX_extensions: map[int32]proto.Extension{63001: proto.NewExtension([]byte{0xc8, 0xe1, 0x1e, 0x1}), 63002: proto.NewExtension([]byte{0xd0, 0xe1, 0x1e, 0x0}), 63004: proto.NewExtension([]byte{0xe0, 0xe1, 0x1e, 0x1}), 63005: proto.NewExtension([]byte{0xe8, 0xe1, 0x1e, 0x1}), 63006: proto.NewExtension([]byte{0xf0, 0xe1, 0x1e, 0x1}), 63007: proto.NewExtension([]byte{0xf8, 0xe1, 0x1e, 0x1}), 63008: proto.NewExtension([]byte{0x80, 0xe2, 0x1e, 0x1}), 63013: proto.NewExtension([]byte{0xa8, 0xe2, 0x1e, 0x1}), 63014: proto.NewExtension([]byte{0xb0, 0xe2, 0x1e, 0x1}), 63015: proto.NewExtension([]byte{0xb8, 0xe2, 0x1e, 0x1}), 63016: proto.NewExtension([]byte{0xc0, 0xe2, 0x1e, 0x1}), 63017: proto.NewExtension([]byte{0xc8, 0xe2, 0x1e, 0x0}), 63018: proto.NewExtension([]byte{0xd0, 0xe2, 0x1e, 0x0}), 63020: proto.NewExtension([]byte{0xe0, 0xe2, 0x1e, 0x1}), 63021: proto.NewExtension([]byte{0xe8, 0xe2, 0x1e, 0x0}), 63022: proto.NewExtension([]byte{0xf0, 0xe2, 0x1e, 0x1})}, XXX_unrecognized: []byte{}}, SourceCodeInfo: nil, XXX_unrecognized: []byte{}}}, XXX_unrecognized: []byte{}}
}
